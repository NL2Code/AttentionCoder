{ "task_id": "HumanEval/0", "keyWords": " 检查在给定的数字列表中，是否有两个数字彼此之间的距离小于给定阈值。\n    "}
{ "task_id": "HumanEval/1", "keyWords": " 该函数的输入是一个包含多组嵌套括号的字符串。你的目标是将这些组分隔成单独的字符串，并返回这些字符串的列表。单独的组是平衡的(每个开的括号都适当地关闭)，并且彼此之间不嵌套，忽略输入字符串中的任何空格。\n    "}
{ "task_id": "HumanEval/2", "keyWords": " 给定一个正浮点数，它可以分解为和整数部分(最大整数小于给定数)和小数(剩余部分总是小于1)。返回数字的小数部分。\n    "}
{ "task_id": "HumanEval/3", "keyWords": " 你会得到一个初始账户余额为0的银行账户的存取款操作清单。您的任务是检测账户余额是否在任何时候低于零，并且在那个点函数应该返回True。否则它应该返回False。\n    "}
{ "task_id": "HumanEval/4", "keyWords": " 对于给定的输入数列表，在这个数据集的平均值附近计算平均绝对偏差。平均绝对偏差是每个元素和中心点(在本例中为平均值)的平均绝对差异:\n"}
{ "task_id": "HumanEval/5", "keyWords": " 在输入列表“numbers”的每两个连续元素之间插入一个数字“delimeter”。\n    "}
{ "task_id": "HumanEval/6", "keyWords": " 该函数的输入是一个字符串，表示用空格分隔的嵌套括号的多个组。对于每一组，输出嵌套括号的最深层。\n例如(()())最多有两层嵌套，而((()))有三层。\n\n    "}
{ "task_id": "HumanEval/7", "keyWords": " 仅对包含给定子字符串的字符串的输入列表进行过滤\n    "}
{ "task_id": "HumanEval/8", "keyWords": " 对于给定的整数列表，返回一个由列表中所有整数的和与乘积组成的元组。空列表的和应该等于0，空列表的积应该等于1。\n    "}
{ "task_id": "HumanEval/9", "keyWords": " 从一个给定的整数列表中，按顺序生成一个增长到给定列表长度的最大元素列表。\n    "}
{ "task_id": "HumanEval/10", "keyWords": "查找以提供的字符串开头的最短回文。\n算法思路简单:\n    -查找所提供字符串中最长的回文后缀。\n    -在字符串的末尾添加与回文后缀之前的字符串前缀相反的字符串。\n    "}
{ "task_id": "HumanEval/11", "keyWords": " 输入是两个字符串a和b，只有1和0。对这些输入执行二进制异或，并以字符串形式返回结果。\n    "}
{ "task_id": "HumanEval/12", "keyWords": " 在字符串列表中，返回最长的字符串。如果有多个，则返回第一个相同长度的字符串。如果输入列表为空，则返回None。\n    "}
{ "task_id": "HumanEval/13", "keyWords": " 返回两个整数a和b的最大公约数\n    "}
{ "task_id": "HumanEval/14", "keyWords": " 返回输入字符串从最短到最长的所有前缀的列表\n    "}
{ "task_id": "HumanEval/15", "keyWords": " 返回一个字符串，其中包含空格分隔的数字，从0到n(含)。\n    "}
{ "task_id": "HumanEval/16", "keyWords": " 给定一个字符串，找出它由多少个不同的字符(不管大小写)组成\n    "}
{ "task_id": "HumanEval/17", "keyWords": " 这个函数的输入是一个字符串，以特殊的ASCII格式表示音符。您的任务是解析这个字符串并返回一个整数列表，该列表对应于每个节拍的次数，而不是总持续节拍数。\n\n    这里有一个文字说明:\n    'o' - 全音，持续四拍\n    'o|' - 半音，持续两拍\n    '.|' - 四分音符，持续一拍\n\n    "}
{ "task_id": "HumanEval/18", "keyWords": " 找出给定的子字符串在原始字符串中可以找到多少次。计算重叠的情况。\n    "}
{ "task_id": "HumanEval/19", "keyWords": " 输入是一个空格分隔的数字字符串，从'one'到'nine'。有效的选项是'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'。\n返回按数字从小到大排序的字符串\n    "}
{ "task_id": "HumanEval/20", "keyWords": " 从提供的数字列表(长度至少为2)中选择并返回与彼此接近的两个数字并按顺序返回它们(较小的数字，较大的数字)。\n    "}
{ "task_id": "HumanEval/21", "keyWords": " 给定一个数字列表(至少包含两个元素)，对该列表应用线性变换，最小的数是0，最大的数是1\n    "}
{ "task_id": "HumanEval/22", "keyWords": " 对给定的python值列表进行过滤，只对整数进行过滤\n    "}
{ "task_id": "HumanEval/23", "keyWords": " 返回给定字符串的长度\n    "}
{ "task_id": "HumanEval/24", "keyWords": " 对于给定的数n，求能将n整除的最大的小于n的数\n    "}
{ "task_id": "HumanEval/25", "keyWords": " 返回给定整数的素数因子列表，按从小到大的顺序。每个因子应该被列出与它在分解中出现的次数相对应的次数。输入数应等于所有因子的乘积\n    "}
{ "task_id": "HumanEval/26", "keyWords": " 从整数列表中，删除所有出现不止一次的元素。保持剩余元素的顺序与输入中相同。\n    "}
{ "task_id": "HumanEval/27", "keyWords": " 对于给定的字符串，将小写字符转换为大写字符，并将大写字符转换为小写字符。\n    "}
{ "task_id": "HumanEval/28", "keyWords": " 将字符串列表连接为单个字符串\n    "}
{ "task_id": "HumanEval/29", "keyWords": " 只过滤以给定前缀开头的字符串的输入列表。\n    "}
{ "task_id": "HumanEval/30", "keyWords": "只返回列表中的正数。\n    "}
{ "task_id": "HumanEval/31", "keyWords": "如果给定的数字是素数，则返回true，否则返回false。\n    "}
{ "task_id": "HumanEval/32", "keyWords": "xs是多项式的系数。find_zero找到x使poly(x) = 0。find_zero仅仅返回0点，即使有很多。此外，find_zero只接受具有偶数个系数的列表xs，并且最大的系数非零，因为它保证了有一个解。\n    "}
{ "task_id": "HumanEval/33", "keyWords": "这个函数接受一个列表l并返回一个列表l'，l'在不能被3整除的索引上等于L，而它在能被3整除的索引上的值是l对应的索引上的所有值升序排序后的结果。\n    "}
{ "task_id": "HumanEval/34", "keyWords": "返回列表中唯一元素，并对其排序\n    "}
{ "task_id": "HumanEval/35", "keyWords": "返回列表中最大的元素。\n    "}
{ "task_id": "HumanEval/36", "keyWords": "返回数字7在小于n且能被11或13整除的整数中出现的次数。\n    "}
{ "task_id": "HumanEval/37", "keyWords": "这个函数接受一个列表l并返回一个列表l'，这样\nl'在奇数项上等于l，而它在偶数项上的值为l的偶数索引的值升序排序后的对应值。\n    "}
{ "task_id": "HumanEval/38", "keyWords": "用encode_cyclic函数编码的字符串作为输入字符串。返回已解码的字符串。\n    "}
{ "task_id": "HumanEval/39", "keyWords": "\n    prime_fib返回斐波那契数中的第n个素数。\n    "}
{ "task_id": "HumanEval/40", "keyWords": "\n    triples_sum_to_zero接受一个整数列表作为输入。\n如果列表中有三个不同的元素和为零，则返回true，否则为False。\n\n    "}
{ "task_id": "HumanEval/41", "keyWords": "\n    想象一条完全笔直的无限长的路。N辆车从左向右行驶;同时，另一组n辆车从右向左开。这两组车一开始互相离得很远。所有的车都以同样的速度行驶。当一辆从左向右行驶的车撞上一辆从右向左行驶的车认为两辆车相撞了。然而，汽车是无限的坚固和强大;因此，他们继续移动在他们的轨道上，好像他们没有相撞。\n\n    这个函数输出这种碰撞的次数。\n    "}
{ "task_id": "HumanEval/42", "keyWords": "返回元素加1的列表。\n    "}
{ "task_id": "HumanEval/43", "keyWords": "\n    pairs_sum_to_zero接受一个整数列表作为输入。如果列表中有两个不同的元素和为零，则返回True，否则为False。\n    "}
{ "task_id": "HumanEval/44", "keyWords": "将输入数字x改为以base为基数的表示。转换后返回字符串表示形式。base小于10。\n    "}
{ "task_id": "HumanEval/45", "keyWords": "给定三角形边的长度和高返回面积。\n    "}
{ "task_id": "HumanEval/46", "keyWords": "Fib4数列是一个类似于Fibonacci数列的数列，其定义如下:\nfib4 (0) -> 0\nfib4 (1) -> 0\nfib4 (2) -> 2\nfib4 (3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n请编写一个函数来有效地计算fib4数列的第n个元素。不要使用递归。\n    "}
{ "task_id": "HumanEval/47", "keyWords": "返回列表l中元素的中位数。\n    "}
{ "task_id": "HumanEval/48", "keyWords": "\n    检查给定字符串是否为回文\n    "}
{ "task_id": "HumanEval/49", "keyWords": "返回2^n模p(注意数字)。\n    "}
{ "task_id": "HumanEval/50", "keyWords": "\n    返回通过将字母表中的每个字符移动5编码的字符串。\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    用encode_shift函数编码的字符串作为输入。返回已解码的字符串。\n    "}
{ "task_id": "HumanEval/51", "keyWords": "\n    remove_vowels是一个接受字符串并返回不带元音的字符串的函数。\n    "}
{ "task_id": "HumanEval/52", "keyWords": "如果列表l中的所有数字都低于阈值t，则返回True。\n    "}
{ "task_id": "HumanEval/53", "keyWords": "两个数x和y相加\n    "}
{ "task_id": "HumanEval/54", "keyWords": "\n    检查两个单词是否有相同的字符。\n    "}
{ "task_id": "HumanEval/55", "keyWords": "返回第n个斐波那契数。\n    "}
{ "task_id": "HumanEval/56", "keyWords": " 括号是由\"<\"和\">\"组成的字符串。如果每个左括号都有对应的右括号，则返回True。\n\n    "}
{ "task_id": "HumanEval/57", "keyWords": "如果列表元素单调递增或递减，则返回True。\n    "}
{ "task_id": "HumanEval/58", "keyWords": "返回两个列表中已排序的唯一公共元素。\n    "}
{ "task_id": "HumanEval/59", "keyWords": "返回n的最大素数因子。假设n > 1且不是素数。\n    "}
{ "task_id": "HumanEval/60", "keyWords": "sum_to_n是一个从1到n求和的函数。\n    "}
{ "task_id": "HumanEval/61", "keyWords": " 括号是由“(”和“)”组成的字符串。如果每个左括号都有对应的右括号，则返回True。\n\n    "}
{ "task_id": "HumanEval/62", "keyWords": " xs表示多项式的系数。xs[0] + xs[1] * x + xs[2] * x^2 + ....以同样的形式返回这个多项式的导数。\n    "}
{ "task_id": "HumanEval/63", "keyWords": "fibfib数列是一个类似于fibonacci数列的数列，         其定义如下:\n    fibfib (0) == 0\n    fib(1) == 0\n    fib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) +        fibfib(n-3).\n    请写一个函数来有效地计算fibfib数列的第n个元素。\n    "}
{ "task_id": "HumanEval/64", "keyWords": "\n添加更多的测试用例。\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"编写一个函数vowels_count，它接受一个字符串表示，将一个单词作为输入，并返回字符串中元音的个数。\n在这种情况下，元音是“a”，“e”，“i”，“o”，“u”。这里，“y”也是一个元音，但仅当它在给定单词的末尾时。\n    "}
{ "task_id": "HumanEval/65", "keyWords": "对整数x的数字进行循环移位，向右移位并将结果作为字符串返回。如果shift > 位数，则返回反转的位数。\n    "}
{ "task_id": "HumanEval/66", "keyWords": "任务\n       编写一个函数，接受一个字符串作为输入，并只返回大字符的ASCII码和。\n\n    "}
{ "task_id": "HumanEval/67", "keyWords": "\n    在这个任务中，你将得到一个代表苹果和橘子数量的字符串，它们分布在一篮子水果里，这一篮水果包含苹果、橘子和芒果。给定表示橘子和苹果总数的字符串和一个代表水果总数的整数，在篮子中返回篮子中芒果的数量。\n    "}
{ "task_id": "HumanEval/68", "keyWords": "\n    \"给定一个数组，表示树的一个分支，该分支具有非负整数个节点，你的任务是摘下其中一个节点并将其返回。所摘的节点应是最小的偶数值节点。如果找到具有相同最小偶数值的多个节点，则返回索引最小的节点。所摘的节点应该以列表的形式返回，[最小偶数值, 它的索引]，\n    如果没有偶数值或给定数组为空，则返回[]。\n    "}
{ "task_id": "HumanEval/69", "keyWords": "\n    给你一个非空的正整数列表。返回大于零的最大整数\n，并且频率大于或等于整数本身的值。整数出现的频率是它在列表中出现的次数。如果不存在，则返回-1。\n    "}
{ "task_id": "HumanEval/70", "keyWords": "\n    给定一个整数列表，以奇怪的顺序返回列表。奇怪排序，就是从最小值开始，然后是剩余整数的最大值，然后是最小值，以此类推。\n\n    "}
{ "task_id": "HumanEval/71", "keyWords": "\n    给定三角形三条边的长度。返回的面积，如果三条边构成一个有效三角形，则四舍五入到小数点后两位，否则返回-1。\n当任意两条边之和大于第三边时，三条边构成一个有效三角形。\n    "}
{ "task_id": "HumanEval/72", "keyWords": "\n   编写一个函数，如果对象q将飞行，则返回True，否则返回False。如果物体q是平衡的(它是一个回文列表)，并且它的元素的总和小于或等于最大可能的重量w，那么它就会飞行。\n\n    "}
{ "task_id": "HumanEval/73", "keyWords": "\n    给定一个由整数组成的数组arr，求出使它成为回文数组的最小更改次数。回文数组是一个数组前后读起来是一样的。在一次更改中，您可以将一个元素更改为任何其他元素。\n\n    "}
{ "task_id": "HumanEval/74", "keyWords": "\n    编写一个函数，接受两个字符串列表，并返回其中一个列表，该列表的所有字符串的字符总数中小于另一个列表所有字符串的字符总数。\n    如果两个列表所有字符串的字符数相同，则返回第一个列表。\n    "}
{ "task_id": "HumanEval/75", "keyWords": "写一个函数，当给定的数是3个素数的乘积时返回true\n否则返回false。已知a小于100。\n    "}
{ "task_id": "HumanEval/76", "keyWords": "你的任务是写一个函数，如果一个数字x是一个\nn的简单幂则返回true，在其他情况下为假。\n    如果n**int= x，则x是n的简单幂\n    "}
{ "task_id": "HumanEval/77", "keyWords": "\n    编写一个接受整数a作为输入的函数，如果这个整数是某个整数的立方，则返回True\n    注意:您可以假设输入总是有效的。\n    "}
{ "task_id": "HumanEval/78", "keyWords": "你被要求编写一个函数来接收十六进制数作为字符串，统计输入的十六进制数字中素数（素数是指大于1且不是两个较小自然数的乘积的自然数）的个数\n    十六进制数字为0、1、2、3、4、5、6、7、8、9、A、B、C、D、E、F。\n    素数是2、3、5、7、11、13、17、…\n  所以你必须确定数字为一下数中的一个:2,3,5,7，B(=十进制11)，D(=十进制13)。\n    注意:你可以假设输入总是正确的或空字符串，符号A、B、C、D、E、F总是大写的。\n    "}
{ "task_id": "HumanEval/79", "keyWords": "你会得到一个十进制的数字，你的任务是把它转换成\n二进制格式。该函数应该返回一个字符串，每个字符表示一个二进制号码。字符串中的每个字符将为'0'或'1'。\n\n    在字符串的开头和结尾会有一对额外的字符'db'。\n额外的字符是用来帮助调整格式的。\n    "}
{ "task_id": "HumanEval/80", "keyWords": "给你一个字符串s。你的任务是检查字符串是否happy。如果字符串的长度至少为3，并且每3个连续的字母是不同的，那么这个字符串就是happy的\n    "}
{ "task_id": "HumanEval/81", "keyWords": "这是本学期的最后一周，老师要给学生打分。老师一直在制定自己的评分算法。唯一的问题是，她弄丢了她用来评分的代码。她给了你一些学生的GPA列表，你要写一个可以使用下表输出字母等级列表的函数:\n             GPA       |      字母等级\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    "}
{ "task_id": "HumanEval/82", "keyWords": "编写一个函数，接收一个字符串，如果该字符串的长度为素数则返回True，否则返回False\n    "}
{ "task_id": "HumanEval/83", "keyWords": "\n    给定一个正整数n，返回n位正整数中\n以1开始或以1结束的数量。\n    "}
{ "task_id": "HumanEval/84", "keyWords": "给定一个正整数N，返回各位数之和的二进制表示。\n    "}
{ "task_id": "HumanEval/85", "keyWords": "给定一个非空的整数列表。将索引为奇数的偶数元素相加…\n\n\n    "}
{ "task_id": "HumanEval/86", "keyWords": "\n    编写一个函数，接受一个字符串并返回它的有序版本。\n字符串的有序版本，是一个字符串，其中所有单词(用空格分隔)都被用由其所有的字符按ASCII值的升序排列的单词代替。\n注意:你应该保持句子中单词和空格的顺序。\n\n    "}
{ "task_id": "HumanEval/87", "keyWords": "\n    你有一个二维的数据，一个嵌套的列表，它和矩阵很相似，但不像矩阵，每行可以包含不同数量的列。给定list和整数x，在列表中找到整数x，返回元组列表，[(x1, y1)， (x2, y2)…]，其中的每个元组是一个坐标-(行，列)，从0开始。\n    最初按行升序对坐标进行排序。\n    此外，按列降序对行坐标进行排序。\n    \n    "}
{ "task_id": "HumanEval/88", "keyWords": "\n    给定一个非负整数数组，返回给定数组排序后的副本;如果(第一个索引值，最后一个索引值)和为奇数，则按升序对给定数组进行排序;如果(第一个索引值，最后一个索引值)和是偶数，则按降序对给定数组排序。\n\n    注意:\n    *不改变给定的数组。\n\n    "}
{ "task_id": "HumanEval/89", "keyWords": "创建一个函数encrypt，该函数以字符串作为参数，\n通过旋转字母表，返回一个经过加密的字符串。字母表应该以某种方式旋转，使得这些字母向下平移2*2个位置。\n    "}
{ "task_id": "HumanEval/90", "keyWords": "\n    给你一个整数列表。编写一个函数next_smallest()，返回列表中第二小的元素。\n    如果没有这样的元素，则返回None。\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    "}
{ "task_id": "HumanEval/91", "keyWords": "\n    给你一串单词，你的任务是数无聊的个数。无聊是一个以“I”开头的句子。句子用'.', '?'或者'!'分隔。"}
{ "task_id": "HumanEval/92", "keyWords": "\n    创建一个接受3个数字的函数。如果其中一个数字等于其他两个数字的和，并且所有数字都是整数，则返回true。在任何其他情况下返回false。\n    \n    "}
{ "task_id": "HumanEval/93", "keyWords": "\n    编写一个接受message的函数，并以这样的方式编码它，交换了所有字母的大小写，替换了message中出现的所有元音字母，用字母在英文字母表中的对应位置前两位的字母替换\n    假设只有字母。\n   \n    "}
{ "task_id": "HumanEval/94", "keyWords": "给你一个整数列表。您需要找到最大的素数，并返回其位数的和。\n\n    "}
{ "task_id": "HumanEval/95", "keyWords": "\n    给定一个字典，如果所有键都是小写字符串，则返回True，所有键都是大写字符串，否则返回False。如果给定的字典为空，该函数应该返回False。\n    "}
{ "task_id": "HumanEval/96", "keyWords": "实现一个函数，该函数接受一个非负整数并返回小于n的素数整数列表。\n    "}
{ "task_id": "HumanEval/97", "keyWords": "完成一个函数，接受两个整数作为参数，返回它们的个位数的乘积。假设输入总是有效的。\n    "}
{ "task_id": "HumanEval/98", "keyWords": "\n    给定字符串s，统计偶数下标中大写元音的个数。\n    \n    "}
{ "task_id": "HumanEval/99", "keyWords": "\n    创建一个函数，接受一个表示数字的值(字符串)并返回最接近它的整数。如果这个数和两个整数等距，则从0取整。\n\n    例子\n    "}
{ "task_id": "HumanEval/100", "keyWords": "\n    给定一个正整数n，你需要做一堆n层的石头。第一层有n颗石头。下一关的石头数量是:\n-如果n是奇数，则为下一个奇数。\n-如果n是偶数，则为下一个偶数。\n返回列表中每个级别的石头数量，其中位于index位置的元素i代表关卡(i +1)中石头的数量。\n    "}
{ "task_id": "HumanEval/101", "keyWords": "\n    你会得到一串用逗号或空格分隔的单词。你的任务是\n将字符串拆分为单词并返回单词数组。\n    \n    "}
{ "task_id": "HumanEval/102", "keyWords": "这个函数接受两个正数x和y并返回在[x, y]范围内最大的偶数。如果如果没有这样的数字，那么函数应该返回-1。\n\n    "}
{ "task_id": "HumanEval/103", "keyWords": "给你两个正整数n和m，你的任务是计算从n到m的整数(包括n和m)的平均值。将答案四舍五入到最接近的整数，并将其转换为二进制。如果n大于m，返回-1。\n    "}
{ "task_id": "HumanEval/104", "keyWords": "给定一个正整数列表x，返回没有偶数的所有元素的有序列表。\n\n    注意: 返回的列表应按递增顺序排序。\n    "}
{ "task_id": "HumanEval/105", "keyWords": "\n   给定一个整数数组，对1到9之间的整数进行排序，将结果数组反转，然后将每个数字替换为对应的名称\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"。\n    "}
{ "task_id": "HumanEval/106", "keyWords": " 实现以n为参数的函数f，返回一个大小为n的列表，使得索引为i的元素的值，如i是偶数，则为是i的阶乘，否则是从1到i的数的和。i从1开始。\n    i的阶乘是1到i的数的乘法(1 * 2 * … *i)。\n    "}
{ "task_id": "HumanEval/107", "keyWords": "\n    给定一个正整数n，返回一个元组，记录在(1,n)范围内，包含回文的偶数和奇数的数量，范围包含边界。\n\n    "}
{ "task_id": "HumanEval/108", "keyWords": "\n    写一个count_nums函数，它接受一个整数数组并返回\n各位数之和大于0的元素个数。\n    如果一个数字是负数，那么它的第一个有符号数字将是负数:\n    例如-123带符号的数字是-1、2和3。\n    "}
{ "task_id": "HumanEval/109", "keyWords": "我们有一个包含N个整数arr[1], arr[2], ..., arr[N]的数组arr。数组中的数字将随机排序。你的任务是确定是否可以将数组按非递减顺序排序，对给定数组执行以下操作:\n您可以执行任何次数的右移操作。\n\n    一个右移操作意味着将数组的所有元素移动向右移动一个位置。数组的最后一个元素将被移动到数组的起始位置，即第0个索引。\n\n    如果可以通过执行上述操作获得排序数组然后返回True，否则返回False。如果给定数组为空，则返回True。\n\n    注意:给定的列表保证具有唯一的元素。\n\n    "}
{ "task_id": "HumanEval/110", "keyWords": "在这个问题中，你将实现一个函数，它接受两个数字列表，并确定是否有可能进行元素交换\n使lst1成为一个只有偶数的列表。在lst1和lst2之间交换的元素数量没有限制。如果可以通过在lst1和lst2之间交换元素，使得lst1中的所有元素都是偶数，则返回\"YES\"。否则，返回“NO”。\n    "}
{ "task_id": "HumanEval/111", "keyWords": "给定一个空格分隔的小写字母的字符串，返回一个字典，由重复次数最多的字母及其相应的出现次数。\n如果几个字母有相同的出现，则返回全部字母及其出现次数。\n    \n    "}
{ "task_id": "HumanEval/112", "keyWords": "“任务：我们有两个字符串s和c，你必须删除s中所有等于c中任意字符的字符\n然后检查结果字符串是否为回文。如果一个字符串的前后读法相同，则称为回文。\n您应该返回一个包含结果字符串和True/False检查的元组。\n    "}
{ "task_id": "HumanEval/113", "keyWords": "给定一个字符串列表，其中每个字符串仅由数字组成，返回一个列表。输出结果中的每个元素i应该为\"the number of odd elements in the string i of the input.\"，其中所有的i都应该被替换为输入的第i个字符串中的奇数数字的个数。\n\n    "}
{ "task_id": "HumanEval/114", "keyWords": "\n    给定一个整数数组nums，求任意非空子数组的最小和。\n    "}
{ "task_id": "HumanEval/115", "keyWords": "\n    给你一个矩形的井网格grid。每一行代表一个井，一行中的每个1代表一个单位的水。每口井都有一个相应的水桶，可以用来从中取水，所有桶的容量capacity都是一样的。你的任务是用桶把井里的水倒空。输出需要下降桶的次数。\n\n    "}
{ "task_id": "HumanEval/116", "keyWords": "\n    在这个卡塔中，你必须对一个非负整数数组进行排序，根据这些数二进制表示中的1的个数进行升序排列。\n对于类似数量的1，基于十进制值排序。\n\n    它必须这样执行：\n    "}
{ "task_id": "HumanEval/117", "keyWords": "给定一个字符串s和一个自然数n，你的任务是实现一个函数，它返回字符串s中包含n个辅音的所有单词的列表，按照这些单词出现在字符串s中的顺序。如果字符串s为空，则该函数应返回一个空列表。\n    注意:您可以假设输入字符串只包含字母和空格。\n    "}
{ "task_id": "HumanEval/118", "keyWords": "给你一个词。你的任务是找到中间最接近单词右侧且在两个辅音中间的元音。开头和结尾的元音不算数。如果没有找出任何满足上述条件的元音，则返回空字符串\n    您可以假设给定的字符串只包含英文字母。\n\n    "}
{ "task_id": "HumanEval/119", "keyWords": "\n   给定一个包含两个字符串的列表，两个字符串都只包含开括号'('或闭括号')'。您的工作是检查是否有可能将两个字符串通过某种顺序连接，使得结果字符串是好的。字符串S被认为是好的，当且仅当S中的所有括号是平衡的。"}
{ "task_id": "HumanEval/120", "keyWords": "\n    给定一个整数数组arr和一个正整数k，返回一个排序列表，长度为k，包含arr中最大的k个数字。\n\n    "}
{ "task_id": "HumanEval/121", "keyWords": "给定一个非空的整数列表，返回位于偶数位置的所有奇数元素的和。\n\n    "}
{ "task_id": "HumanEval/122", "keyWords": "\n    给定一个包含整数的非空数组arr和整数k，返回arr的前k个元素中最多有两位数字的元素之和。\n    "}
{ "task_id": "HumanEval/123", "keyWords": "\n    给定一个正整数n，返回一个排序列表，其中奇数按collatz序列排列。Collatz猜想是数学中的一个关于序列的猜想，定义如下：从任意正整数n开始，则每一项由前一项如下获得:如果前一项是偶数，下一项是上一项的一半。如果前一项是奇数，下一项是前一项的3倍 + 1。这个猜想无论n的值是多少，序列总是等于1。\n\n    注意: \n        1. Collatz(1) is [1].\n        2. 返回按递增顺序排序的列表.\n\n    "}
{ "task_id": "HumanEval/124", "keyWords": "您必须编写一个函数来验证给定的日期字符串，如果日期有效则返回True，否则返回False。符合下列条件的，日期有效:\n1. 日期字符串不是空的。\n2. 对于第1、3、5、7、8、10、12个月，天数不小于1天或大于31天。4、6、9、11个月的天数不小于1天或大于30天。并且，第2个月的天数不小于1或大于29。\n3. 月份不能小于1或大于12。\n4. 日期格式为:mm-dd-yyyy\n\n    "}
{ "task_id": "HumanEval/125", "keyWords": "\n    给定一个单词字符串，返回一个按空格分割的单词列表，如果输入的文本中不存在空格，则应该以逗号分隔，如果不存在逗号，则应该返回字符串中在字母表中位置处于奇数的小写字母的个数，ord('a') = 0, ord('b') = 1，…Ord ('z') = 25\n    "}
{ "task_id": "HumanEval/126", "keyWords": "\n    给定一个数字列表，返回它们是否排序按升序排列。如果列表中有多于一个副本的相同数字，返回False。假设没有负数，只有整数。\n\n    "}
{ "task_id": "HumanEval/127", "keyWords": "给你两个时间间隔，其中每个区间是一对整数。"}
{ "task_id": "HumanEval/128", "keyWords": "\n    给你一个整数数组arr，返回所有整数的大小之和乘以所有整数符号的乘积，以1、-1或0表示的每个数字的符号。备注:对于空arr返回None。\n\n    例子:\n    "}
{ "task_id": "HumanEval/129", "keyWords": "\n    给定一个N行N列(N >= 2)的grid和一个正整数k，网格的每个单元格都包含一个值。在网格的单元格上的整数只出现一次，且在[1, N * N]范围内。\n    你必须在网格中找到长度为k的最小路径。你可以开始\n从任何单元格开始，每一步你都可以移动到任何相邻的单元格，换句话说，你可以找到和你当前位置共用一条边的单元格\n。\n    请注意，长度为k的路径意味着恰好访问k个单元格(而不是一定是不同的)。你不能脱离网络。路径A(长度为k)被认为小于路径B(长度为k)，如果在对单元格A和B的值进行排序后\n通过(我们称它们为lst_A和lst_B)， lst_A在字典顺序上更少\nlst_B，换句话说，存在一个整数索引i (1 <= i <= k)\n使得lst_A[i] < lst_B[i]且对于任意j (1 <= j < i\nlst_A[j] = lst_B[j]。可以保证答案是唯一的。返回最小路径经过的单元格上的值的有序列表。\n\n    "}
{ "task_id": "HumanEval/130", "keyWords": "每个人都知道斐波那契数列，在过去的几个世纪里，它被数学家深入研究。然而，人们不知道的是特里波那契数列。\n    特里波那契数列由递归式定义:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    例如 :\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    给你一个非负整数n，你必须返回一个列表，包含Tribonacci数列的前n + 1个数。\n    "}
{ "task_id": "HumanEval/131", "keyWords": "给定一个正整数n，返回位数数字为奇数的所有数的乘积。如果所有位数数字都是偶数，则返回0。\n    "}
{ "task_id": "HumanEval/132", "keyWords": "\n    创建一个函数，接受一个只包含方括号的字符串作为输入。当且仅当存在有效的括号子序列时，该函数应返回True，\n其中子序列中至少有一个括号嵌套。\n    "}
{ "task_id": "HumanEval/133", "keyWords": "给你一个数字列表。首先将列表中的每个元素四舍五入上取整，返回给定列表中数字的平方和。\n    "}
{ "task_id": "HumanEval/134", "keyWords": "\n    创建一个函数，如果最后一个字符的值为字母字符而且不是单词的一部分，返回True，其余返回False。注意:“word”是由空格分隔的一组字符。\n    "}
{ "task_id": "HumanEval/135", "keyWords": "创建一个函数，返回元素不大于或等于紧接在它前面的元素的最大索引。如果不存在这样的元素，则返回-1。给定的数组不包含重复的值。\n\n    "}
{ "task_id": "HumanEval/136", "keyWords": "\n    创建一个返回元组(a, b)的函数，其中'a'为列表中最大的负整数，'b'是最小的列表中的正整数。如果没有正整数或负整数，则返回None。\n    "}
{ "task_id": "HumanEval/137", "keyWords": "\n    创建一个接受整数、浮点数或字符串表示实数的函数，并返回给定变量类型中较大的变量。如果值相等，则返回None。\n    注意: 如果实数被表示为字符串，则浮点数可能是.或者,\n    "}
{ "task_id": "HumanEval/138", "keyWords": "求给定的数n是否可以写成正好4个正偶数的和\n    "}
{ "task_id": "HumanEval/139", "keyWords": "Brazilian阶乘定义为:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    当 n > 0\n\n , 该函数将接收一个整数作为输入，并返回这个整数的Brazilian阶乘   "}
{ "task_id": "HumanEval/140", "keyWords": "\n    给定一个字符串文本，将其中的所有空格替换为下划线，\n如果一个字符串有超过两个连续的空格，然后将所有连续的空格替换为-\n"}
{ "task_id": "HumanEval/141", "keyWords": "创建一个函数，它接受一个代表文件名的字符串，如果文件名有效，则返回'Yes'，否则返回'No'。当且仅当满足以下所有条件时，文件名才被认为是有效的\n满足:\n-文件名不能超过三位数字('0'-'9')。\n-文件名只包含一个点'.'\n-点前的子字符串不能为空，且以一个拉丁字母('a'-'z' and 'A'-'Z')开头。\n-点后面的子字符串应该是这些之一:['txt', 'exe', 'dll']"}
{ "task_id": "HumanEval/142", "keyWords": "\"\n    这个函数将接受一个整数列表。对于列表中的所有项，如果其索引为3的倍数，则函数应对该整数项进行平方，如果其索引是4的倍数而不是3的倍数，则将该整数项立方。函数不会更改列表中索引不是3或4的倍数的项。然后，该函数将返回所有整数的和。\n    \n    "}
{ "task_id": "HumanEval/143", "keyWords": "\n    给你一个代表一个句子的字符串，这个句子包含一些用空格隔开的单词，你必须返回一个包含原始句子中长度是质数的单词的字符串，新字符串中的单词顺序应与原字符串相同。\n\n    "}
{ "task_id": "HumanEval/144", "keyWords": "您的任务是实现一个简化表达式的函数x * n。如果x * n的计算结果为整数，则函数返回True，否则返回False。x和n都是分数的字符串表示形式，格式如下:<分子>/<分母>，其中分子和分母都是正整数。你可以假设x和n是有效分数，分母不为0。\n    "}
{ "task_id": "HumanEval/145", "keyWords": "\n    编写一个函数对给定的整数列表进行排序，按位数和的升序排列。注:如果有几个项的位数和相同，根据它们在原始列表中的索引对它们排序。    "}
{ "task_id": "HumanEval/146", "keyWords": "编写一个函数，以一组数字作为输入，并返回数组中大于10且第一位和最后一位是奇数(1、3、5、7、9)的元素的数量。\n    "}
{ "task_id": "HumanEval/147", "keyWords": "\n    给定一个正整数n，你必须创建一个长度为n的整数数组a。对于每一个i(1≤i≤n)， a[i]的值= i * i - i + 1。返回i < j < k并且a[i] + a[j] + a[k]是3的倍数的三元组(a[i]， a[j]， a[k])的个数。\n    "}
{ "task_id": "HumanEval/148", "keyWords": "\n    我们的太阳系有八颗行星:离太阳最近的一颗是水星，下一个是金星，然后是地球、火星、木星、土星、天王星、海王星。编写一个函数，将两个行星的名称作为字符串planet1和planet2。该函数应该返回一个元组，其中包含轨道为位于行星1的轨道和行星2的轨道之间的所有行星，按靠近太阳顺序。如果planet1或planet2不是正确的行星名称，函数应该返回一个空元组。\n    "}
{ "task_id": "HumanEval/149", "keyWords": "编写一个接受字符串列表作为参数的函数，删除其中奇数长度的字符串，并返回按照一定顺序排列的结果列表，列表总是字符串列表，而不是数字数组，它可能包含重复的字符串。列表的顺序应该按每个单词的长度升序排列，而你应该返回按该规则排序的列表。如果两个单词的长度相同，则按字母顺序排序。\n这个函数应该返回一个有序的字符串列表。你可以假设所有的单词都有相同的长度。\n    "}
{ "task_id": "HumanEval/150", "keyWords": "一个简单的程序，如果n是质数，它应该返回x的值\n，否则应该返回y的值。\n\n    "}
{ "task_id": "HumanEval/151", "keyWords": "\n    给定一个数字列表，返回列表中奇数数字的平方和。忽略负数或非整数。   \n    如果输入列表为空, 返回0.\n    "}
{ "task_id": "HumanEval/152", "keyWords": "我想我们都记得那种有些期待已久的事件终于知道了结果时的感觉。你在那一刻的感觉和想法绝对值得记下来并比较。\n    你的任务是确定一个人是否正确地猜出了一些匹配的结果。您将得到两个相等长度的分数和猜测数组，其中每个索引显示一个匹配。返回相同长度的数组，表示每次猜测的距离。如果他们猜对了，该值为0，如果不是，则该值为猜测值与得分之间的绝对差值。\n    \n    \n    "}
{ "task_id": "HumanEval/153", "keyWords": "你会得到一个类的名字(一个字符串)和一个扩展列。扩展将用于将其他类加载到类中。扩展的强度如下:设CAP为扩展名称中大写字母的数量，并设SM为扩展名称中小写字母的数目在中，强度由分数CAP - SM给出。你应该找到最强的扩展并返回一个字符串，格式如下:ClassName.StrongestExtensionName。如果有两个或更多相同强度的扩展，你应该选择列表中最前面的那个。"}
{ "task_id": "HumanEval/154", "keyWords": "给你两个单词。如果第二个单词或它的任何旋转是第一个单词的子字符串，则需要返回True\n     "}
{ "task_id": "HumanEval/155", "keyWords": "给定一个整数。返回一个分别包含偶数和奇数位数数量的元组。\n\n     "}
{ "task_id": "HumanEval/156", "keyWords": "\n    给定一个正整数，获得其等效的罗马数字字符串;并以小写形式返回。\n    约束: 1 <= num <= 1000\n\n    例子:\n    "}
{ "task_id": "HumanEval/157", "keyWords": "\n    给定三角形三条边的长度。如果为3边构成直角三角形，则返回True，否则为False。直角三角形是其中一个角是直角或为90度。\n    "}
{ "task_id": "HumanEval/158", "keyWords": "编写一个接受字符串列表的函数。这个列表包含不同的单词。返回具有最多唯一字符的单词。如果多个字符串都有最多的唯一字符，返回字典顺序中最先出现的字符串。\n    "}
{ "task_id": "HumanEval/159", "keyWords": "\n   你是一只饥饿的兔子，你已经吃了一定数量的胡萝卜，但是现在你需要吃更多的胡萝卜来完成一天的三餐。您应该返回一个数组[饭后吃的胡萝卜总数, 饭后剩下的胡萝卜的数量]，如果剩下的胡萝卜不够，你会吃掉所有剩下的胡萝卜，但仍然会饿。\n    \n    "}
{ "task_id": "HumanEval/160", "keyWords": "\n   给定两个列表，操作符和操作数。第一个列表具有基本的代数运算，和第二个列表是一个整数列表。使用两个给定的列表来构建代数表达式，并返回该表达式的求值。\n\n    基本代数运算:\n    加法(+)\n    减法(-)\n    乘法(*)\n    整除(//)\n    求幂(**)\n\n    "}
{ "task_id": "HumanEval/161", "keyWords": "给你一个字符串s。如果s[i]是一个字母，将字母的大小写颠倒。否则就保持原样。如果字符串不包含字母，则反转字符串。函数应该返回结果字符串。\n    "}
{ "task_id": "HumanEval/162", "keyWords": "\n    给定字符串'text'，返回其md5哈希等价字符串。如果'text'是空字符串，则返回None。\n\n    "}
{ "task_id": "HumanEval/163", "keyWords": "\n    给定两个正整数a和b，返回a和b之间的偶数，按升序排列。\n\n    "}