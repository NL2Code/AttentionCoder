{"task_id": "HumanEval/0", "keyWords": "Compruebe si hay dos n\u00fameros en la lista de n\u00fameros dada que est\u00e1n menos alejados uno del otro que el umbral dado.\n"}
{"task_id": "HumanEval/1", "keyWords": "La entrada de esta funci\u00f3n es una cadena que contiene m\u00faltiples conjuntos de corchetes anidados. Su objetivo es separar estos grupos en cadenas individuales y devolver una lista de estas cadenas. Los grupos individuales se equilibran (cada par\u00e9ntesis abierto se cierra adecuadamente) y se ignoran sin anidar entre s\u00ed\nIntroduzca cualquier espacio en la cadena.\n"}
{"task_id": "HumanEval/2", "keyWords": "Dado un n\u00famero flotante positivo, se puede factorizar en partes y enteros (el n\u00famero entero m\u00e1ximo es menor que el n\u00famero dado) y decimales (el resto es siempre menor que 1).\n\nDevuelve la parte decimal del n\u00famero.\n"}
{"task_id": "HumanEval/3", "keyWords": "Obtendr\u00e1 una lista de las operaciones de dep\u00f3sito y retiro para las cuentas bancarias con un saldo inicial de 0. Su tarea es detectar si el saldo de la cuenta est\u00e1 por debajo de cero en cualquier momento, y en ese punto la funci\u00f3n debe devolver True. De lo contrario, debe devolver False.\n"}
{"task_id": "HumanEval/4", "keyWords": "Para una lista dada de n\u00fameros de entrada, la desviaci\u00f3n absoluta media se calcula cerca de la media de este conjunto de datos. La desviaci\u00f3n absoluta media es la diferencia absoluta media para cada elemento y punto central (en este caso la media) :\nMAD = average | x - x_mean |\n"}
{"task_id": "HumanEval/5", "keyWords": "Inserte un n\u00famero \"delimeter\" entre cada dos elementos consecutivos de la lista de entrada \"numbers\".\n"}
{"task_id": "HumanEval/6", "keyWords": "La entrada de esta funci\u00f3n es una cadena que representa varios grupos de par\u00e9ntesis anidados separados por espacios. Para cada grupo, los par\u00e9ntesis de salida est\u00e1n anidados en la parte m\u00e1s profunda.\nPor ejemplo, (()()) tiene como m\u00e1ximo dos capas anidadas, mientras que ((())) tiene tres.\n\n"}
{"task_id": "HumanEval/7", "keyWords": "Filtrar s\u00f3lo la lista de entradas de las cadenas que contienen la cadena de estator\n"}
{"task_id": "HumanEval/8", "keyWords": "Para una lista de enteros dada, devuelve una tupla que consiste en la suma y el producto de todos los enteros de la lista. La suma de la lista vac\u00eda debe ser igual a 0 y el producto de la lista vac\u00eda debe ser igual a 1.\n"}
{"task_id": "HumanEval/9", "keyWords": "A partir de una lista dada de enteros, se genera una lista secuencial de elementos que crecen hasta la longitud m\u00e1xima de la lista dada.\n"}
{"task_id": "HumanEval/10", "keyWords": " busca el palindroma m\u00e1s corto que comienza con la cadena provista.\nLa idea del algoritmo es simple:\n- buscar el sufijo palindr\u00f3mico m\u00e1s largo en la cadena provista.\n- a\u00f1adir al final de una cadena el prefijo opuesto a la cadena anterior al sufijo palindr\u00ednico.\n"}
{"task_id": "HumanEval/11", "keyWords": "Las entradas son dos cadenas a y b, solo 1 y 0. El xor binario se ejecuta en estas entradas y devuelve el resultado como una cadena.\n"}
{"task_id": "HumanEval/12", "keyWords": "En la lista de cadenas, se devuelve la cadena m\u00e1s larga. Si hay m\u00e1s de una cadena, se devuelve la primera cadena de la misma longitud. Devuelve ninguno si la lista de entrada est\u00e1 vac\u00eda.\n"}
{"task_id": "HumanEval/13", "keyWords": "Devuelve el mayor divisor com\u00fan de dos enteros a y b\n"}
{"task_id": "HumanEval/14", "keyWords": "Devuelve una lista de todos los prefijos de la cadena de entrada, desde el m\u00e1s corto hasta el m\u00e1s largo\n"}
{"task_id": "HumanEval/15", "keyWords": "Devuelve una cadena que contiene n\u00fameros separados por espacios, de 0 a n(inclusive).\n"}
{"task_id": "HumanEval/16", "keyWords": "Dada una cadena, averigua cu\u00e1ntos caracteres diferentes (independientemente de la may\u00fascula y min\u00fascula) est\u00e1 compuesta\n"}
{"task_id": "HumanEval/17", "keyWords": "La entrada de esta funci\u00f3n es una cadena que representa las notas en un formato ASCII especial. En este caso, el n\u00famero de pulsaciones es igual al n\u00famero total de pulsaciones continuas.\n\nAqu\u00ed hay un texto explicativo:\n'o' - tono completo, dura cuatro tiempos\n| 'o' - BanYin, mitad continua\n'/' - semicorchea, una raqueta\n\n"}
{"task_id": "HumanEval/18", "keyWords": "Encuentre cu\u00e1ntas veces una subcadena dada se puede encontrar en la cadena original. Calcular el caso de superposici\u00f3n.\n"}
{"task_id": "HumanEval/19", "keyWords": "La entrada es una cadena de n\u00fameros separados por espacios, de 'uno' a 'nueve'. Eficaz es la opci\u00f3n 'zero', 'one', 'two, three' ', 'four, five' ', 'de', 'seven', 'los ocho' and 'nine.\nDevuelve cadenas ordenadas de menor a mayor n\u00famero\n"}
{"task_id": "HumanEval/20", "keyWords": "Seleccione y devuelva dos n\u00fameros que est\u00e9n cerca el uno del otro de la lista de n\u00fameros proporcionada (longitud m\u00ednima 2) y los devuelva en orden (n\u00famero m\u00e1s peque\u00f1o, n\u00famero m\u00e1s grande).\n"}
{"task_id": "HumanEval/21", "keyWords": "Dado una lista de n\u00fameros (que contiene al menos dos elementos), se aplica una transformaci\u00f3n lineal a la lista. El n\u00famero m\u00e1s peque\u00f1o es 0 y el n\u00famero m\u00e1s grande es 1.\n"}
{"task_id": "HumanEval/22", "keyWords": "Filtrar una lista dada de valores python, solo para enteros\n"}
{"task_id": "HumanEval/23", "keyWords": "Devuelve la longitud de una cadena dada\n"}
{"task_id": "HumanEval/24", "keyWords": "Para un n\u00famero dado n, encontrar el mayor n\u00famero menor que n que puede dividir n\n"}
{"task_id": "HumanEval/25", "keyWords": "Devuelve una lista de factores primos para un entero dado, en orden de menor a mayor. Cada factor debe enumerarse el n\u00famero de veces que corresponda al n\u00famero de veces que aparece en la factorizaci\u00f3n. El n\u00famero de entrada debe ser igual al producto de todos los factores\n"}
{"task_id": "HumanEval/26", "keyWords": "De la lista de enteros, eliminar todos los elementos que aparecen m\u00e1s de una vez. Mantenga los elementos restantes en el mismo orden que en la entrada.\n"}
{"task_id": "HumanEval/27", "keyWords": "Para una cadena dada, los caracteres en min\u00fasculas se convierten en may\u00fasculas y los caracteres en may\u00fasculas se convierten en min\u00fasculas.\n"}
{"task_id": "HumanEval/28", "keyWords": "Concatenar una lista de cadenas como una sola cadena\n"}
{"task_id": "HumanEval/29", "keyWords": "Filtrar s\u00f3lo la lista de entradas de cadenas que comienzan con un prefijo dado.\n"}
{"task_id": "HumanEval/30", "keyWords": "Devuelve solo los n\u00fameros positivos de la lista.\n"}
{"task_id": "HumanEval/31", "keyWords": "Devuelve true si el n\u00famero dado es primo, false de lo contrario.\n"}
{"task_id": "HumanEval/32", "keyWords": " x es el coeficiente del polinomio. Find_zero encuentra x tal que poly(x) = 0. Find_zero simplemente devuelve 0 puntos, aunque haya muchos. Adem\u00e1s, find_zero solo acepta listas xs con un n\u00famero par de coeficientes, y el mayor coeficiente no es cero, ya que garantiza que hay una soluci\u00f3n.\n"}
{"task_id": "HumanEval/33", "keyWords": "Esta funci\u00f3n toma una lista l y devuelve una lista l', que es igual a l en un \u00edndice que no es divisible por 3, y su valor en un \u00edndice divisible por 3 es el resultado de ordenar todos los valores en el \u00edndice correspondiente de l en orden ascendente.\n"}
{"task_id": "HumanEval/34", "keyWords": "Devuelve un elemento \u00fanico de la lista y lo ordena\n"}
{"task_id": "HumanEval/35", "keyWords": "Devuelve el elemento m\u00e1s grande de la lista.\n"}
{"task_id": "HumanEval/36", "keyWords": "Devuelve el n\u00famero de veces que el n\u00famero 7 aparece en un n\u00famero entero menor que n y divisible por 11 o 13.\n"}
{"task_id": "HumanEval/37", "keyWords": "Esta funci\u00f3n toma una lista l y devuelve una lista l' tal que\nL 'es igual a l en t\u00e9rminos impares, mientras que su valor en t\u00e9rminos pares es el valor correspondiente despu\u00e9s de ordenar el valor del \u00edndice par de l en orden ascendente.\n"}
{"task_id": "HumanEval/38", "keyWords": "\nLa cadena codificada con la funci\u00f3n encode_cyclic como cadena de entrada. Devuelve la cadena decodificada.\n"}
{"task_id": "HumanEval/39", "keyWords": "\nPrime_fib devuelve el n-\u00e9simo primo del n\u00famero de fibonacci.\n"}
{"task_id": "HumanEval/40", "keyWords": "\nTriples_sum_to_zero acepta una lista de enteros como entrada.\nDevuelve true si hay tres elementos diferentes en la lista que suman cero, False de lo contrario.\n\n"}
{"task_id": "HumanEval/41", "keyWords": "\nImagina un camino infinitamente largo que es completamente recto. N coches se mueven de izquierda a derecha; Al mismo tiempo, otro grupo de n coches conduce de derecha a izquierda. Al principio, los dos grupos de coches est\u00e1n muy lejos el uno del otro. Todos los coches viajan a la misma velocidad. Cuando un coche que se mueve de izquierda a derecha golpea a un coche que se mueve de derecha a izquierda piensa que los dos coches han chocado. Sin embargo, el coche es infinitamente fuerte y potente; Por lo tanto, siguen movi\u00e9ndose en sus \u00f3rbitas como si no hubieran chocado.\n\nEsta funci\u00f3n produce el n\u00famero de tales colisiones.\n"}
{"task_id": "HumanEval/42", "keyWords": "Devuelve una lista de elementos m\u00e1s 1.\n"}
{"task_id": "HumanEval/43", "keyWords": "\nPairs_sum_to_zero acepta una lista de enteros como entrada. Devuelve True si hay dos elementos diferentes en la lista que suman cero, False de lo contrario.\n"}
{"task_id": "HumanEval/44", "keyWords": "Cambie el n\u00famero de entrada x a una representaci\u00f3n base. Devuelve una representaci\u00f3n de cadena despu\u00e9s de la conversi\u00f3n. Base inferior a 10.\n"}
{"task_id": "HumanEval/45", "keyWords": "Dado la longitud de los lados del tri\u00e1ngulo y el alto \u00e1rea de retorno.\n"}
{"task_id": "HumanEval/46", "keyWords": "La secuencia Fib4 es una secuencia similar a la secuencia Fibonacci y se define de la siguiente manera:\nfib4 (0) -> 0\nfib4 (1) -> 0\nfib4 (2) -> 2\nfib4 (3) -> 0\nfib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\nPor favor, escriba una funci\u00f3n para calcular eficientemente el en\u00e9simo elemento de la secuencia fib4. No use recursi\u00f3n.\n"}
{"task_id": "HumanEval/47", "keyWords": "Devuelve la mediana de los elementos de la lista l.\n"}
{"task_id": "HumanEval/48", "keyWords": "\nComprobar si una cadena dada es un pal\u00edndromo\n"}
{"task_id": "HumanEval/49", "keyWords": "Devuelve 2^n m\u00f3dulo p(observe los n\u00fameros).\n"}
{"task_id": "HumanEval/50", "keyWords": "\nLa cadena codificada con la funci\u00f3n encode_shift como entrada. Devuelve la cadena decodificada.\n"}
{"task_id": "HumanEval/51", "keyWords": "\nRemove_vowels es una funci\u00f3n que toma cadenas y devuelve cadenas sin vocales.\n"}
{"task_id": "HumanEval/52", "keyWords": "Devuelve True si todos los n\u00fameros en la lista l est\u00e1n por debajo del umbral t.\n"}
{"task_id": "HumanEval/53", "keyWords": "Sumar dos n\u00fameros x e y\n"}
{"task_id": "HumanEval/54", "keyWords": "\nCompruebe si dos palabras tienen el mismo car\u00e1cter.\n"}
{"task_id": "HumanEval/55", "keyWords": "Devuelve el en\u00e9simo n\u00famero de fibonacci.\n"}
{"task_id": "HumanEval/56", "keyWords": "Los par\u00e9ntesis son cadenas formadas por \"<\" y \">\". Devuelve True si cada par\u00e9ntesis de izquierda tiene un par\u00e9ntesis de cierre correspondiente.\n\n"}
{"task_id": "HumanEval/57", "keyWords": "Devuelve True si el elemento de la lista aumenta o disminuye mon\u00f3tonamente.\n"}
{"task_id": "HumanEval/58", "keyWords": "Devuelve el \u00fanico elemento com\u00fan ordenado de ambas listas.\n"}
{"task_id": "HumanEval/59", "keyWords": "Devuelve el mayor factor primo de n. Supongamos que n > 1 y no es primo.\n"}
{"task_id": "HumanEval/60", "keyWords": "Sum_to_n es una funci\u00f3n que suma de 1 a n.\n"}
{"task_id": "HumanEval/61", "keyWords": "Los par\u00e9ntesis son cadenas formadas por \"(\" y\") \". Devuelve True si cada par\u00e9ntesis de izquierda tiene un par\u00e9ntesis de cierre correspondiente.\n\n"}
{"task_id": "HumanEval/62", "keyWords": "Xs representa los coeficientes del polinomio. xs[0] + xs[1] * x + xs[2] * x^2 + .... Devuelve la derivada de este polinomio de la misma forma.\n"}
{"task_id": "HumanEval/63", "keyWords": "La secuencia fibfib es una secuencia similar a la secuencia fibonacci. Se define de la siguiente manera:\nfibfib (0) == 0\nfib(1) == 0\nfib(2) == 1\nfibfib(n) == fibfib(n-1) + fibfib(n-2) +        fibfib(n-3).\nPor favor, escriba una funci\u00f3n para calcular eficientemente el en\u00e9simo elemento de la secuencia fibfib.\n"}
{"task_id": "HumanEval/64", "keyWords": " escribe una funci\u00f3n vowels_count que toma una representaci\u00f3n de cadena, toma una palabra como entrada y devuelve el n\u00famero de vocales en la cadena.\nEn este caso, las vocales son \"a\", \"e\", \"i\", \"o\", \"u\". Aqu\u00ed, la \"y\" tambi\u00e9n es una vocal, pero solo si est\u00e1 al final de una palabra dada.\n"}
{"task_id": "HumanEval/65", "keyWords": "Un cambio c\u00edclico de los d\u00edgitos de un entero x, desplazando hacia la derecha y devolviendo el resultado como una cadena. Si shift > bit, devuelve el n\u00famero de bits invertidos.\n"}
{"task_id": "HumanEval/66", "keyWords": "La misi\u00f3n\nEscribe una funci\u00f3n que acepta una cadena como entrada y devuelve solo la suma ASCII de caracteres grandes.\n\n"}
{"task_id": "HumanEval/67", "keyWords": "\nEn esta tarea obtendr\u00e1s una cadena que representa el n\u00famero de manzanas y naranjas repartidas en una cesta de frutas que contiene manzanas, naranjas y mangos. En la cesta, el n\u00famero de mangos en la cesta es devuelto.\nPor ejemplo:\nfruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\nfruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\nfruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\nfruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n"}
{"task_id": "HumanEval/68", "keyWords": "\n\"Dado un array que representa una rama del \u00e1rbol que tiene un n\u00famero entero no negativo de nodos, su tarea es extraer uno de los nodos y devolverlo. El nodo seleccionado debe ser el nodo num\u00e9rico par m\u00e1s peque\u00f1o. Si se encuentra m\u00e1s de un nodo con el mismo valor par m\u00ednimo, se devuelve el nodo con el \u00edndice m\u00e1s bajo. El nodo seleccionado debe ser devuelto en forma de lista, [menor valor par, su \u00edndice],\nDevuelve [] si no hay valores pares o si el array dado est\u00e1 vac\u00edo.\nEjemplo 1:\nEntrada: [4,2,3]\nSalida: [2, 1]\nExplicaci\u00f3n: 2 tiene el menor valor par y 2 tiene el menor valor \u00edndice.\n\nEjemplo 2:\nEntrada: [1,2,3]\nSalida: [2, 1]\nExplicaci\u00f3n: 2 tiene el menor valor par y 2 tiene el menor valor \u00edndice.\n\nEjemplo 3:\nEntrada: []\nSalida: []\n\nEjemplo 4:\nEntrada: [5, 0, 3, 0, 4, 2]\nSalida: [0, 1]\nExplicaci\u00f3n: 0 es el valor m\u00e1s bajo, pero hay dos ceros, por lo que elegimos el primer cero, que tiene el \u00edndice m\u00e1s bajo.\n\nL\u00edmite:\n* 1 <= n\u00famero de nodos <= 10000\n* 0 <= valor del nodo\n"}
{"task_id": "HumanEval/69", "keyWords": "\n\u00bfCu\u00e1l es el n\u00famero de enteros positivos? Devuelve el n\u00famero entero m\u00e1s grande que cero\nY la frecuencia es mayor o igual al valor del entero en s\u00ed mismo. La frecuencia con la que un n\u00famero entero aparece es el n\u00famero de veces que aparece en la lista. Devuelve -1 si no existe.\nEjemplos:\nsearch([4, 1, 2, 2, 3, 1]) == 2\nsearch([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\nsearch([5, 5, 4, 4, 4]) == -1\n"}
{"task_id": "HumanEval/70", "keyWords": "\nDado una lista de enteros, devuelve la lista en un orden extra\u00f1o. El orden extra\u00f1o, es comenzar con el m\u00ednimo, luego con el m\u00e1ximo de los enteros restantes, luego con el m\u00ednimo, y as\u00ed sucesivamente.\n\nEjemplos:\nstrange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\nstrange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\nstrange_sort_list([]) == []\n"}
{"task_id": "HumanEval/71", "keyWords": "\nDado la longitud de los tres lados de un tri\u00e1ngulo. El \u00e1rea devuelta se redondea a dos decimales si sus tres lados forman un tri\u00e1ngulo v\u00e1lido, de lo contrario se devuelve -1.\nCuando la suma de cualesquiera dos lados es mayor que el tercero, los tres lados forman un tri\u00e1ngulo v\u00e1lido.\n"}
{"task_id": "HumanEval/72", "keyWords": "\nEscribe una funci\u00f3n que devuelve True si el objeto q va a volar, False de lo contrario. Un objeto q vuela si est\u00e1 equilibrado (es una lista palindr\u00f3mica) y la suma de sus elementos es menor o igual al peso m\u00e1ximo posible w.\n\nEjemplos:\nwill_it_fly([1, 2], 5) \u279e False\n# 1+2 es menor que el peso m\u00e1ximo posible, pero est\u00e1 desequilibrado.\n\nwill_it_fly([3, 2, 3], 1) \u279e False\n# est\u00e1 equilibrado, pero 3+2+3 supera el peso m\u00e1ximo posible.\n\nwill_it_fly([3, 2, 3], 9) \u279e True\n# 3+2+3 es menor que el peso m\u00e1ximo posible y est\u00e1 equilibrado.\n\nwill_it_fly([3], 5) \u279e True\n# 3 menor que el peso m\u00e1ximo posible, est\u00e1 equilibrado.\n"}
{"task_id": "HumanEval/73", "keyWords": "\n3 dejar ser un array palindr\u00f3mico. Una matriz palindr\u00f3mica es una matriz que se lee igual antes y despu\u00e9s. En un solo cambio, puede cambiar un elemento a cualquier otro elemento.\n\nPor ejemplo:\nSmallest_change ([1,2,3,5,4,7,9,6]) == 4\nsmallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\nsmallest_change([1, 2, 3, 2, 1]) == 0\n"}
{"task_id": "HumanEval/74", "keyWords": "\nEscribe una funci\u00f3n que acepta dos listas de cadenas y devuelve una lista con un n\u00famero de caracteres menor que el n\u00famero total de caracteres de todas las cadenas de la otra lista.\nSi ambas listas tienen el mismo n\u00famero de caracteres en todas las cadenas, se devuelve la primera lista.\nejemplo\ntotal_match([], []) \u279e []\ntotal_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\ntotal_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\ntotal_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\ntotal_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n"}
{"task_id": "HumanEval/75", "keyWords": "Escribe una funci\u00f3n que devuelve true cuando el n\u00famero dado es el producto de 3 n\u00fameros primos\nDe lo contrario, devuelve falso. Se sabe que a es menor a 100.\nEjemplos:\nis_multiply_prime(30) == True\n30 = 2 * 3 * 5\n"}
{"task_id": "HumanEval/76", "keyWords": "Su tarea es escribir una funci\u00f3n. Si un n\u00famero x es un\nLas potencias simples de n devuelven verdadero y falso en otros casos.\nSi n**int= x, entonces x es una potencia simple de n\nPor ejemplo:\nis_simple_power(1, 4) => true\nis_simple_power(2, 2) => true\nis_simple_power(8, 2) => true\nis_simple_power(3, 2) => false\nis_simple_power(3, 1) => false\nis_simple_power(5, 3) => false\n"}
{"task_id": "HumanEval/77", "keyWords": "\nEscribe una funci\u00f3n que acepta un entero a como entrada y devuelve True si este entero es el cubo de alg\u00fan entero\nNota: puede asumir que la entrada siempre es v\u00e1lida.\nEjemplos:\niscube(1) ==> True\niscube(2) ==> False\niscube(-1) ==> True\niscube(64) ==> True\niscube(0) ==> True\niscube(180) ==> False\n"}
{"task_id": "HumanEval/78", "keyWords": "Se le pide que escriba una funci\u00f3n para recibir n\u00fameros hexadecimales como una cadena. Cuente el n\u00famero de primos (primos son los n\u00fameros naturales que son mayores que 1 y no son el producto de dos n\u00fameros naturales m\u00e1s peque\u00f1os) en el n\u00famero hexadecimal de la entrada\nLos n\u00fameros hexadecimales son 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nLos n\u00fameros primos son 2, 3, 5, 7, 11, 13, 17,...\nAs\u00ed que tienes que determinar el n\u00famero como uno de los n\u00fameros de un solo clic :2,3,5,7, B(= 11 decimal), D(= 13 decimal).\nNota: puede asumir que la entrada siempre es correcta o una cadena vac\u00eda. Los s\u00edmbolos A, B, C, D, E, F siempre est\u00e1n en may\u00fasculas.\nEjemplos:\nPara num = \"AB\", la salida deber\u00eda ser 1.\nPara num = \"1077E\", la salida deber\u00eda ser 2.\nPara num = \"ABED1A33\", la salida deber\u00eda ser 4.\nPara num = \"123456789ABCDEF0\", la salida deber\u00eda ser 6.\nPara num = \"2020\", la salida deber\u00eda ser 2.\n"}
{"task_id": "HumanEval/79", "keyWords": "Se le dar\u00e1 un n\u00famero decimal. Su tarea es convertirlo en\nEn formato binario. La funci\u00f3n debe devolver una cadena, cada car\u00e1cter representa un n\u00famero binario. Cada car\u00e1cter en la cadena ser\u00e1 '0' o '1'.\n\nHay un par de caracteres adicionales 'db' al principio y al final de la cadena.\nLos caracteres adicionales se utilizan para ayudar a ajustar el formato.\nEjemplos:\ndecimal_to_binary(15)   # returns \"db1111db\"\ndecimal_to_binary(32)   # returns \"db100000db\"\n"}
{"task_id": "HumanEval/80", "keyWords": "Te doy una s. Su tarea es comprobar si la cadena est\u00e1 feliz. Una cadena es feliz si su longitud es al menos 3 y cada 3 letras consecutivas es diferente\nPor ejemplo:\nis_happy(a) => False\nis_happy(aa) => False\nis_happy(abcd) => True\nis_happy(aabb) => False\nis_happy(adb) => True\nis_happy(xyy) => False\n"}
{"task_id": "HumanEval/81", "keyWords": "Es la \u00faltima semana del semestre y el profesor debe puntuar a los estudiantes. Los profesores han estado desarrollando sus propios algoritmos de puntuaci\u00f3n. El \u00fanico problema es que perdi\u00f3 el c\u00f3digo que utiliz\u00f3 para calificar. Ella te da una lista de GPA de algunos estudiantes. Vas a escribir una funci\u00f3n que puede exportar una lista de niveles de letras usando la siguiente tabla:\nLa jerarqu\u00eda GPA | letras\n4.0 A +\n> 3,7 A\n> 3,3 A-\n> 3,0 B+\n> 2.7b > 2.7b\n> 2.3b -\n> 2,0 C+\n> 1.7c\n> 1.3c -\n> 1,0 D+\n> 0,7 D\n> 0,0 D-\n0.0 E\n\n\nEjemplos:\nGrade_equation ([] 1.7 4.0, 3, 2, 3.5) = = > [A '+', 'B', 'C', 'C', 'A -']\n"}
{"task_id": "HumanEval/82", "keyWords": "Escribe una funci\u00f3n que recibe una cadena y devuelve True si la cadena es de longitud prima, False de lo contrario\n"}
{"task_id": "HumanEval/83", "keyWords": "\nDado un entero positivo n, devuelve los n\u00fameros enteros positivos de n bits\nCantidad que comienza o termina en 1.\n"}
{"task_id": "HumanEval/84", "keyWords": "Dado un entero positivo N, devuelve la representaci\u00f3n binaria de la suma de sus n\u00fameros.\nejemplo\nPara N = 1000, la suma de los n\u00fameros es 1 y la salida debe ser \"1\".\nPara N = 150, la suma de los n\u00fameros ser\u00eda 6 y la salida deber\u00eda ser \"110\".\nPara N = 147 y la suma de los n\u00fameros es 12, la salida debe ser \"1100\".\nVariable:\n@n n\u00famero entero\nRestricciones :0\u2264N\u226410000.\nSalida:\nUna cadena de n\u00fameros binarios\n"}
{"task_id": "HumanEval/85", "keyWords": "Dado una lista de enteros no vac\u00edos. Sumando elementos pares indexados como impares...\n\n\n"}
{"task_id": "HumanEval/86", "keyWords": "\nEscribe una funci\u00f3n que toma una cadena y devuelve su versi\u00f3n ordenada.\nLa versi\u00f3n ordenada de una cadena, es una cadena en la que todas las palabras (separadas por espacios) se sustituyen por palabras ordenadas por todos sus caracteres en orden ascendente de valor ASCII.\nNota: debe mantener el orden de las palabras y espacios en la oraci\u00f3n.\n\nPor ejemplo:\nanti_shuffle('Hi') returns 'Hi'\nanti_shuffle('hello') returns 'ehllo'\nanti_shuffle('Hello World!!! ') returns 'Hello !!! Wdlor'\n"}
{"task_id": "HumanEval/87", "keyWords": "\nLa lista anidada es similar a una matriz, pero a diferencia de una matriz, cada fila puede contener un n\u00famero diferente de columnas. Dado la lista y el entero x, encontrar el entero x en la lista, devuelve la lista de tuplas, [(x1, y1), (x2, y2)...] , donde cada tupla es una coordenada -(fila, columna), comenzando en 0.\nInicialmente ordena las coordenadas en orden ascendente.\nAdem\u00e1s, las coordenadas de las filas se ordenan en orden descendente de columnas.\n\nPor ejemplo:\nget_row([\n[6beta],\n[1,2,3,4,1,6],\n[1,2,3,4,5,1]\n[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\nget_row([], 1) == []\nget_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n"}
{"task_id": "HumanEval/88", "keyWords": "\nDado un array de enteros no negativos, devuelve una copia ordenada del array dado; Si (el primer valor del \u00edndice, el \u00faltimo valor del \u00edndice) y son impares, el array dado se clasifica en orden ascendente; Si (el primer valor del \u00edndice, el \u00faltimo valor del \u00edndice) y son pares, el array dado se ordena en orden descendente.\n\nNota:\n* no cambia la matriz dada.\n\n"}
{"task_id": "HumanEval/89", "keyWords": "Crea una funci\u00f3n encrypt que toma una cadena como argumento,\nAl girar el alfabeto, se devuelve una cadena cifrada. El alfabeto debe rotarse de tal manera que estas letras se trasladas 2*2 posiciones hacia abajo.\n"}
{"task_id": "HumanEval/90", "keyWords": "\nTe da una lista de enteros. Escribe una funci\u00f3n next_smallest() que devuelve el segundo elemento m\u00e1s peque\u00f1o de la lista.\nSi no hay tal elemento, se devuelve None.\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\nnext_smallest([]) == None\nnext_smallest([1, 1]) == None\n"}
{"task_id": "HumanEval/91", "keyWords": "\nSe le da una serie de palabras. Su tarea es contar los n\u00fameros aburridos. El aburrimiento es una oraci\u00f3n que comienza con una \"I\". \u00bfFrases con '.', '? \u00a1O! Separadores.\n\nPor ejemplo:\n"}
{"task_id": "HumanEval/92", "keyWords": "\nCrea una funci\u00f3n que acepte 3 n\u00fameros. Devuelve true si uno de los n\u00fameros es igual a la suma de los otros dos n\u00fameros y todos los n\u00fameros son enteros. Devuelve falso en cualquier otro caso.\n\nejemplo\nany_int(5, 2, 7) \u279e True\n\nany_int(3, 2, 2) \u279e False\n\nany_int(3, -2, 1) \u279e True\n\nAny_int (3.6, -2.2, 2) \u279e falso\n\n\n\n"}
{"task_id": "HumanEval/93", "keyWords": "\nEscribe una funci\u00f3n que acepta el mensaje y lo codifica de tal manera que intercambia todas las letras may\u00fasculas y min\u00fasculas, reemplaza todas las vocales que aparecen en el mensaje y reemplaza las dos primeras letras de la posici\u00f3n correspondiente de la letra en el alfabeto ingl\u00e9s\nSupongamos que solo hay letras.\n\nEjemplos:\n"}
{"task_id": "HumanEval/94", "keyWords": "Te da una lista de enteros. Usted necesita encontrar el n\u00famero primo m\u00e1s grande y devolver la suma de sus d\u00edgitos.\n\nEjemplos:\nFor LST = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\nFor LST = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\nFor LST = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\nFor LST = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\nPara LST = [0,81,12,3,1,21] la salida deber\u00eda ser 3\nPara LST = [0,8,1,2,1,7] la salida deber\u00eda ser 7\n"}
{"task_id": "HumanEval/95", "keyWords": "\nDado un diccionario, se devuelve True si todas las claves son cadenas en min\u00fasculas, False si todas las claves son cadenas en may\u00fasculas, False si no. Esta funci\u00f3n deber\u00eda devolver False si el diccionario dado est\u00e1 vac\u00edo.\nEjemplos:\ncheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\ncheck_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\ncheck_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\ncheck_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\ncheck_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n"}
{"task_id": "HumanEval/96", "keyWords": "Implementa una funci\u00f3n que toma un entero no negativo y devuelve una lista de enteros primos menores que n.\nPor ejemplo:\nCount_up_to (5) => [2,3]\nCount_up_to (2) => [2,3,5,7]\ncount_up_to(0) => []\nCount_up_to (20) => [2,3,5,7,11,13,17,19]\ncount_up_to(1) => []\nCount_up_to (2) => [2,3,5,7,11,13,17]\n"}
{"task_id": "HumanEval/97", "keyWords": "Completa una funci\u00f3n que toma dos enteros como argumentos y devuelve el producto de sus d\u00edgitos. Supongamos que la entrada es siempre v\u00e1lida.\nEjemplos:\nmultiply(148, 412) should return 16.\nmultiply(19, 28) should return 72.\nmultiply(2020, 1851) should return 0.\nmultiply(14,-15) should return 20.\n"}
{"task_id": "HumanEval/98", "keyWords": "\nDada la cadena s, cuenta el n\u00famero de vocales may\u00fasculas en un sub\u00edndice par.\n\nPor ejemplo:\ncount_upper('aBCdEf') returns 1\ncount_upper('abcdefg') returns 0\ncount_upper('dBBE') returns 0\n"}
{"task_id": "HumanEval/99", "keyWords": "\nCrea una funci\u00f3n que toma un valor (cadena) que representa un n\u00famero y devuelve el n\u00famero entero m\u00e1s cercano a \u00e9l. Si este n\u00famero es equidistante de dos enteros, entonces es un entero de 0.\n\nejemplo\n"}
{"task_id": "HumanEval/100", "keyWords": "\nDado un entero positivo n, necesitas hacer una pila de n capas de piedras. N piedras en la primera capa. El n\u00famero de piedras para el siguiente nivel es:\n- si n es impar, entonces el siguiente n\u00famero impar.\n- si n es par, el siguiente par.\nDevuelve el n\u00famero de piedras en cada nivel de la lista, donde el elemento i en la posici\u00f3n index representa el n\u00famero de piedras en el nivel (i +1).\nEjemplos:\n"}
{"task_id": "HumanEval/101", "keyWords": "\nUsted obtiene una secuencia de palabras separadas por comas o espacios. Su tarea es\nDivide una cadena en palabras y devuelve un array de palabras.\n\nPor ejemplo:\nwords_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nwords_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n"}
{"task_id": "HumanEval/102", "keyWords": "Esta funci\u00f3n acepta dos n\u00fameros positivos x e y y devuelve el mayor n\u00famero par en el rango [x, y]. Si no hay tal n\u00famero, entonces la funci\u00f3n deber\u00eda devolver -1.\n\nPor ejemplo:\nchoose_num(12, 15) = 14\nchoose_num(13, 12) = -1\n"}
{"task_id": "HumanEval/103", "keyWords": "Dado dos enteros positivos n y m, su tarea es calcular el promedio de los enteros de N A m (incluyendo n y m). Redondea la respuesta al n\u00famero entero m\u00e1s cercano y la convierte en binario. Si n es mayor que m, devuelve -1.\n"}
{"task_id": "HumanEval/104", "keyWords": "Dado una lista de enteros positivos x, devuelve una lista ordenada de todos los elementos sin un n\u00famero par.\n\nNota: la lista devuelta debe ordenarse en orden creciente.\n\nPor ejemplo:\n"}
{"task_id": "HumanEval/105", "keyWords": "\nDado un array de enteros, ordene los enteros entre 1 y 9. Invierta el array resultante y reemplace cada n\u00famero con el nombre correspondiente \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nPor ejemplo:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\n-> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n-> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\nreturn [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\nDevuelve un array vac\u00edo si est\u00e1 vac\u00edo:\narr = []\nreturn []\n\nSi hay alg\u00fan n\u00famero extra\u00f1o en el array, ignorarlo:\narr = [1, -1 , 55]\n-> sort arr -> [-1, 1, 55]\n-> reverse arr -> [55, 1, -1]\nreturn = ['One']\n"}
{"task_id": "HumanEval/106", "keyWords": "Implementando una funci\u00f3n f con n como argumento, devuelve una lista de tama\u00f1o n tal que el valor de los elementos con \u00edndice i, si i es par, es el factorial de i, de lo contrario es la suma de los n\u00fameros de 1 a i. I comienza con 1.\nEl factorial de i es la multiplicaci\u00f3n de los n\u00fameros de 1 a i (1 * 2 *... * i).\nPor ejemplo:\nf(5) == [1, 2, 6, 24, 15]\n"}
{"task_id": "HumanEval/107", "keyWords": "\nDado un entero positivo n, devuelve una tupla, documentada en el rango (1,n), que contiene el n\u00famero de palindromas pares e impares, y el rango contiene el l\u00edmite.\n\nEjemplo 1:\n\nEntradas: 3 entradas\nSalida: (1, 2)\nExplicaci\u00f3n:\nEl palindr\u00f3mico entero es 1,2,3. Uno de ellos es par y dos son impares.\n\nEjemplo 2:\n\nEntradas: 12\nSalida: (4, 6)\nExplicaci\u00f3n:\nLos palindromas enteros son 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. Cuatro de ellos son pares y seis impares.\n\nNota:\n1. 1 <= n <= 10^3\n2. Las tuplas devueltas contienen el n\u00famero de palindromas enteros pares e impares, respectivamente.\n"}
{"task_id": "HumanEval/108", "keyWords": "\nEscribe una funci\u00f3n count_nums que toma un array de enteros y devuelve\nN\u00famero de elementos cuya suma es mayor que 0.\nSi un n\u00famero es negativo, entonces su primer d\u00edgito con signo ser\u00e1 negativo:\nPor ejemplo, -123 los n\u00fameros con signo son -1, 2 y 3.\n"}
{"task_id": "HumanEval/109", "keyWords": "Tenemos un conjunto que contiene N enteros arr[1], arr[2],... , arr de arr[N]. Los n\u00fameros en el array se ordenar\u00e1n aleatoriamente. Su tarea es determinar si se puede ordenar la matriz en un orden no decreciente. Haga lo siguiente para una matriz dada:\nPuede realizar el desplazamiento a la derecha tantas veces como desee.\n\nUna operaci\u00f3n de desplazamiento a la derecha significa mover todos los elementos de la matriz una posici\u00f3n a la derecha. El \u00faltimo elemento de la matriz se mueve a la posici\u00f3n inicial de la matriz, que es el \u00edndice 0.\n\nDevuelve True si el array ordenado se puede obtener haciendo lo anterior, y False si no. Devuelve True si el array dado est\u00e1 vac\u00edo.\n\nNota: se garantiza que la lista dada tenga elementos \u00fanicos.\n\n"}
{"task_id": "HumanEval/110", "keyWords": "En este problema implementar\u00e1s una funci\u00f3n que acepta dos listas num\u00e9ricas y determina si es posible un intercambio de elementos\nHacer lst1 una lista con solo n\u00fameros pares. No hay l\u00edmite en el n\u00famero de elementos intercambiados entre lst1 y lst2. Devuelve \"s\u00ed\" si todos los elementos en lst1 son pares intercambiando elementos entre lst1 y lst2. De lo contrario, devuelve \"NO\".\nPor ejemplo:\nexchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\nexchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\nSupongamos que la lista de entrada no est\u00e1 vac\u00eda.\n"}
{"task_id": "HumanEval/111", "keyWords": "Dado una cadena de letras min\u00fasculas separadas por espacios, se devuelve un diccionario de las letras m\u00e1s repetidas y su correspondiente n\u00famero de ocurrencias.\nSi varias letras tienen la misma ocurrencia, se devuelven todas las letras y sus ocurrencias.\n\nEjemplos:\nhistogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\nhistogram('a b b a') == {'a': 2, 'b': 2}\nhistogram('a b c a b') == {'a': 2, 'b': 2}\nhistogram('b b b b a') == {'b': 4}\nhistogram('') == {}\n\n"}
{"task_id": "HumanEval/112", "keyWords": "\"Tarea: tenemos dos cadenas s y c y debes eliminar todos los caracteres en s que sean iguales a cualquier car\u00e1cter en c\nLuego, compruebe si la cadena resultante es un palindroma. Si una cadena se lee antes y despu\u00e9s de la misma manera, se llama palindroma.\nDebe devolver una tupla que contenga la cadena resultante y la comprobaci\u00f3n True/False.\nejemplo\nPara s = \"abcde\", c = \"ae\", el resultado devuelto es (' BCD ', falso)\nPara s = \"abcdef\", c = \"b\" devuelve el resultado ('acdef', falso)\nPara s = \"abcdedcba\", c = \"ab\", el resultado devuelto es ('cdedc',True)\n"}
{"task_id": "HumanEval/113", "keyWords": "Dado una lista de cadenas, cada una de las cuales consiste solo en n\u00fameros, se devuelve una lista. Cada elemento i en el resultado de salida debe ser \"el n\u00famero de elementos odd en la cadena i de la entrada.\" donde todos los i deben ser reemplazados con el n\u00famero de d\u00edgitos impares en la i-\u00e9sima cadena de entrada.\n\n"}
{"task_id": "HumanEval/114", "keyWords": "\nDado un array entero nums, encontrar la suma m\u00ednima de cualquier subarray no vac\u00edo.\nejemplo\nminSubArraySum([2, 3, 4, 1, 2, 4]) == 1\nminSubArraySum([-1, -2, -3]) == -6\n"}
{"task_id": "HumanEval/115", "keyWords": "\nTe da una rejilla rectangular de rejilla de pozo. Cada fila representa un pozo y cada 1 en una fila representa una unidad de agua. Cada pozo tiene un cubo correspondiente que puede ser utilizado para extraer agua, y todos tienen la misma capacidad de capacidad. Su tarea es vaciar el agua del pozo con un cubo. Salida el n\u00famero de veces que se necesita para bajar el barril.\n\nEjemplo 1:\nEntrada:\nCuadr\u00edcula: [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nCapacidad del cubo: 1\nSalidas: 6 salidas\n\nEjemplo 2:\nEntrada:\nCuadr\u00edcula: [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nCapacidad del cubo: 2\nSalidas: 5 salidas\n\nEjemplo 3:\nEntrada:\nCuadr\u00edcula: [[0,0,0], [0,0,0]]\nCapacidad del cubo: 5\nSalida: 0\n\nRestricciones:\n* todos los pozos tienen la misma longitud\n* 1 <= grid.length <= 10^2\n* 1 <= grid[:,1].length <= 10^2\n* grid[i][j] -> 0 | 1\n* 1 <= capacity <= 10\n"}
{"task_id": "HumanEval/116", "keyWords": "\nEn este catta, se debe ordenar una matriz de enteros no negativos, ordenados en orden ascendente de acuerdo con el n\u00famero de 1 en la representaci\u00f3n binaria de estos n\u00fameros.\nPara una cantidad similar de 1, ordenar seg\u00fan el valor decimal.\n\nDebe ejecutarse as\u00ed:\n"}
{"task_id": "HumanEval/117", "keyWords": "Dada una cadena s y un n\u00famero natural n, su tarea es implementar una funci\u00f3n que devuelva una lista de todas las palabras que contienen n consonantes en la cadena s, en el orden en que aparecen estas palabras en la cadena s. Si la cadena s est\u00e1 vac\u00eda, la funci\u00f3n debe devolver una lista vac\u00eda.\nNota: puede asumir que la cadena de entrada solo contiene letras y espacios.\nEjemplos:\nselect_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselect_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\nselect_words(\"simple white space\", 2) ==> []\nselect_words(\"Hello world\", 4) ==> [\"world\"]\nselect_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n"}
{"task_id": "HumanEval/118", "keyWords": "Tengo una palabra para ti. \u00bfC\u00f3mo se juega vocales: Las vocales iniciales y finales no cuentan. Devuelve una cadena vac\u00eda si no se encuentra ninguna vocal que cumpla con las condiciones anteriores\nPuede asumir que la cadena dada solo contiene letras inglesas.\n\nEjemplos:\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n"}
{"task_id": "HumanEval/119", "keyWords": "\nDado una lista que contiene dos cadenas, ambas contienen s\u00f3lo par\u00e9ntesis abiertos '(' o par\u00e9ntesis cerrados ')'. Su trabajo es comprobar si es posible concatenar dos cadenas a trav\u00e9s de alg\u00fan orden que haga que la cadena resultante sea buena. Una cadena S se considera buena si y solo si todos los par\u00e9ntesis en S est\u00e1n equilibrados. Por ejemplo: la cadena '(())()' es buena, mientras que la cadena '())' no lo es. Devuelve 'Yes' si hay una manera de generar una buena cadena, 'No' de lo contrario.\n\nEjemplos:\nmatch_parens(['()(', ')']) == 'Yes'\nmatch_parens([')', ')']) == 'No'\n"}
{"task_id": "HumanEval/120", "keyWords": "\nDado un array de enteros arr y un entero positivo k, se devuelve una lista ordenada de longitud k que contiene los k n\u00fameros m\u00e1s grandes en arr.\n\nEjemplo 1:\n\nEntrada: arr = [-3, -4, 5], k = 3\nSalida: [-4, -3, 5]\n\nEjemplo 2:\n\nEntrada: arr = [4, -4, 4], k = 2\nSalida: [4, 4]\n\nEjemplo 3:\n\nEntrada: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\nSalida: [2]\n\nNota:\n1. La longitud de la matriz ser\u00e1 [1, 1000].\n2. Los elementos en el array estar\u00e1n en [-1000, 1000].\n3. 0 <= k <= len(arr)\n"}
{"task_id": "HumanEval/121", "keyWords": "Dado una lista no vac\u00eda de enteros, devuelve la suma de todos los elementos impares en posiciones pares.\n\nejemplo\nsolution([5, 8, 7, 1]) ==> 12\nsolution([3, 3, 3, 3, 3]) ==> 9\nsolution([30, 13, 24, 321]) ==>0\n"}
{"task_id": "HumanEval/122", "keyWords": "\nDado un arr no vac\u00edo que contiene n\u00fameros enteros y el entero k, devuelve la suma de los elementos con hasta dos d\u00edgitos en los primeros k elementos de arr.\nEjemplos:\n\nEntrada: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nSalida: 24 # suma de 21 + 3\n\nRestricciones:\n1. 1 <= len(arr) <= 100\n2. 1 <= k <= len(arr)\n"}
{"task_id": "HumanEval/123", "keyWords": "\nDado un entero positivo n, se devuelve una lista ordenada donde los n\u00fameros impares est\u00e1n ordenados por la secuencia de collatz. La conjetura de Collatz es una conjetura en matem\u00e1ticas sobre secuencias, definida de la siguiente manera: comenzando con cualquier entero positivo n, cada t\u00e9rmino se obtiene por el t\u00e9rmino anterior de la siguiente manera: si el t\u00e9rmino anterior es par, el siguiente t\u00e9rmino es la mitad del anterior. Si el anterior es impar, el siguiente es 3 veces el anterior + 1. La conjetura es que la secuencia siempre es igual a 1, independientemente del valor de n.\n\nNota:\n1. Collatz(1) is [1].\n2. Devuelve la lista ordenada en orden creciente.\n\nPor ejemplo:\nGet_odd_collatz (5) devuelve la secuencia de collatz de [1, 5] # 5 es [5, 16, 8, 4, 2, 1], por lo que los n\u00fameros impares son solo 1 y 5.\n"}
{"task_id": "HumanEval/124", "keyWords": "Debe escribir una funci\u00f3n que valide la cadena de fecha dada, devolviendo True si la fecha es v\u00e1lida, False de lo contrario. La fecha es v\u00e1lida si se cumplen las siguientes condiciones:\n1. La cadena de fecha no est\u00e1 vac\u00eda.\n2. Para los meses 1, 3, 5, 7, 8, 10 y 12, el n\u00famero de d\u00edas no es inferior a 1 ni superior a 31. 4, 6, 9 y 11 meses no menos de 1 d\u00eda o m\u00e1s de 30 d\u00edas. Y, el n\u00famero de d\u00edas en el segundo mes no debe ser inferior a 1 ni superior a 29.\n3. El mes no puede ser menor que 1 o mayor que 12.\n4. El formato de la fecha es: mm-dd-aaaa\n\nPor ejemplo:\nvalid_date('03-11-2000') => True\n\nvalid_date('15-01-2012') => False\n\nvalid_date('04-0-2040') => False\n\nvalid_date('06-04-2020') => True\n\nvalid_date('06/04/2020') => False\n"}
{"task_id": "HumanEval/125", "keyWords": "\nDado una cadena de palabras, se devuelve una lista de palabras separadas por espacios. Si no hay espacios en el texto introducido, se deben separar por comas. Si no hay comas, se debe devolver el n\u00famero de letras min\u00fasculas en la cadena que est\u00e1n en una posici\u00f3n impar en el alfabeto, ord('a') = 0, ord('b') = 1,... Ord ('z') = 25\nejemplo\nsplit_words(\"Hello world!\" ) \u279e [\"Hello\", \"world!\"]\nsplit_words(\"Hello,world!\" ) \u279e [\"Hello\", \"world!\"]\nsplit_words(\"abcdef\") == 3\n"}
{"task_id": "HumanEval/126", "keyWords": "\nDado una lista de n\u00fameros, devuelve si est\u00e1n ordenados en orden ascendente. Devuelve falso si hay m\u00e1s de una copia del mismo n\u00famero en la lista. Supongamos que no hay n\u00fameros negativos, solo n\u00fameros enteros.\n\nejemplo\nis_sorted([5]) \u279e True\nis_sorted([1, 2, 3, 4, 5]) \u279e True\nis_sorted([1, 3, 2, 4, 5]) \u279e False\nis_sorted([1, 2, 3, 4, 5, 6]) \u279e True\nis_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\nis_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\nis_sorted([1, 2, 2, 3, 3, 4]) \u279e True\nis_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n"}
{"task_id": "HumanEval/127", "keyWords": "Se le dan dos intervalos de tiempo, donde cada intervalo es un par de enteros. Por ejemplo, el intervalo =(inicio, fin) =(1,2). El intervalo dado es cerrado, lo que significa que el intervalo (principio, fin) incluye el principio y el final. Para cada intervalo dado, se asume que su punto de partida es menor o igual a su punto final. Su tarea es determinar si la longitud del intervalo de superposici\u00f3n de los dos intervalos es un n\u00famero primo. Por ejemplo, la intersecci\u00f3n de los intervalos (1,3), (2,4) es (2,3) que tiene longitud 1 y no es primo. Devuelve \"s\u00ed\" si la longitud de la intersecci\u00f3n es prima; De lo contrario, devuelve \"NO\". Si los dos intervalos son disjuntos, se devuelve \"NO\".\n\n\n[entrada/salida] ejemplo:\nintersection((1, 2), (2, 3)) ==> \"NO\"\nintersection((-1, 1), (0, 4)) ==> \"NO\"\nintersection((-3, -1), (-5, 5)) ==> \"YES\"\n"}
{"task_id": "HumanEval/128", "keyWords": "\nEl arr devuelve la suma de los tama\u00f1os de todos los n\u00fameros enteros multiplicados por el producto de todos los s\u00edmbolos enteros, el s\u00edmbolo de cada n\u00famero representado por 1, -1 o 0. Nota: devuelve None para arr vac\u00edo.\n\nEjemplos:\n"}
{"task_id": "HumanEval/129", "keyWords": "\nDada una cuadr\u00edcula de N filas y N columnas (N >= 2) y un entero positivo k, cada celda de la cuadr\u00edcula contiene un valor. Los n\u00fameros enteros en las celdas de la cuadr\u00edcula aparecen solo una vez y est\u00e1n en el rango [1, N * N].\nHay que encontrar el camino m\u00ednimo de longitud k en la cuadr\u00edcula. Usted puede comenzar\nComience con cualquier celda. En cada paso, puede moverse a cualquier celda adyacente. En otras palabras, puede encontrar una celda que comparta un lado con su ubicaci\u00f3n actual\n.\nTenga en cuenta que un camino de longitud k significa que se visitan exactamente k celdas (no necesariamente diferentes). No puedes desconectarte de la red. El camino A(de longitud k) se considera menor que el camino B(de longitud k) si despu\u00e9s de ordenar los valores de las celdas A y B\nPor (los llamamos lst_A y lst_B), lst_A es menor en orden lexicogr\u00e1fico\nLst_B, en otras palabras, existe un \u00edndice entero i (1 <= i <= k)\nTal que lst_A[i] < lst_B[i] y para cualquier j (1 <= j < i)\nLst_A [j] = lst_B[j]. Puede garantizar que la respuesta es \u00fanica. Devuelve una lista ordenada de valores en las celdas por las que pasa la ruta m\u00e1s peque\u00f1a.\n\nEjemplos:\n\nEntrada: rejilla = [[1,2,3], [4,5,6], [7,8,9]], k = 3\nSalida: [1, 2, 1]\n\nEntrada: rejilla = [[5,9,3], [4,1,6], [7,8,2]], k = 1\nSalida: [1]\n"}
{"task_id": "HumanEval/130", "keyWords": "Todo el mundo conoce la secuencia de fibonacci, que ha sido intensamente estudiada por los matem\u00e1ticos en los \u00faltimos siglos. Sin embargo, lo que no se conoce es la sucesi\u00f3n de tribonacci.\nLa sucesi\u00f3n de tribonacci se define por la recursi\u00f3n:\ntri(1) = 3\ntri(n) = 1 + n / 2, if n is even.\ntri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\nPor ejemplo:\ntri(2) = 1 + (2 / 2) = 2\ntri(4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n= 2 + 3 + 3 = 8\nDado un entero no negativo n, debe devolver una lista que contenga los primeros n + 1 n\u00fameros de la secuencia de Tribonacci.\n"}
{"task_id": "HumanEval/131", "keyWords": "Dado un entero positivo n, devuelve el producto de todos los n\u00fameros cuyo n\u00famero de d\u00edgito es impar. Devuelve 0 si todos los d\u00edgitos son pares.\n"}
{"task_id": "HumanEval/132", "keyWords": "\nCrea una funci\u00f3n que acepta como entrada una cadena que contiene solo corchetes. La funci\u00f3n debe devolver True si y solo si existe una secuencia v\u00e1lida de par\u00e9ntesis,\nDonde al menos un par\u00e9ntesis est\u00e1 anidado en la subsecuencia.\n\nis_nested('[[]]') \u279e True\nis_nested('[]]]]]]][[[[[]') \u279e False\nis_nested('[][]') \u279e False\nis_nested('[]') \u279e False\nis_nested('[[][]]') \u279e True\nis_nested('[[]][[') \u279e True\n"}
{"task_id": "HumanEval/133", "keyWords": "Te dar\u00e9 una lista de n\u00fameros. En primer lugar, redondeando cada elemento de la lista para completar, devuelve la suma de los cuadrados de los n\u00fameros de la lista dada.\nEjemplos:\nPara LST = [1,2,3] la salida es 14\nPara LST = [1,4,9] la salida es 98\nPara LST = [1,3,5,7] la salida es 84\nPara LST = [1.4,4.2,0] la salida es 17\nPara LST = [-2.4,1,1] la salida es 6\n\n\n"}
{"task_id": "HumanEval/134", "keyWords": "\nCrea una funci\u00f3n que devuelve True si el \u00faltimo car\u00e1cter tiene un valor alfab\u00e9tico y no es parte de una palabra, y False para el resto. Nota: \"palabra\" es un grupo de caracteres separados por espacios.\nPor ejemplo:\ncheck_if_last_char_is_a_letter(\"apple pie\") \u279e False\ncheck_if_last_char_is_a_letter(\"apple pi e\") \u279e True\ncheck_if_last_char_is_a_letter(\"apple pi e \") \u279e False\ncheck_if_last_char_is_a_letter(\"\") \u279e False\n"}
{"task_id": "HumanEval/135", "keyWords": "Crea una funci\u00f3n que devuelve un elemento que no sea mayor o igual al \u00edndice m\u00e1ximo del elemento que le precede. Si no existe tal elemento, se devuelve -1. El array dado no contiene valores duplicados.\n\nEjemplos:\nCan_arreglado ([1,2,4,3,5]) = 3\nCan_arreglado ([1,2,3]) = -1\n"}
{"task_id": "HumanEval/136", "keyWords": "\nCrea una funci\u00f3n que devuelve tuplas (a, b), donde 'a' es el mayor entero negativo de la lista y 'b' es el menor entero positivo de la lista. Si no hay n\u00fameros enteros positivos o negativos, se devuelve None.\nEjemplos:\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\nlargest_smallest_integers([]) == (None, None)\nlargest_smallest_integers([0]) == (None, None)\n"}
{"task_id": "HumanEval/137", "keyWords": "\nCrea una funci\u00f3n que acepta enteros, flotantes o cadenas para representar n\u00fameros reales y devuelve la variable m\u00e1s grande del tipo de variable dado. Si los valores son iguales, se devuelve ninguno.\nNota: si los n\u00fameros reales est\u00e1n representados como cadenas, los n\u00fameros de punto flotante pueden ser. O,\n\nCompare_one (1, 2.5) \u279e 2.5\n\u279e compare_one(1, \"2,3\") \u279e \"2,3\"\n\u279e compare_one(\"5,1\", \"6\") \u279e \"6\"\ncompare_one(\"1\", 1) \u279e None\n"}
{"task_id": "HumanEval/138", "keyWords": "3 encontrar si el n\u00famero dado n se puede escribir como la suma de exactamente 4 n\u00fameros pares positivos\nejemplo\nis_equal_to_sum_even(4) == False\nis_equal_to_sum_even(6) == False\nis_equal_to_sum_even(8) == True\n"}
{"task_id": "HumanEval/139", "keyWords": "El factorial brasile\u00f1o se define como:\nbrazilian_factorial(n) = n! * (n-1)! * (n-2)! *. * 1.\nCuando n > 0\n\nEjemplos:\n"}
{"task_id": "HumanEval/140", "keyWords": "\nDado un texto de cadena, reemplace todos los espacios en ella con guiones bajos,\nSi una cadena tiene m\u00e1s de dos espacios consecutivos, entonces reemplace todos los espacios consecutivos con -\n\nfix_spaces(\""}
{"task_id": "HumanEval/141", "keyWords": "Crea una funci\u00f3n que toma una cadena que representa el nombre del archivo y devuelve 's\u00ed' si el nombre del archivo es v\u00e1lido, 'No' de lo contrario. Un nombre de archivo se considera v\u00e1lido si y solo si se cumplen todas las siguientes condiciones\nConoce a:\n- el nombre del archivo no debe tener m\u00e1s de tres d\u00edgitos ('0'-'9').\n- el nombre del archivo contiene solo un punto '.'\n- la subcadena antes del punto no puede estar vac\u00eda y comenzar con una letra latina ('a'-'z' y 'a'-'z').\n- la subcadena despu\u00e9s del punto debe ser una de estas :[' TXT ', 'exe', 'DLL ']\nEjemplos:\nfile_name_check(\""}
{"task_id": "HumanEval/142", "keyWords": "\"\nEsta funci\u00f3n aceptar\u00e1 una lista de enteros. Para todos los elementos de la lista, la funci\u00f3n debe ser cuadrada si su \u00edndice es un m\u00faltiplo de 3, o c\u00fabica si su \u00edndice es un m\u00faltiplo de 4 en lugar de un m\u00faltiplo de 3. La funci\u00f3n no cambia los elementos de la lista cuyo \u00edndice no es un m\u00faltiplo de 3 o 4. La funci\u00f3n devuelve entonces la suma de todos los enteros.\n\nEjemplos:\nPara LST = [1,2,3] la salida deber\u00eda ser 6\nFor lst = []  the output should be 0\nPara LST = [-1,-5,2,-1,-5] la salida debe ser -126\n"}
{"task_id": "HumanEval/143", "keyWords": "\nLe da una cadena que representa una frase que contiene algunas palabras separadas por espacios. Debe devolver una cadena que contiene palabras de longitud prima en la frase original. El orden de las palabras en la nueva cadena debe ser el mismo que en la cadena original.\n\nEjemplo 1:\nEnter: sentence = \"esto es una prueba\"\nSalida: \"es\"\n\nEjemplo 2:\nEnter: sentence = \"lets go for swimming\"\nSalida: \"ir para\"\n\nRestricciones:\n* 1 <= len(sentence) <= 100\n* las frases solo contienen letras\n"}
{"task_id": "HumanEval/144", "keyWords": "Su tarea es implementar una funci\u00f3n x * n que simplifique la expresi\u00f3n. La funci\u00f3n devuelve True si x * n es un entero, False si no. Tanto x como n son representaciones de cadenas de fracciones en el siguiente formato :< numerador >/< denominador > donde tanto el numerador como el denominador son enteros positivos. Puede suponer que x y n son fracciones v\u00e1lidas con un denominador distinto de 0.\n\n"}
{"task_id": "HumanEval/145", "keyWords": "\nEscribe una funci\u00f3n para ordenar una lista dada de enteros en orden ascendente por la suma de d\u00edgitos. Nota: si hay varios elementos con la misma suma de d\u00edgitos, ordenarlos seg\u00fan su \u00edndice en la lista original.\n\nPor ejemplo:\n"}
{"task_id": "HumanEval/146", "keyWords": "Escribe una funci\u00f3n que toma un conjunto de n\u00fameros como entrada y devuelve n\u00fameros en el array que son mayores que 10 y el primer y \u00faltimo d\u00edgito son impares (1, 3, 5, 7, 9).\nPor ejemplo:\nspecialFilter([15, -73, 14, -15]) => 1\nspecialFilter([33, -2, -3, 45, 21, 109]) => 2\n"}
{"task_id": "HumanEval/147", "keyWords": "\nDado un entero positivo n, debe crear un array a de enteros de longitud n. Para cada i(1\u2264i\u2264n), el valor de a[i] = i * i-i + 1. Devuelve el n\u00famero de triples (a[i], a[j], a[k]) que son m\u00faltiplos de 3 y a[i] + a[j] + a[k].\nEjemplos:\nEntrada: n = 5\nSalida: 1 salida\nExplicaci\u00f3n:\na = [1, 3, 7, 13, 21]\nS\u00f3lo una tripla es (1, 7, 13).\n"}
{"task_id": "HumanEval/148", "keyWords": "\nNuestro sistema solar tiene ocho planetas: el m\u00e1s cercano al sol es mercurio, el siguiente es venus, luego la tierra, marte, j\u00fapiter, saturno, urano, neptuno. Escribe una funci\u00f3n que toma los nombres de los dos planetas como las cadenas planet1 y planet2. Esta funci\u00f3n devuelve una tupla que contiene todos los planetas cuyas \u00f3rbitas est\u00e1n situadas entre las \u00f3rbitas del planeta 1 y del planeta 2, en orden de proximidad al sol. Si planet1 o planet2 no es el nombre correcto del planeta, la funci\u00f3n debe devolver una tupla vac\u00eda.\nejemplo\nbf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ==> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n"}
{"task_id": "HumanEval/149", "keyWords": "Escribe una funci\u00f3n que acepte una lista de cadenas como argumento, elimine las cadenas de longitud impar que contiene y devuelva una lista de resultados ordenados en un cierto orden. La lista es siempre una lista de cadenas, no un array num\u00e9rico, que puede contener cadenas duplicadas. El orden de la lista debe ser ordenado por la longitud de cada palabra en orden ascendente, mientras que usted debe devolver la lista ordenada por esa regla. Si dos palabras tienen la misma longitud, se ordenan alfab\u00e9ticamente.\nEsta funci\u00f3n debe devolver una lista ordenada de cadenas. Se puede suponer que todas las palabras tienen la misma longitud.\nPor ejemplo:\nassert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\nassert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n"}
{"task_id": "HumanEval/150", "keyWords": "Un programa simple que deber\u00eda devolver el valor de x si n es un n\u00famero primo\n, de lo contrario debe devolver el valor de y.\n\n"}
{"task_id": "HumanEval/151", "keyWords": "\nDado una lista de n\u00fameros, devuelve la suma de los cuadrados de los n\u00fameros impares de la lista. Ignorar n\u00fameros negativos o no enteros.\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference([0]) == 0\n\nDevuelve 0 si la lista de entrada est\u00e1 vac\u00eda.\n"}
{"task_id": "HumanEval/152", "keyWords": "Creo que todos recordamos la sensaci\u00f3n de que por fin se conoc\u00eda el resultado de un acontecimiento algo esperado. Lo que sientes y piensas en ese momento definitivamente vale la pena anotar y comparar.\nSu tarea es determinar si una persona ha adivinado correctamente alg\u00fan resultado coincidencia. Se obtiene dos matrices de fracciones y conjeturas de igual longitud, donde cada \u00edndice muestra una coincidencia. Devuelve un array de la misma longitud, indicando la distancia que se conjetura cada vez. Si adivinan correctamente, el valor es 0, si no es as\u00ed, el valor es la diferencia absoluta entre el valor adivinado y la puntuaci\u00f3n.\n\n\nEjemplos:\n\nCompare ([1,2,3,4,5,1], [1,2,3,4,2, (2) - > [0,0,0,0,3,3]\nCompare ([0,5,0,0,0,4], [4,1,1,0,0, (2) - > [4,4,1,0,0,6]\n"}
{"task_id": "HumanEval/153", "keyWords": "Obtendr\u00e1s un nombre de clase (una cadena) y una columna extendida. Las extensiones se utilizar\u00e1n para cargar otras clases dentro de la clase. La intensidad de la extensi\u00f3n es la siguiente: sea CAP el n\u00famero de letras may\u00fasculas en el nombre de la extensi\u00f3n, y SM el n\u00famero de letras peque\u00f1as y peque\u00f1as en el nombre de la extensi\u00f3n, y la intensidad est\u00e1 dada por la fracci\u00f3n cap-sm. Deber\u00edas encontrar m\u00e1s y devuelve UN string, el formato siguiente: ClassName/StrongestExtensionName. Si hay dos o m\u00e1s extensiones de la misma intensidad, debe seleccionar la primera en la lista. Por ejemplo, si se le da \"Slices\" como clase y se le da una extensi\u00f3n de lista :['SErviNGSliCes', 'Cheese', 'StuFfed'] entonces debe\nDevuelve 'slices.servingslices' porque 'SErviNGSliCes' es la extensi\u00f3n m\u00e1s fuerte (su fuerza es -1).\nEjemplos:\nPara Strongest_Extension (', 'my_class [' AA', 'Be', 'CC']) = = 'my_class/AA\n"}
{"task_id": "HumanEval/154", "keyWords": "Dos palabras para ti. Devuelve True si la segunda palabra o cualquiera de sus rotaciones es una subcadena de la primera palabra\ncycpattern_check(\"abcd\",\"abd\") => False\ncycpattern_check(\"hello\",\"ell\") => True\ncycpattern_check(\"whassup\",\"psus\") => False\ncycpattern_check(\"abab\",\"baa\") => True\ncycpattern_check(\"efef\",\"eeff\") => False\ncycpattern_check(\"himenss\",\"simen\") => True\n\n"}
{"task_id": "HumanEval/155", "keyWords": "Dado un n\u00famero entero. Devuelve una tupla que contiene el n\u00famero de d\u00edgitos pares e impares, respectivamente.\n\n"}
{"task_id": "HumanEval/156", "keyWords": "\nDado un entero positivo, obtener su cadena de d\u00edgitos romanos equivalente; Y devuelto en min\u00fasculas.\nRestricci\u00f3n: 1 <= num <= 1000\n\nEjemplos:\n"}
{"task_id": "HumanEval/157", "keyWords": "\nDado la longitud de los tres lados de un tri\u00e1ngulo. Devuelve True si el tri\u00e1ngulo rect\u00e1ngulo se forma con 3 lados, False de lo contrario. Un tri\u00e1ngulo rect\u00e1ngulo es un tri\u00e1ngulo en el que uno de los \u00e1ngulos es rect\u00e1ngulo o es 90 grados.\nEjemplos:\nright_angle_triangle(3, 4, 5) == True\nright_angle_triangle(1, 2, 3) == False\n"}
{"task_id": "HumanEval/158", "keyWords": "Escribe una funci\u00f3n que acepte una lista de cadenas. Esta lista contiene diferentes palabras. Devuelve una palabra con un m\u00e1ximo de caracteres \u00fanicos. Si m\u00e1s de una cadena tiene el mayor n\u00famero de caracteres \u00fanicos, se devuelve la cadena que aparece primero en el orden lexicogr\u00e1fico.\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n"}
{"task_id": "HumanEval/159", "keyWords": "\nEres un conejo hambriento y has comido una cierta cantidad de zanahorias, pero ahora necesitas comer m\u00e1s para completar las tres comidas del d\u00eda. Si no hay suficiente cantidad de zanahorias restantes, se comen todas las zanahorias restantes, pero todav\u00eda tendr\u00e1 hambre.\n\nEjemplos:\n* eat(5, 6, 10) -> [11, 4]\n* eat(4, 8, 9) -> [12, 1]\n* eat(1, 10, 10) -> [11, 0]\n* eat(2, 11, 5) -> [7, 0]\n\nVariable:\n@number : integer\nLa cantidad de zanahorias que comes.\n@need : integer\n\u00bfCu\u00e1ntas zanahorias necesitas comer?\n@remaining : integer\nCantidad de zanahorias restantes en stock\n\nConstrain:\n* 0 <= number <= 1000\n* 0 <= need <= 1000\n* 0 <= remaining <= 1000\n\nDivi\u00e9rtete :)\n"}
{"task_id": "HumanEval/160", "keyWords": "\nDado dos listas, operadores y operandos. La primera lista tiene operaciones algebraicas b\u00e1sicas, y la segunda lista es una lista de enteros. Dos listas dadas son usadas para construir una expresi\u00f3n algebraica y devolver una evaluaci\u00f3n de esa expresi\u00f3n.\n\nOperaciones algebraicas b\u00e1sicas:\nA\u00f1adir (+)\nSustracci\u00f3n (-)\nMultiplicaci\u00f3n (*)\nDivisibilidad (//)\nExponenciaci\u00f3n (**)\n\n"}
{"task_id": "HumanEval/161", "keyWords": "Te doy una s. Si s[i] es una letra, invierta may\u00fasculas y min\u00fasculas de la letra. De lo contrario, d\u00e9jenlo como est\u00e1. Si la cadena no contiene letras, invierte la cadena. La funci\u00f3n debe devolver la cadena resultante.\nejemplo\nsolve(\"1234\") = \"4321\"\nsolve(\"ab\") = \"AB\"\nsolve(\"#a@C\") = \"#A@c\"\n"}
{"task_id": "HumanEval/162", "keyWords": "\nDada la cadena 'text', se devuelve su equivalente hash md5. Si 'text' es una cadena vac\u00eda, se devuelve None.\n\n"}
{"task_id": "HumanEval/163", "keyWords": "\nDado dos enteros positivos a y b, devuelve el n\u00famero par entre a y b, en orden ascendente.\n\nPor ejemplo:\ngenerate_integers(2, 8) => [2, 4, 6, 8]\ngenerate_integers(8, 2) => [2, 4, 6, 8]\ngenerate_integers(10, 14) => [10, 12, 14]\n"}
