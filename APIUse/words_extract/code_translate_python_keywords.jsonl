{"task_id": "Python/0", "keyWords": "has_close_elements(numbers, threshold), enumerate(numbers), enumerate(numbers), (idx != idx2), (distance < threshold)"}
{"task_id": "Python/1", "keyWords": "separate_paren_groups(paren_string), paren_string, (c == '('), (c == ')'), (current_depth == 0)"}
{"task_id": "Python/2", "keyWords": "truncate_number(number)"}
{"task_id": "Python/3", "keyWords": "below_zero(operations), operations, (balance < 0)"}
{"task_id": "Python/4", "keyWords": "mean_absolute_deviation(numbers)"}
{"task_id": "Python/5", "keyWords": "intersperse(numbers, delimeter), numbers[:-1], (not numbers)"}
{"task_id": "Python/6", "keyWords": "parse_nested_parens(paren_string), parse_paren_group(s), s, (c == '(')"}
{"task_id": "Python/7", "keyWords": "filter_by_substring(strings, substring)"}
{"task_id": "Python/8", "keyWords": "sum_product(numbers), numbers"}
{"task_id": "Python/9", "keyWords": "rolling_max(numbers), numbers, (running_max is None)"}
{"task_id": "Python/10", "keyWords": "is_palindrome(string), make_palindrome(string), (not string)"}
{"task_id": "Python/11", "keyWords": "string_xor(a, b), xor(i, j), (i == j)"}
{"task_id": "Python/12", "keyWords": "longest(strings), strings, (not strings), (len(s) == maxlen)"}
{"task_id": "Python/13", "keyWords": "greatest_common_divisor(a, b)"}
{"task_id": "Python/14", "keyWords": "all_prefixes(string), range(len(string))"}
{"task_id": "Python/15", "keyWords": "string_sequence(n)"}
{"task_id": "Python/16", "keyWords": "count_distinct_characters(string)"}
{"task_id": "Python/17", "keyWords": "parse_music(music_string)"}
{"task_id": "Python/18", "keyWords": "how_many_times(string, substring), range(len(string) - len(substring) + 1), (string[i:i + len(substring)] == substring)"}
{"task_id": "Python/19", "keyWords": "sort_numbers(numbers)"}
{"task_id": "Python/20", "keyWords": "find_closest_elements(numbers), enumerate(numbers), enumerate(numbers), (idx != idx2), (distance is None), (new_distance < distance)"}
{"task_id": "Python/21", "keyWords": "rescale_to_unit(numbers)"}
{"task_id": "Python/22", "keyWords": "filter_integers(values)"}
{"task_id": "Python/23", "keyWords": "strlen(string)"}
{"task_id": "Python/24", "keyWords": "largest_divisor(n), reversed(range(n)), (n % i == 0)"}
{"task_id": "Python/25", "keyWords": "factorize(n), (n > 1), (n % i == 0)"}
{"task_id": "Python/26", "keyWords": "remove_duplicates(numbers)"}
{"task_id": "Python/27", "keyWords": "flip_case(string)"}
{"task_id": "Python/28", "keyWords": "concatenate(strings)"}
{"task_id": "Python/29", "keyWords": "filter_by_prefix(strings, prefix)"}
{"task_id": "Python/30", "keyWords": "get_positive(l)"}
{"task_id": "Python/31", "keyWords": "is_prime(n), range(2, n - 1), (n < 2), (n % k == 0)"}
{"task_id": "Python/32", "keyWords": "poly(xs, x), find_zero(xs), (poly(xs, center) * poly(xs, begin) > 0)"}
{"task_id": "Python/33", "keyWords": "sort_third(l)"}
{"task_id": "Python/34", "keyWords": "unique(l)"}
{"task_id": "Python/35", "keyWords": "max_element(l), l, (e > m)"}
{"task_id": "Python/36", "keyWords": "fizz_buzz(n), range(n), s, (i % 11 == 0 or i % 13 == 0)"}
{"task_id": "Python/37", "keyWords": "sort_even(l), zip(evens, odds), (len(evens) > len(odds))"}
{"task_id": "Python/38", "keyWords": "encode_cyclic(s), decode_cyclic(s)"}
{"task_id": "Python/39", "keyWords": "prime_fib(n), is_prime(p), range(2, min(int(math.sqrt(p)) + 1, p - 1)), (p < 2), is_prime(f[-1]), (n == 0), (p % k == 0)"}
{"task_id": "Python/40", "keyWords": "triples_sum_to_zero(l), range(len(l)), range(i + 1, len(l)), range(j + 1, len(l)), (l[i] + l[j] + l[k] == 0)"}
{"task_id": "Python/41", "keyWords": "car_race_collision(n)"}
{"task_id": "Python/42", "keyWords": "incr_list(l)"}
{"task_id": "Python/43", "keyWords": "pairs_sum_to_zero(l), enumerate(l), range(i + 1, len(l)), (l1 + l[j] == 0)"}
{"task_id": "Python/44", "keyWords": "change_base(x, base)"}
{"task_id": "Python/45", "keyWords": "triangle_area(a, h)"}
{"task_id": "Python/46", "keyWords": "fib4(n), range(4, n + 1), (n < 4)"}
{"task_id": "Python/47", "keyWords": "median(l), (len(l) % 2 == 1)"}
{"task_id": "Python/48", "keyWords": "is_palindrome(text), range(len(text)), (text[i] != text[len(text) - 1 - i])"}
{"task_id": "Python/49", "keyWords": "modp(n, p), range(n)"}
{"task_id": "Python/50", "keyWords": "encode_shift(s), decode_shift(s)"}
{"task_id": "Python/51", "keyWords": "remove_vowels(text)"}
{"task_id": "Python/52", "keyWords": "below_threshold(l, t), l, (e >= t)"}
{"task_id": "Python/53", "keyWords": "add(x, y)"}
{"task_id": "Python/54", "keyWords": "same_chars(s0, s1)"}
{"task_id": "Python/55", "keyWords": "fib(n), (n == 0), (n == 1)"}
{"task_id": "Python/56", "keyWords": "correct_bracketing(brackets), brackets, (b == '<'), (depth < 0)"}
{"task_id": "Python/57", "keyWords": "monotonic(l), (l == sorted(l) or l == sorted(l, reverse=True))"}
{"task_id": "Python/58", "keyWords": "common(l1, l2), l1, l2, (e1 == e2)"}
{"task_id": "Python/59", "keyWords": "largest_prime_factor(n), is_prime(k), range(2, n + 1), range(2, k - 1), (k < 2), (n % j == 0 and is_prime(j)), (k % i == 0)"}
{"task_id": "Python/60", "keyWords": "sum_to_n(n)"}
{"task_id": "Python/61", "keyWords": "correct_bracketing(brackets), brackets, (b == '('), (depth < 0)"}
{"task_id": "Python/62", "keyWords": "derivative(xs)"}
{"task_id": "Python/63", "keyWords": "fibfib(n), (n == 0), (n == 1), (n == 2)"}
{"task_id": "Python/64", "keyWords": "vowels_count(s), (s[-1] == 'y' or s[-1] == 'Y')"}
{"task_id": "Python/65", "keyWords": "circular_shift(x, shift), (shift > len(s))"}
{"task_id": "Python/66", "keyWords": "digitSum(s), (s == '')"}
{"task_id": "Python/67", "keyWords": "fruit_distribution(s, n), s.split(' '), i.isdigit()"}
{"task_id": "Python/68", "keyWords": "pluck(arr), (len(arr) == 0), (evens == [])"}
{"task_id": "Python/69", "keyWords": "search(lst), lst, range(1, len(frq)), (frq[i] >= i)"}
{"task_id": "Python/70", "keyWords": "strange_sort_list(lst)"}
{"task_id": "Python/71", "keyWords": "triangle_area(a, b, c), (a + b <= c or a + c <= b or b + c <= a)"}
{"task_id": "Python/72", "keyWords": "will_it_fly(q, w), (sum(q) > w), (q[i] != q[j])"}
{"task_id": "Python/73", "keyWords": "smallest_change(arr), range(len(arr) // 2), (arr[i] != arr[len(arr) - i - 1])"}
{"task_id": "Python/74", "keyWords": "total_match(lst1, lst2), lst1, lst2, (l1 <= l2)"}
{"task_id": "Python/75", "keyWords": "is_multiply_prime(a), is_prime(n), range(2, 101), range(2, n), range(2, 101), range(2, 101), (not is_prime(i)), (n % j == 0), (not is_prime(j)), (not is_prime(k)), (i * j * k == a)"}
{"task_id": "Python/76", "keyWords": "is_simple_power(x, n), (n == 1)"}
{"task_id": "Python/77", "keyWords": "iscube(a)"}
{"task_id": "Python/78", "keyWords": "hex_key(num), range(0, len(num)), (num[i] in primes)"}
{"task_id": "Python/79", "keyWords": "decimal_to_binary(decimal)"}
{"task_id": "Python/80", "keyWords": "is_happy(s), range(len(s) - 2), (len(s) < 3), (s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2])"}
{"task_id": "Python/81", "keyWords": "numerical_letter_grade(grades), grades, (gpa == 4.0), (gpa > 3.7), (gpa > 3.3), (gpa > 3.0), (gpa > 2.7), (gpa > 2.3), (gpa > 2.0), (gpa > 1.7), (gpa > 1.3), (gpa > 1.0), (gpa > 0.7), (gpa > 0.0)"}
{"task_id": "Python/82", "keyWords": "prime_length(string), range(2, l), (l == 0 or l == 1), (l % i == 0)"}
{"task_id": "Python/83", "keyWords": "starts_one_ends(n), (n == 1)"}
{"task_id": "Python/84", "keyWords": "solve(N)"}
{"task_id": "Python/85", "keyWords": "add(lst)"}
{"task_id": "Python/86", "keyWords": "anti_shuffle(s)"}
{"task_id": "Python/87", "keyWords": "get_row(lst, x)"}
{"task_id": "Python/88", "keyWords": "sort_array(array)"}
{"task_id": "Python/89", "keyWords": "encrypt(s), s, (c in d)"}
{"task_id": "Python/90", "keyWords": "next_smallest(lst)"}
{"task_id": "Python/91", "keyWords": "is_bored(S)"}
{"task_id": "Python/92", "keyWords": "any_int(x, y, z), (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)), (x + y == z or x + z == y or y + z == x)"}
{"task_id": "Python/93", "keyWords": "encode(message)"}
{"task_id": "Python/94", "keyWords": "skjkasdkd(lst), isPrime(n), range(2, int(n ** 0.5) + 1), (lst[i] > maxx and isPrime(lst[i])), (n % i == 0)"}
{"task_id": "Python/95", "keyWords": "check_dict_case(dict), dict.keys(), (len(dict.keys()) == 0), (isinstance(key, str) == False), (state == 'start'), key.isupper(), (state == 'upper' and not key.isupper() or state == 'lower' and not key.\n    islower()), key.islower()"}
{"task_id": "Python/96", "keyWords": "count_up_to(n), range(2, n), range(2, i), is_prime, (i % j == 0)"}
{"task_id": "Python/97", "keyWords": "multiply(a, b)"}
{"task_id": "Python/98", "keyWords": "count_upper(s), range(0, len(s), 2), (s[i] in 'AEIOU')"}
{"task_id": "Python/99", "keyWords": "closest_integer(value), (value.count('.') == 1), (value[-2:] == '.5'), (num > 0), (len(value) > 0)"}
{"task_id": "Python/100", "keyWords": "make_a_pile(n)"}
{"task_id": "Python/101", "keyWords": "words_string(s), s, (not s), (letter == ',')"}
{"task_id": "Python/102", "keyWords": "choose_num(x, y), (x > y), (y % 2 == 0), (x == y)"}
{"task_id": "Python/103", "keyWords": "rounded_avg(n, m), range(n, m + 1), (m < n)"}
{"task_id": "Python/104", "keyWords": "unique_digits(x), x, all(int(c) % 2 == 1 for c in str(i))"}
{"task_id": "Python/105", "keyWords": "by_length(arr), sorted_arr"}
{"task_id": "Python/106", "keyWords": "f(n), range(1, n + 1), range(1, i + 1), range(1, i + 1), (i % 2 == 0)"}
{"task_id": "Python/107", "keyWords": "even_odd_palindrome(n), is_palindrome(n), range(1, n + 1), (i % 2 == 1 and is_palindrome(i)), (i % 2 == 0 and is_palindrome(i))"}
{"task_id": "Python/108", "keyWords": "count_nums(arr), digits_sum(n), (n < 0)"}
{"task_id": "Python/109", "keyWords": "move_one_ball(arr), range(len(arr)), (len(arr) == 0), (my_arr[i] != sorted_array[i])"}
{"task_id": "Python/110", "keyWords": "exchange(lst1, lst2), lst1, lst2, (even >= odd), (i % 2 == 1), (i % 2 == 0)"}
{"task_id": "Python/111", "keyWords": "histogram(test), list1, list1, (t > 0), (list1.count(i) > t and i != ''), (list1.count(i) == t)"}
{"task_id": "Python/112", "keyWords": "reverse_delete(s, c)"}
{"task_id": "Python/113", "keyWords": "odd_count(lst), lst"}
{"task_id": "Python/114", "keyWords": "minSubArraySum(nums), nums, (max_sum == 0), (s < 0)"}
{"task_id": "Python/115", "keyWords": "max_fill(grid, capacity)"}
{"task_id": "Python/116", "keyWords": "sort_array(arr)"}
{"task_id": "Python/117", "keyWords": "select_words(s, n), s.split(), range(0, len(word)), (n_consonants == n), (word[i].lower() not in ['a', 'e', 'i', 'o', 'u'])"}
{"task_id": "Python/118", "keyWords": "get_closest_vowel(word), range(len(word) - 2, 0, -1), (len(word) < 3), (word[i] in vowels), (word[i + 1] not in vowels and word[i - 1] not in vowels)"}
{"task_id": "Python/119", "keyWords": "match_parens(lst), check(s), s, (i == '('), (val < 0)"}
{"task_id": "Python/120", "keyWords": "maximum(arr, k), (k == 0)"}
{"task_id": "Python/121", "keyWords": "solution(lst)"}
{"task_id": "Python/122", "keyWords": "add_elements(arr, k)"}
{"task_id": "Python/123", "keyWords": "get_odd_collatz(n), (n % 2 == 0), (n % 2 == 0), (n % 2 == 1)"}
{"task_id": "Python/124", "keyWords": "valid_date(date), (month < 1 or month > 12), (month in [1, 3, 5, 7, 8, 10, 12] and day < 1 or day > 31), (month in [4, 6, 9, 11] and day < 1 or day > 30), (month == 2 and day < 1 or day > 29)"}
{"task_id": "Python/125", "keyWords": "split_words(txt), (' ' in txt), (',' in txt)"}
{"task_id": "Python/126", "keyWords": "is_sorted(lst), lst, any(count_digit[i] > 2 for i in lst), all(lst[i - 1] <= lst[i] for i in range(1, len(lst)))"}
{"task_id": "Python/127", "keyWords": "intersection(interval1, interval2), is_prime(num), range(2, num), (length > 0 and is_prime(length)), (num == 1 or num == 0), (num == 2), (num % i == 0)"}
{"task_id": "Python/128", "keyWords": "prod_signs(arr), (not arr)"}
{"task_id": "Python/129", "keyWords": "minPath(grid, k), range(n), range(k), range(n), (i % 2 == 0), (grid[i][j] == 1), (i != 0), (j != 0), (i != n - 1), (j != n - 1)"}
{"task_id": "Python/130", "keyWords": "tri(n), range(2, n + 1), (n == 0), (i % 2 == 0)"}
{"task_id": "Python/131", "keyWords": "digits(n), str(n), (odd_count == 0), (int_digit % 2 == 1)"}
{"task_id": "Python/132", "keyWords": "is_nested(string), range(len(string)), opening_bracket_index, (string[i] == '['), (i < l and idx < closing_bracket_index[i])"}
{"task_id": "Python/133", "keyWords": "sum_squares(lst), lst"}
{"task_id": "Python/134", "keyWords": "check_if_last_char_is_a_letter(txt)"}
{"task_id": "Python/135", "keyWords": "can_arrange(arr), (arr[i] < arr[i - 1])"}
{"task_id": "Python/136", "keyWords": "largest_smallest_integers(lst)"}
{"task_id": "Python/137", "keyWords": "compare_one(a, b), isinstance(temp_a, str), isinstance(temp_b, str), (float(temp_a) == float(temp_b))"}
{"task_id": "Python/138", "keyWords": "is_equal_to_sum_even(n)"}
{"task_id": "Python/139", "keyWords": "special_factorial(n), range(1, n + 1)"}
{"task_id": "Python/140", "keyWords": "fix_spaces(text), (end - start > 2), (text[i] == ' '), (end - start > 0), (end - start > 2), (end - start > 0)"}
{"task_id": "Python/141", "keyWords": "file_name_check(file_name), (len(lst) != 2), (not lst[1] in suf), (len(lst[0]) == 0), (not lst[0][0].isalpha()), (t > 3)"}
{"task_id": "Python/142", "keyWords": "sum_squares(lst), range(len(lst)), (i % 3 == 0), (i % 4 == 0 and i % 3 != 0)"}
{"task_id": "Python/143", "keyWords": "words_in_sentence(sentence), sentence.split(), range(2, len(word)), (len(word) == 1), (flg == 0 or len(word) == 2), (len(word) % i == 0)"}
{"task_id": "Python/144", "keyWords": "simplify(x, n), (numerator / denom == int(numerator / denom))"}
{"task_id": "Python/145", "keyWords": "order_by_points(nums), digits_sum(n), (n < 0)"}
{"task_id": "Python/146", "keyWords": "specialFilter(nums), nums, (num > 10), (int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in\n    odd_digits)"}
{"task_id": "Python/147", "keyWords": "get_max_triples(n), range(n), range(i + 1, n), range(j + 1, n), ((A[i] + A[j] + A[k]) % 3 == 0)"}
{"task_id": "Python/148", "keyWords": "bf(planet1, planet2), (planet1 not in planet_names or planet2 not in planet_names or planet1 ==\n    planet2), (planet1_index < planet2_index)"}
{"task_id": "Python/149", "keyWords": "sorted_list_sum(lst), lst, (len(i) % 2 == 0)"}
{"task_id": "Python/150", "keyWords": "x_or_y(n, x, y), range(2, n), (n == 1), (n % i == 0)"}
{"task_id": "Python/151", "keyWords": "double_the_difference(lst)"}
{"task_id": "Python/152", "keyWords": "compare(game, guess)"}
{"task_id": "Python/153", "keyWords": "Strongest_Extension(class_name, extensions), extensions, (val > my_val)"}
{"task_id": "Python/154", "keyWords": "cycpattern_check(a, b), range(len(a) - l + 1), range(l + 1), (a[i:i + l] == pat[j:j + l])"}
{"task_id": "Python/155", "keyWords": "even_odd_count(num), str(abs(num)), (int(i) % 2 == 0)"}
{"task_id": "Python/156", "keyWords": "int_to_mini_roman(number)"}
{"task_id": "Python/157", "keyWords": "right_angle_triangle(a, b, c)"}
{"task_id": "Python/158", "keyWords": "find_max(words)"}
{"task_id": "Python/159", "keyWords": "eat(number, need, remaining), (need <= remaining)"}
{"task_id": "Python/160", "keyWords": "do_algebra(operator, operand), zip(operator, operand[1:])"}
{"task_id": "Python/161", "keyWords": "solve(s), s, new_str, (flg == 0), i.isalpha()"}
{"task_id": "Python/162", "keyWords": "string_to_md5(text)"}
{"task_id": "Python/163", "keyWords": "generate_integers(a, b)"}
