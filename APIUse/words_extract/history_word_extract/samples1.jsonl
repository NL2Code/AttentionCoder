{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n# Running the test cases\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # \u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u5b58\u50a8\u5206\u9694\u540e\u7684\u5b57\u7b26\u4e32\n    result = []\n\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u6808\uff0c\u7528\u4e8e\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5339\u914d\n    stack = []\n\n    # \u904d\u5386\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in paren_string:\n        # \u5982\u679c\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u5c06\u5176\u538b\u5165\u6808\u4e2d\n        if char == '(':\n            stack.append(char)\n        # \u5982\u679c\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5224\u65ad\u662f\u5426\u5339\u914d\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                # \u62ec\u53f7\u4e0d\u5339\u914d\uff0c\u5c06\u5176\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c\uff0c\u4ee5\u5206\u9694\u4e0d\u540c\u7684\u7ec4\n                stack.append(' ')\n        # \u5982\u679c\u5b57\u7b26\u4e0d\u662f\u62ec\u53f7\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u6808\u4e2d\n        else:\n            stack.append(char)\n    \n    # \u5c06\u6808\u4e2d\u5269\u4f59\u7684\u5b57\u7b26\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n    result.append(''.join(stack))\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)  # \u83b7\u53d6\u6574\u6570\u90e8\u5206\n    fractional_part = number - integer_part  # \u83b7\u53d6\u5c0f\u6570\u90e8\u5206\n    return fractional_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u6808\u6765\u5b9e\u73b0\u3002\u6211\u4eec\u53ef\u4ee5\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u9047\u5230\u5de6\u62ec\u53f7 '(' \u5c31\u5c06\u5176\u538b\u5165\u6808\u4e2d\uff0c\u9047\u5230\u53f3\u62ec\u53f7 ')' \u5c31\u5c06\u6808\u9876\u5143\u7d20\u5f39\u51fa\u3002\u5728\u904d\u5386\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u8bb0\u5f55\u6808\u7684\u6700\u5927\u5927\u5c0f\uff0c\u5373\u4e3a\u62ec\u53f7\u5d4c\u5957\u7684\u6700\u6df1\u5c42\u3002\n\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u4ee3\u7801\uff1a\n\n```python\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_depth = 0\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n\n    while stack:\n        stack.pop()  # \u6e05\u7a7a\u6808\n\n    return [max_depth] * len(paren_string.split())\n\n\n# \u6d4b\u8bd5\u793a\u4f8b\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))\n```\n\n\u8f93\u51fa\u7ed3\u679c\u4e3a\uff1a\n\n```\n[2, 3, 1, 3]\n```"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \u8fd4\u56de\u4e00\u4e2a\u7531\u5217\u8868\u4e2d\u6240\u6709\u6574\u6570\u7684\u548c\u4e0e\u4e58\u79ef\u7ec4\u6210\u7684\u5143\u7ec4\u3002\u7a7a\u5217\u8868\u7684\u548c\u5e94\u8be5\u7b49\u4e8e0\uff0c\u7a7a\u5217\u8868\u7684\u79ef\u5e94\u8be5\u7b49\u4e8e1\u3002\n\n    :param numbers: \u6574\u6570\u5217\u8868\n    :return: \u6574\u6570\u5217\u8868\u7684\u548c\u4e0e\u4e58\u79ef\u7ec4\u6210\u7684\u5143\u7ec4\n    \"\"\"\n    if len(numbers) == 0:\n        return 0, 1\n\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n\n    return s, p"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i < len(numbers) - 1:\n            result.append(max(numbers[i-1:i+2]))\n        else:\n            result.append(max(numbers[i-1:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" \u6d4b\u8bd5\u7ed9\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587 \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \u67e5\u627e\u4ee5\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u6700\u77ed\u56de\u6587\u3002\n    \u7b97\u6cd5\u601d\u8def\u7b80\u5355:\n        -\u67e5\u627e\u6240\u63d0\u4f9b\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u56de\u6587\u540e\u7f00\u3002\n        -\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u6dfb\u52a0\u4e0e\u56de\u6587\u540e\u7f00\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u524d\u7f00\u76f8\u53cd\u7684\u5b57\u7b26\u4e32\u3002\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # \u5982\u679c\u5b57\u7b26\u4e32\u672c\u8eab\u5c31\u662f\u56de\u6587\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5b57\u7b26\u4e32\n    if is_palindrome(string):\n        return string\n    \n    # \u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u67e5\u627e\u6700\u957f\u7684\u56de\u6587\u540e\u7f00\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            # \u8fd4\u56de\u6dfb\u52a0\u56de\u6587\u540e\u7f00\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u524d\u7f00\u76f8\u53cd\u7684\u5b57\u7b26\u4e32\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" \u8f93\u5165\u662f\u4e24\u4e2a\u5b57\u7b26\u4e32a\u548cb\uff0c\u53ea\u67091\u548c0\u3002\u5bf9\u8fd9\u4e9b\u8f93\u5165\u6267\u884c\u4e8c\u8fdb\u5236\u5f02\u6216\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"The two strings must have the same length.\")\n    result = \"\"\n    for c1, c2 in zip(a, b):\n        result += str(int(c1) ^ int(c2))\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \u8fd4\u56de\u4e24\u4e2a\u6574\u6570a\u548cb\u7684\u6700\u5927\u516c\u7ea6\u6570 \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(x) for x in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\u7528\u4e8e\u5b58\u50a8\u4e0d\u540c\u7684\u5b57\u7b26\n    distinct_chars = set()\n\n    # \u904d\u5386\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in string:\n        # \u5c06\u5b57\u7b26\u7684\u5c0f\u5199\u5f62\u5f0f\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n        distinct_chars.add(char.lower())\n    \n    # \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0d\u540c\u5b57\u7b26\u7684\u6570\u91cf\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n\n    music_list = music_string.split()\n    for symbol in music_list:\n        if symbol == 'o':\n            beats.append(4)\n        elif symbol == 'o|':\n            beats.append(2)\n        elif symbol == '.|':\n            beats.append(1)\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while substring in string[start:]:\n        count += 1\n        start = string.index(substring, start) + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # \u5c06\u6570\u5b57\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    numbers.sort()\n\n    # \u521d\u59cb\u5316\u53d8\u91cf\u6765\u5b58\u50a8\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u6570\u5b57\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n\n    # \u904d\u5386\u6570\u5b57\u5217\u8868\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # \u8ba1\u7b97\u5f53\u524d\u4e24\u4e2a\u6570\u5b57\u7684\u5dee\u503c\n            difference = abs(numbers[i] - numbers[j])\n\n            # \u5982\u679c\u5f53\u524d\u5dee\u503c\u5c0f\u4e8e\u6700\u5c0f\u5dee\u503c\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u5dee\u503c\u548c\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u6570\u5b57\n            if difference < min_difference:\n                min_difference = difference\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_num) / (max_num - min_num)\n        scaled_numbers.append(scaled_num)\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\u8fd4\u56de\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570n\uff0c\u6c42\u80fd\u5c06n\u6574\u9664\u7684\u6700\u5927\u7684\u5c0f\u4e8en\u7684\u6570\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1  # \u5982\u679c\u6ca1\u6709\u627e\u5230\u80fd\u6574\u9664n\u7684\u6570\uff0c\u5219\u8fd4\u56de-1\n\nprint(largest_divisor(15))  # \u8f93\u51fa5"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\u548c\u4e00\u4e2a\u7a7a\u96c6\u5408\u6765\u5220\u9664\u91cd\u590d\u5143\u7d20\u3002\u7136\u540e\u904d\u5386\u8f93\u5165\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u4f46\u53ea\u6709\u5982\u679c\u8be5\u5143\u7d20\u4e0d\u5728\u96c6\u5408\u4e2d\u65f6\u624d\u6dfb\u52a0\u3002\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u5217\u8868\u3002\n\n\u4e0b\u9762\u662f\u5b9e\u73b0\u4ee3\u7801\uff1a\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n\n\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u5176\u4e2dn\u662f\u5217\u8868\u7684\u957f\u5ea6\u3002\u5b83\u4f7f\u7528\u4e86\u4e00\u4e2a\u8f85\u52a9\u96c6\u5408\u6765\u8bb0\u5f55\u5df2\u7ecf\u51fa\u73b0\u8fc7\u7684\u5143\u7d20\uff0c\u56e0\u6b64\u7a7a\u95f4\u590d\u6742\u5ea6\u662fO(m)\uff0c\u5176\u4e2dm\u662f\u5217\u8868\u4e2d\u4e0d\u91cd\u590d\u5143\u7d20\u7684\u4e2a\u6570\u3002"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\nprint(concatenate([]))\nprint(concatenate(['a', 'b', 'c']))"}
{"task_id": "HumanEval/29", "completion": "result = []\nfor string in strings:\n    if string.startswith(prefix):\n        result.append(string)\nreturn result"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\u53ea\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6b63\u6570\u3002\n\n    Args:\n        l (list): \u8f93\u5165\u7684\u5217\u8868\n\n    Returns:\n        list: \u4ec5\u5305\u542b\u6b63\u6570\u7684\u5217\u8868\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\u5b8c\u5168\u6b63\u786e\u3002\u5b83\u662f\u4e00\u4e2a\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u7684\u51fd\u6570\u3002\u901a\u8fc7\u5229\u7528\u4e0d\u65ad\u904d\u5386\u6574\u6570\u9664\u6570\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u5bf9\u7ed9\u5b9a\u7684\u6570\u9010\u4e2a\u8fdb\u884c\u6c42\u4f59\u64cd\u4f5c\u3002\u5982\u679c\u627e\u5230\u67d0\u4e2a\u6574\u9664\u6570\uff0c\u5373\u8bf4\u660e\u8fd9\u4e2a\u6570\u4e0d\u662f\u7d20\u6570\uff0c\u8fd4\u56deFalse\uff1b\u5426\u5219\uff0c\u5982\u679c\u5faa\u73af\u904d\u5386\u5b8c\u6210\uff0c\u5219\u8bf4\u660e\u8fd9\u4e2a\u6570\u662f\u7d20\u6570\uff0c\u8fd4\u56deTrue\u3002\n\n\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u4f7f\u7528doctest\u6a21\u5757\u63d0\u4f9b\u7684\u6587\u6863\u6d4b\u8bd5\u529f\u80fd\uff0c\u53ef\u4ee5\u81ea\u52a8\u5bf9\u51fd\u6570\u8fdb\u884c\u6d4b\u8bd5\u3002\u5728\u51fd\u6570\u5b9a\u4e49\u4e0b\u65b9\u4f7f\u7528\u591a\u884c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7f16\u5199\u4e86\u51e0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5305\u62ec\u4e00\u4e2a\u7ed9\u5b9a\u7684\u53c2\u6570\u548c\u9884\u671f\u7684\u8f93\u51fa\u7ed3\u679c\u3002\u8fd0\u884c\u6d4b\u8bd5\u4f1a\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u90fd\u901a\u8fc7\u4e86\uff0c\u51fd\u6570\u5c31\u662f\u6b63\u786e\u7684\u3002"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    # \u9996\u5148\u5224\u65adxs\u957f\u5ea6\u662f\u5426\u4e3a\u5076\u6570\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even length\")\n    \n    # \u5224\u65ad\u6700\u5927\u7cfb\u6570\u662f\u5426\u4e3a\u96f6\n    if xs[-1] == 0:\n        raise ValueError(\"The largest coefficient cannot be zero\")\n    \n    # \u5bfb\u627e0\u70b9\n    zeros = []\n    for i in range(-100, 100):\n        x = i / 10\n        if poly(xs, x) == 0:\n            zeros.append(round(x, 1))\n    return zeros\n\n# \u6d4b\u8bd5\nprint(find_zero([1, 2]))  # [-0.5]\nprint(find_zero([-6, 11, -6, 1]))  # [1.0, 2.0, 3.0]"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    non_divisible = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    \n    new_list = []\n    j = 0\n    k = 0\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(divisible[j])\n            j += 1\n        else:\n            new_list.append(non_divisible[k])\n            k += 1\n    \n    return new_list\n\nprint(sort_third([1, 2, 3]))\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\u8fd4\u56de\u5217\u8868\u4e2d\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u5bf9\u5176\u6392\u5e8f\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\u8fd4\u56de\u5217\u8868\u4e2d\u6700\u5927\u7684\u5143\u7d20\u3002\"\"\"\n    return max(l)\n\nprint(max_element([1, 2, 3]))\nprint(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n\nprint(fizz_buzz(50))\nprint(fizz_buzz(78))\nprint(fizz_buzz(79))"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = []\n    odd_indices = []\n    result = []\n\n    # \u904d\u5386\u5217\u8868l\uff0c\u5c06\u5947\u5076\u7d22\u5f15\u5206\u522b\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5217\u8868\u4e2d\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(i)\n\n    # \u5bf9\u5076\u6570\u7d22\u5f15\u7684\u503c\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\n    even_indices = sorted(even_indices)\n\n    # \u6839\u636e\u5947\u5076\u7d22\u5f15\u7684\u4f4d\u7f6e\uff0c\u6784\u5efa\u7ed3\u679c\u5217\u8868\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(l[i])\n\n    return result"}
{"task_id": "HumanEval/38", "completion": "    # \u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u7ec4\u3002\u6bcf\u4e2a\u957f\u5ea6\u4e3a3\u3002\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # \u5faa\u73af\u6bcf\u7ec4\u4e2d\u7684\u5143\u7d20\u3002\u9664\u975e\u7ec4\u7684\u5143\u7d20\u5c11\u4e8e3\u4e2a\u3002\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib\u8fd4\u56de\u6590\u6ce2\u90a3\u5951\u6570\u4e2d\u7684\u7b2cn\u4e2a\u7d20\u6570\u3002\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib = [1, 1]\n    count = 2\n    while count < n:\n        next_num = fib[-1] + fib[-2]\n        if is_prime(next_num):\n            count += 1\n        fib.append(next_num)\n    return fib[-1]\n"}
{"task_id": "HumanEval/40", "completion": "\u8fd9\u4e2a\u51fd\u6570\u7684\u95ee\u9898\u63cf\u8ff0\u5f97\u5f88\u6e05\u695a\uff0c\u662f\u8981\u5224\u65ad\u5217\u8868\u4e2d\u662f\u5426\u5b58\u5728\u4e09\u4e2a\u4e0d\u540c\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u5b83\u4eec\u7684\u548c\u4e3a\u96f6\u3002\u6211\u6765\u7f16\u5199\u4e00\u4e0b\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\uff1a\n\n```python\ndef triples_sum_to_zero(l: list):\n    # \u901a\u8fc7\u4e24\u5c42\u5faa\u73af\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                # \u5982\u679c\u627e\u5230\u4e00\u7ec4\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u4e2a\u5143\u7d20\uff0c\u8fd4\u56deTrue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u4e2a\u5143\u7d20\uff0c\u5219\u8fd4\u56deFalse\n    return False\n```\n\n\u8fd9\u4e2a\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n^3)\uff0c\u5176\u4e2dn\u662f\u5217\u8868\u7684\u957f\u5ea6\u3002\u5982\u679c\u5217\u8868\u5f88\u5927\uff0c\u8fd9\u4e2a\u5b9e\u73b0\u53ef\u80fd\u4f1a\u6bd4\u8f83\u6162\u3002\u5982\u679c\u9700\u8981\u66f4\u9ad8\u6548\u7684\u5b9e\u73b0\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u5176\u4ed6\u7b97\u6cd5\uff0c\u6bd4\u5982\u5148\u5bf9\u5217\u8868\u6392\u5e8f\uff0c\u7136\u540e\u4f7f\u7528\u53cc\u6307\u9488\u6cd5\u6765\u67e5\u627e\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u4e2a\u5143\u7d20\u3002\u4f46\u8fd9\u8981\u6c42\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u53ef\u6392\u5e8f\u7684\uff0c\u5e76\u4e14\u6392\u5e8f\u4e5f\u4f1a\u589e\u52a0\u65f6\u95f4\u6d88\u8017\u3002\u5728\u4e0d\u8003\u8651\u8fd9\u4e9b\u56e0\u7d20\u7684\u60c5\u51b5\u4e0b\uff0c\u4e0a\u9762\u7684\u5b9e\u73b0\u662f\u6700\u7b80\u5355\u76f4\u63a5\u7684\u65b9\u6cd5\u3002"}
{"task_id": "HumanEval/41", "completion": "\u8fd9\u91cc\u6709\u4e00\u4e2a\u89e3\u9898\u601d\u8def\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe\u4e00\u8f86\u4ece\u53f3\u5411\u5de6\u7684\u8f66\u4f5c\u4e3a\u53c2\u7167\uff0c\u5176\u4ed6\u4ece\u5de6\u5411\u53f3\u7684\u8f66\u90fd\u4ee5\u76f8\u540c\u7684\u901f\u5ea6\u884c\u9a76\uff0c\u6211\u4eec\u9700\u8981\u786e\u5b9a\u5728\u4f55\u65f6\u4ece\u53f3\u5411\u5de6\u7684\u8f66\u4e0e\u5176\u76f8\u649e\u3002\n\n\u5047\u8bbe\u4ece\u53f3\u5411\u5de6\u7684\u7b2c\u4e00\u8f86\u8f66\u7684\u4f4d\u7f6e\u4e3a0\uff0c\u901f\u5ea6\u4e3a1\u3002\u90a3\u4e48\u5bf9\u4e8e\u4ece\u5de6\u5411\u53f3\u7684\u8f66\u6765\u8bf4\uff0c\u5f53\u5b83\u4eec\u7684\u4f4d\u7f6e\u5927\u4e8e0\u65f6\uff0c\u5b83\u4eec\u4f1a\u4e0e\u7b2c\u4e00\u8f86\u4ece\u53f3\u5411\u5de6\u7684\u8f66\u76f8\u649e\u3002\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff0c\u6bcf\u8f86\u4ece\u53f3\u5411\u5de6\u7684\u8f66\u5728\u4e0e\u4ece\u5de6\u5411\u53f3\u7684\u8f66\u76f8\u649e\u4e4b\u524d\uff0c\u5b83\u4eec\u90fd\u6709n-1\u6b21\u76f8\u649e\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u4ece\u53f3\u5411\u5de6\u7684\u8f66\u7684\u6570\u91cf\uff0c\u5e76\u5c06\u5176\u51cf\u53bb1\uff0c\u7136\u540e\u518d\u4e58\u4ee5n\uff08\u4ece\u5de6\u5411\u53f3\u7684\u8f66\u7684\u6570\u91cf\uff09\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u603b\u7684\u78b0\u649e\u6b21\u6570\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```python\ndef car_race_collision(n: int) -> int:\n    return (n - 1) * n\n```\n\n\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"\u8fd4\u56de\u5143\u7d20\u52a01\u7684\u5217\u8868\u3002\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\uff0c\u7528\u6765\u4fdd\u5b58\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\n    num_set = set()\n\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\n    for num in l:\n        # \u5982\u679c\u5f53\u524d\u6570\u5b57\u7684\u76f8\u53cd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8e\u96c6\u5408\u4e2d\uff0c\u5219\u8fd4\u56deTrue\n        if -num in num_set:\n            return True\n        # \u5426\u5219\u5c06\u5f53\u524d\u6570\u5b57\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n        num_set.add(num)\n\n    # \u5982\u679c\u904d\u5386\u5b8c\u6574\u4e2a\u5217\u8868\u90fd\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u5bf9\uff0c\u5219\u8fd4\u56deFalse\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x < 0 or base < 2 or base > 9:\n        raise ValueError(\"Invalid input\")\n\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    \u7ed9\u5b9a\u4e09\u89d2\u5f62\u8fb9\u7684\u957f\u5ea6\u548c\u9ad8\u8fd4\u56de\u9762\u79ef\u3002\n\n    :param a: \u4e09\u89d2\u5f62\u7684\u5e95\u8fb9\u957f\u5ea6\n    :param h: \u4e09\u89d2\u5f62\u7684\u9ad8\n    :return: \u4e09\u89d2\u5f62\u7684\u9762\u79ef\n    \"\"\"\n    return 0.5 * a * h\n\nprint(triangle_area(5, 3))"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4]\n        return fib[n % 4]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\u8fd4\u56de\u5217\u8868l\u4e2d\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n    middle = length // 2\n    if length % 2 == 0:\n        # \u5982\u679c\u5217\u8868\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u53d6\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\n        return (sorted_l[middle - 1] + sorted_l[middle]) / 2\n    else:\n        # \u5982\u679c\u5217\u8868\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u76f4\u63a5\u53d6\u4e2d\u95f4\u6570\n        return sorted_l[middle]"}
{"task_id": "HumanEval/48", "completion": "```python\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    \u68c0\u67e5\u7ed9\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587\n    \"\"\"\n    # \u9996\u5148\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u7a7a\u5b57\u7b26\u4e32\u4e5f\u89c6\u4e3a\u56de\u6587\n    if len(text) == 0:\n        return True\n    \n    # \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5411\u540e\u79fb\u52a8\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u5411\u524d\u79fb\u52a8\n    left = 0\n    right = len(text) - 1\n    \n    # \u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u662f\u5de6\u6307\u9488\u5927\u4e8e\u7b49\u4e8e\u53f3\u6307\u9488\n    while left < right:\n        # \u5982\u679c\u5de6\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u548c\u53f3\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e0d\u76f8\u540c\uff0c\u5219\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\n        if text[left] != text[right]:\n            return False\n        # \u5de6\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u6b65\n        left += 1\n        # \u53f3\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u6b65\n        right -= 1\n    \n    # \u5faa\u73af\u7ed3\u675f\u540e\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u662f\u56de\u6587\n    return True\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5224\u65ad\u7ed9\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u662f\u7a7a\u5b57\u7b26\u4e32\uff0c\u5219\u76f4\u63a5\u8fd4\u56deTrue\uff0c\u56e0\u4e3a\u7a7a\u5b57\u7b26\u4e32\u4e5f\u89c6\u4e3a\u56de\u6587\u3002\n\n\u7136\u540e\u4f7f\u7528\u53cc\u6307\u9488\u7684\u65b9\u6cd5\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5411\u540e\u79fb\u52a8\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u5411\u524d\u79fb\u52a8\u3002\u5728\u5faa\u73af\u4e2d\uff0c\u6bd4\u8f83\u5de6\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u548c\u53f3\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u76f8\u540c\uff0c\u5219\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\uff0c\u76f4\u63a5\u8fd4\u56deFalse\u3002\u5982\u679c\u76f8\u540c\uff0c\u5219\u5de6\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u6b65\uff0c\u53f3\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u6b65\uff0c\u7ee7\u7eed\u6bd4\u8f83\u4e0b\u4e00\u4e2a\u5b57\u7b26\u3002\n\n\u5982\u679c\u5faa\u73af\u7ed3\u675f\u540e\uff0c\u5de6\u6307\u9488\u5927\u4e8e\u7b49\u4e8e\u53f3\u6307\u9488\uff0c\u8bf4\u660e\u6574\u4e2a\u5b57\u7b26\u4e32\u90fd\u6bd4\u8f83\u8fc7\u4e86\uff0c\u4e14\u6bcf\u4e2a\u5b57\u7b26\u90fd\u662f\u76f8\u540c\u7684\uff0c\u5373\u5b57\u7b26\u4e32\u662f\u56de\u6587\uff0c\u8fd4\u56deTrue\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(n)\uff0c\u5176\u4e2dn\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/49", "completion": "\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u51fd\u6570modp\uff0c\u7528\u4e8e\u8ba1\u7b972^n\u6a21p\u7684\u7ed3\u679c\u3002\u5176\u4e2dn\u548cp\u4e3a\u6574\u6570\u3002\n\n\u51fd\u6570\u7684\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u901a\u8fc7\u5bf92^n\u548cp\u53d6\u6a21\u8fd0\u7b97\uff0c\u5f97\u5230\u6700\u7ec8\u7ed3\u679c\u3002\n\n\u4ee5\u4e0b\u662f\u51fd\u6570\u7684\u6e90\u4ee3\u7801\u53ca\u6ce8\u91ca\u8bf4\u660e\uff1a\n\n```python\ndef modp(n: int, p: int):\n    \"\"\"\u8fd4\u56de2^n\u6a21p(\u6ce8\u610f\u6570\u5b57)\u3002\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p\n```\n\n\u8be5\u51fd\u6570\u5b9e\u73b0\u4e86\u4e00\u4e2a\u5e42\u53d6\u6a21\u8fd0\u7b97\u3002\u4f7f\u7528\u4e86Python\u4e2d\u7684 `**` \u8fd0\u7b97\u7b26\u8fdb\u884c\u5e42\u8fd0\u7b97\uff0c\u4ee5\u53ca `%` \u8fd0\u7b97\u7b26\u8fdb\u884c\u53d6\u6a21\u8fd0\u7b97\u3002\n\n\u51fd\u6570\u901a\u8fc7\u8ba1\u7b97 `2^n`\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u4e0ep\u8fdb\u884c\u53d6\u6a21\u8fd0\u7b97\uff0c\u6700\u7ec8\u8fd4\u56de\u7ed3\u679c\u3002\n\n\u51fd\u6570\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e9b\u793a\u4f8b\u8f93\u5165\u548c\u9884\u671f\u8f93\u51fa\u7684\u6ce8\u91ca\u6765\u8fdb\u884c\u6d4b\u8bd5\u548c\u8bf4\u660e\u3002\u53ef\u4ee5\u901a\u8fc7\u8fd0\u884c\u8fd9\u6bb5\u4ee3\u7801\u6765\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u51fd\u6570\u7684\u6b63\u786e\u6027\u3002"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result\n\nprint(remove_vowels(''))\nprint(remove_vowels(\"abcdef\\nghijklm\"))\nprint(remove_vowels('abcdef'))\nprint(remove_vowels('aaaaa'))\nprint(remove_vowels('aaBAA'))\nprint(remove_vowels('zbcd'))"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\nprint(below_threshold([1, 2, 4, 10], 100))\nprint(below_threshold([1, 20, 4, 10], 5))"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\u4e24\u4e2a\u6570x\u548cy\u76f8\u52a0\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    \u68c0\u67e5\u4e24\u4e2a\u5355\u8bcd\u662f\u5426\u6709\u76f8\u540c\u7684\u5b57\u7b26\u3002\n    \"\"\"\n    # \u5c06\u4e24\u4e2a\u5355\u8bcd\u8f6c\u6362\u4e3a\u96c6\u5408\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # \u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\n    intersection = set_s0.intersection(set_s1)\n    \n    # \u5982\u679c\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u4e24\u4e2a\u5355\u8bcd\u6709\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\n    if intersection:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(3, n + 1):\n        a, b = b, a + b\n    return b\n\n# Test cases\nprint(fib(10))  # 55\nprint(fib(1))   # 1\nprint(fib(8))   # 21"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0\n\nprint(correct_bracketing(\"<\"))  # False\nprint(correct_bracketing(\"<>\"))  # True\nprint(correct_bracketing(\"<<><>>\"))  # True\nprint(correct_bracketing(\"><<>\"))  # False"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\u5982\u679c\u5217\u8868\u5143\u7d20\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\uff0c\u5219\u8fd4\u56deTrue\u3002\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # \u68c0\u67e5\u5217\u8868\u662f\u5426\u9012\u589e\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    # \u68c0\u67e5\u5217\u8868\u662f\u5426\u9012\u51cf\n    if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"\u8fd4\u56de\u4e24\u4e2a\u5217\u8868\u4e2d\u5df2\u6392\u5e8f\u7684\u552f\u4e00\u516c\u5171\u5143\u7d20\u3002\n\n    Args:\n        l1 (list): \u7b2c\u4e00\u4e2a\u5217\u8868\n        l2 (list): \u7b2c\u4e8c\u4e2a\u5217\u8868\n\n    Returns:\n        list: \u516c\u5171\u5143\u7d20\u5217\u8868\uff0c\u5df2\u6392\u5e8f\u4e14\u552f\u4e00\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    \n    common_elements = []\n    i, j = 0, 0\n    \n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            if not common_elements or l1[i] != common_elements[-1]:\n                common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u89c2\u5bdf\u5230\u4e00\u4e2a\u6570\u7684\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e0d\u4f1a\u8d85\u8fc7\u5b83\u7684\u5e73\u65b9\u6839\u3002\n\n\u4e3a\u4e86\u627e\u5230\u4e00\u4e2a\u6570\u7684\u6700\u5927\u7d20\u6570\u56e0\u5b50\uff0c\u6211\u4eec\u53ef\u4ee5\u4ece2\u5f00\u59cb\u5f80\u4e0a\u9010\u4e2a\u5224\u65ad\u662f\u5426\u4e3a\u56e0\u5b50\uff0c\u76f4\u5230\u5e73\u65b9\u6839\u3002\u5982\u679c\u627e\u5230\u4e00\u4e2a\u56e0\u5b50\uff0c\u6211\u4eec\u5c31\u5c06\u539f\u6570\u9664\u4ee5\u8be5\u56e0\u5b50\uff0c\u5e76\u91cd\u65b0\u4ece2\u5f00\u59cb\u5224\u65ad\uff0c\u76f4\u5230\u65e0\u6cd5\u7ee7\u7eed\u88ab\u9664\u3002\n\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u8be5\u7b97\u6cd5\u7684\u4ee3\u7801\uff1a\n\n```python\nimport math\n\ndef largest_prime_factor(n: int):\n    # \u521d\u59cb\u5316\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e3a1\n    largest_factor = 1\n\n    # \u4ece2\u5f00\u59cb\u9010\u4e2a\u5224\u65ad\u662f\u5426\u4e3a\u56e0\u5b50\n    factor = 2\n    while factor <= math.sqrt(n):\n        # \u5982\u679c\u8be5\u56e0\u5b50\u80fd\u591f\u6574\u9664n\uff0c\u5219\u66f4\u65b0\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e3a\u8be5\u56e0\u5b50\uff0c\u5e76\u5c06n\u9664\u4ee5\u8be5\u56e0\u5b50\uff0c\u7ee7\u7eed\u5224\u65ad\n        if n % factor == 0:\n            largest_factor = factor\n            n = n // factor\n        # \u5982\u679c\u4e0d\u80fd\u6574\u9664\uff0c\u5219\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u4e2a\u56e0\u5b50\n        else:\n            factor += 1\n\n    # \u5982\u679c\u6700\u540e\u5269\u4f59\u7684n\u5927\u4e8e1\uff0c\u5219\u66f4\u65b0\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e3an\n    if n > 1:\n        largest_factor = n\n\n    return largest_factor\n\n```\n\n\u4f7f\u7528\u8be5\u51fd\u6570\u6765\u6d4b\u8bd5\u793a\u4f8b\uff1a\n\n```python\nprint(largest_prime_factor(13195))  # \u8f93\u51fa: 29\nprint(largest_prime_factor(2048))   # \u8f93\u51fa: 2\n```\n\n\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result\n\nprint(derivative([3, 1, 2, 4, 5]))\nprint(derivative([1, 2, 3]))"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        fib3 = 0\n        for i in range(3, n+1):\n            fib3 = fib1 + fib2 + fib3\n            fib1 = fib2\n            fib2 = fib3\n        return fib3\n\nprint(fibfib(1))  # \u8f93\u51fa: 0\nprint(fibfib(5))  # \u8f93\u51fa: 4\nprint(fibfib(8))  # \u8f93\u51fa: 24"}
{"task_id": "HumanEval/64", "completion": "\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528\u5faa\u73af\u904d\u5386\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5224\u65ad\u8be5\u5b57\u7b26\u662f\u5426\u662f\u5143\u97f3\u3002\u6211\u4f1a\u4f7f\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u8bb0\u5f55\u5143\u97f3\u7684\u4e2a\u6570\uff0c\u5e76\u968f\u7740\u627e\u5230\u6bcf\u4e2a\u5143\u97f3\u5b57\u7b26\u9012\u589e\u8ba1\u6570\u5668\u7684\u503c\u3002\u8fd9\u6837\u505a\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u5b57\u7b26\u4e32\u4e2d\u5143\u97f3\u5b57\u7b26\u7684\u4e2a\u6570\u3002\n\n\u4e0b\u9762\u662f\u6211\u4fee\u6539\u540e\u7684\u51fd\u6570\u4ee3\u7801\uff1a\n\n```python\ndef vowels_count(s):\n    vowels = \"aeiouy\"\n    count = 0\n    for c in s.lower():\n        if c in vowels:\n            count += 1\n    return count\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u4f1a\u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u5c0f\u5199\u5b57\u6bcd\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u904d\u5386\u6bcf\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u5b57\u7b26\u5728\u5143\u97f3\u5217\u8868\u4e2d\uff0c\u5219\u8ba1\u6570\u5668\u503c\u52a01\u3002\u6700\u540e\uff0c\u8fd4\u56de\u8ba1\u6570\u5668\u7684\u503c\u4f5c\u4e3a\u5143\u97f3\u5b57\u7b26\u7684\u4e2a\u6570\u3002\n\n\u73b0\u5728\uff0c\u8ba9\u6211\u4eec\u6765\u8fd0\u884c\u4e00\u4e9b\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4ee5\u786e\u4fdd\u51fd\u6570\u7684\u6b63\u786e\u6027\uff1a\n\n```python\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\n```\n\nOutput:\n```\n2\n3\n```\n\n\u6211\u5df2\u7ecf\u6dfb\u52a0\u4e86\u4e0a\u8ff0\u7684\u6d4b\u8bd5\u7528\u4f8b\uff08\u5373`vowels_count`\u51fd\u6570\u7684docstring\uff09\uff0c\u4f60\u53ef\u4ee5\u8fd0\u884c\u51fd\u6570\u5e76\u67e5\u770b\u8f93\u51fa\u7684\u7ed3\u679c\u3002\u5982\u679c\u4f60\u60f3\u6dfb\u52a0\u66f4\u591a\u7684\u6d4b\u8bd5\u7528\u4f8b\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5728\u51fd\u6570\u4e0b\u65b9\u6dfb\u52a0\uff0c\u5e76\u8fd0\u884c\u51fd\u6570\u8fdb\u884c\u6d4b\u8bd5\u3002"}
{"task_id": "HumanEval/65", "completion": "\u8fd9\u662f\u5b9e\u73b0\u5faa\u73af\u79fb\u4f4d\u7684\u4e00\u4e2a\u53ef\u80fd\u7684\u51fd\u6570\u5b9a\u4e49\u3002\u5b83\u4ee5\u6574\u6570x\u548c\u79fb\u4f4d\u6570\u91cfshift\u4f5c\u4e3a\u8f93\u5165\uff0c\u5e76\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u8868\u793a\u5c06x\u7684\u6570\u5b57\u5faa\u73af\u5411\u53f3\u79fb\u4f4dshift\u4e2a\u4f4d\u7f6e\u7684\u7ed3\u679c\u3002\n\n\u5982\u679cshift\u5c0f\u4e8ex\u7684\u4f4d\u6570\uff0c\u51fd\u6570\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u79fb\u4f4d\u540e\u7684\u6570\u5b57\u3002\n\n\u5982\u679cshift\u5927\u4e8ex\u7684\u4f4d\u6570\uff0c\u51fd\u6570\u5c06\u8fd4\u56de\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2d\u5305\u542b\u9006\u5e8f\u79fb\u4f4dshift\u4f4d\u540e\u7684\u6570\u5b57\u3002\u8fd9\u662f\u56e0\u4e3a\u9006\u5e8f\u79fb\u4f4dshift\u4f4d\u540e\u7684\u6570\u5b57\u5b9e\u9645\u4e0a\u662f\u5c06\u539f\u6570\u5b57\u5faa\u73af\u5de6\u79fb(shift mod \u4f4d\u6570)\u4f4d\u540e\u7684\u7ed3\u679c\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97shift mod \u4f4d\u6570\u6765\u627e\u5230\u51c6\u786e\u7684\u79fb\u4f4d\u6570\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u51fd\u6570\u5b9e\u73b0\uff1a\n\n```python\ndef circular_shift(x, shift):\n    x = str(x)\n    n = len(x)\n    shift %= n\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]\n```\n\n\u5728\u8fd9\u4e2a\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5c06x\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff0c\u5e76\u8ba1\u7b97\u51fa\u5b83\u7684\u4f4d\u6570n\u3002\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u8ba1\u7b97shift mod n\u5f97\u5230\u51c6\u786e\u7684\u79fb\u4f4d\u6570\u3002\u5982\u679c\u79fb\u4f4d\u6570\u4e3a0\uff0c\u5219\u4e0d\u9700\u8981\u79fb\u4f4d\uff0c\u76f4\u63a5\u8fd4\u56de\u539f\u6570\u5b57x\u3002\u5426\u5219\uff0c\u6211\u4eec\u4ecex\u7684\u672b\u5c3e\u9009\u53d6\u6700\u540eshift\u4e2a\u6570\u5b57\u5e76\u5c06\u5b83\u4eec\u653e\u5728\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff0c\u7136\u540e\u5c06\u5269\u4f59\u7684\u6570\u5b57\u653e\u5728\u7ed3\u679c\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u3002\n\n\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\uff0c\u4f60\u53ef\u4ee5\u8c03\u7528`circular_shift(12, 1)`\u6765\u5f97\u5230\"21\"\uff0c\u8c03\u7528`circular_shift(12, 2)`\u6765\u5f97\u5230\"12\"\u4f5c\u4e3a\u7ed3\u679c\u3002\u8fd9\u4e9b\u4f8b\u5b50\u4e0e\u4f60\u5728\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u63d0\u4f9b\u7684\u6d4b\u8bd5\u7528\u4f8b\u76f8\u5339\u914d\u3002"}
{"task_id": "HumanEval/66", "completion": "\u8be5\u51fd\u6570\u7684\u4f5c\u7528\u662f\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u5927\u5199\u5b57\u7b26\u7684ASCII\u7801\u4e4b\u548c\u3002\u51fd\u6570\u7684\u8f93\u5165\u662f\u4e00\u4e2a\u5b57\u7b26\u4e32s\uff0c\u51fd\u6570\u4f1a\u904d\u5386\u5b57\u7b26\u4e32s\uff0c\u5bf9\u4e8e\u5927\u5199\u5b57\u7b26\uff0c\u5c06\u5176ASCII\u7801\u6dfb\u52a0\u5230\u4e00\u4e2a\u603b\u548c\u53d8\u91cf\u4e2d\uff0c\u5e76\u8fd4\u56de\u8be5\u53d8\u91cf\u7684\u503c\u3002\u5982\u679c\u5b57\u7b26\u4e32s\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de0\u3002\n\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u8be5\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\n```python\ndef digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n```\n\n\u51fd\u6570\u7684\u4e3b\u8981\u601d\u8def\u662f\u4f7f\u7528for\u5faa\u73af\u904d\u5386\u5b57\u7b26\u4e32s\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u7b26\uff0c\u4f7f\u7528`char.isupper()`\u5224\u65ad\u662f\u5426\u4e3a\u5927\u5199\u5b57\u7b26\uff0c\u5982\u679c\u662f\uff0c\u5219\u4f7f\u7528`ord(char)`\u83b7\u53d6\u5176ASCII\u7801\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u603b\u548c\u53d8\u91cftotal\u4e2d\u3002\u6700\u540e\uff0c\u8fd4\u56de\u603b\u548c\u53d8\u91cftotal\u7684\u503c\u3002\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u793a\u4f8b\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u51fd\u6570\u7684\u7ed3\u679c\u5c06\u4e0e\u793a\u4f8b\u8f93\u51fa\u76f8\u5339\u914d\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff0c\u8be5\u51fd\u6570\u5e76\u6ca1\u6709\u5904\u7406\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u5b57\u7b26\u3002\u5982\u679c\u9700\u8981\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u7b26\u7684ASCII\u7801\u4e4b\u548c\uff0c\u53ef\u4ee5\u5c06`char.isupper()`\u7684\u5224\u65ad\u6761\u4ef6\u66f4\u6539\u4e3a`char.isalpha()`\uff0c\u5373\u5224\u65ad\u5b57\u7b26\u662f\u5426\u4e3a\u5b57\u6bcd\u5b57\u7b26\u3002\u8fd9\u6837\uff0c\u51fd\u6570\u5c06\u4f1a\u8ba1\u7b97\u5b57\u7b26\u4e32\u4e2d\u6240\u6709\u5b57\u6bcd\u5b57\u7b26\u7684ASCII\u7801\u4e4b\u548c\u3002"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u82f9\u679c\u548c\u6a58\u5b50\u6570\u91cf\n    apple_count = int(s.split(\" \")[0])\n    orange_count = int(s.split(\" \")[-2])\n    \n    # \u8ba1\u7b97\u8292\u679c\u7684\u6570\u91cf\n    mango_count = n - apple_count - orange_count\n    \n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "\u8fd9\u9053\u9898\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u6570\u7ec4\u6765\u627e\u5230\u6700\u5c0f\u7684\u5076\u6570\u8282\u70b9\uff0c\u5e76\u8bb0\u5f55\u5176\u7d22\u5f15\u503c\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u521d\u59cb\u5316\u6700\u5c0f\u5076\u6570\u503c\u4e3a\u6b63\u65e0\u7a77\u5927\uff0c\u4ee5\u4fdd\u8bc1\u80fd\u627e\u5230\u6bd4\u5176\u66f4\u5c0f\u7684\u5076\u6570\u8282\u70b9\u3002\u7136\u540e\uff0c\u6211\u4eec\u904d\u5386\u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u503c\uff0c\u68c0\u67e5\u662f\u5426\u4e3a\u5076\u6570\u4e14\u6bd4\u5f53\u524d\u6700\u5c0f\u5076\u6570\u503c\u5c0f\uff0c\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u5076\u6570\u503c\u548c\u7d22\u5f15\u3002\u6700\u540e\uff0c\u8fd4\u56de\u627e\u5230\u7684\u6700\u5c0f\u5076\u6570\u503c\u548c\u7d22\u5f15\u3002\n\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a\n\n```python\ndef pluck(arr):\n    min_even_value = float('inf')\n    min_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even_value:\n            min_even_value = num\n            min_even_index = i\n\n    if min_even_index == -1:\n        return []\n    else:\n        return [min_even_value, min_even_index]\n```\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u5176\u4e2dn\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/69", "completion": "\u9996\u5148\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u6765\u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\u3002\u7136\u540e\uff0c\u904d\u5386\u5b57\u5178\uff0c\u627e\u51fa\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e\u6570\u5b57\u672c\u8eab\u7684\u6700\u5927\u6570\u5b57\u5373\u53ef\u3002\n\n```\ndef search(lst):\n    num_dict = {}\n    \n    # \u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\n    for num in lst:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    # \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e\u6570\u5b57\u672c\u8eab\u7684\u6700\u5927\u6570\u5b57\n    max_num = -1\n    for num, count in num_dict.items():\n        if num == count and num > max_num:\n            max_num = num\n    \n    return max_num\n```\n\n\u4ee5\u4e0a\u5b9e\u73b0\u8f83\u4e3a\u76f4\u89c2\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4e3aO(n^2)\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u7684\u4f18\u5316\u5b9e\u73b0\u3002\n\n```\ndef search(lst):\n    num_dict = {}\n    max_num = -1\n    \n    for num in lst:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n        \n        if num_dict[num] == num and num > max_num:\n            max_num = num\n    \n    return max_num\n```\n\n\u8fd9\u91cc\u53ea\u7528\u4e00\u4e2a\u5faa\u73af\u5b9e\u73b0\u4e86\u6c42\u89e3\uff0c\u540c\u65f6\u4f7f\u7528\u4e00\u4e2a\u53d8\u91cf`max_num`\u6765\u8bb0\u5f55\u6700\u5927\u7684\u6570\u5b57\u3002\u5982\u679c\u51fa\u73b0\u4e86\u4e00\u4e2a\u6570\u5b57`num`\u7684\u51fa\u73b0\u6b21\u6570`num_dict[num]`\u7b49\u4e8e`num`\u672c\u8eab\uff0c\u6211\u4eec\u5c31\u66f4\u65b0`max_num`\u7684\u503c\u3002\u6700\u540e\u8fd4\u56de`max_num`\u5373\u53ef\u3002"}
{"task_id": "HumanEval/70", "completion": "\u8fd9\u662f\u4e00\u4e2a\u5bf9\u6574\u6570\u5217\u8868\u8fdb\u884c\u5947\u602a\u6392\u5e8f\u7684\u51fd\u6570\u3002\u5b83\u7684\u539f\u7406\u662f\u5148\u627e\u5230\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u7136\u540e\u627e\u5230\u5269\u4f59\u6574\u6570\u4e2d\u7684\u6700\u5927\u503c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u4e0b\u9762\u662f\u6211\u7684\u5b9e\u73b0\uff1a\n\n```python\ndef strange_sort_list(lst):\n    # \u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5217\u8868\n    if not lst:\n        return []\n    \n    # \u7ed3\u679c\u5217\u8868\n    result = []\n    \n    # \u5faa\u73af\u76f4\u5230\u5217\u8868\u4e3a\u7a7a\n    while lst:\n        # \u627e\u5230\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        \n        # \u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u8df3\u51fa\u5faa\u73af\n        if not lst:\n            break\n        \n        # \u627e\u5230\u5269\u4f59\u6574\u6570\u4e2d\u7684\u6700\u5927\u503c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        max_val = max(lst)\n        result.append(max_val)\n        lst.remove(max_val)\n    \n    return result\n```\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u6d4b\u8bd5\u4f60\u7684\u4f8b\u5b50\uff1a\n\n```\nprint(strange_sort_list([1, 2, 3, 4]))  # \u8f93\u51fa\uff1a[1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # \u8f93\u51fa\uff1a[5, 5, 5, 5]\nprint(strange_sort_list([]))  # \u8f93\u51fa\uff1a[]\n```"}
{"task_id": "HumanEval/71", "completion": "\u4ee5\u4e0b\u662f\u5b9e\u73b0\u8be5\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\ndef triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    \n    return -1\n\n\u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u4e09\u4e2a\u8fb9\u957f\u662f\u5426\u5927\u4e8e0\uff0c\u5982\u679c\u6709\u4efb\u4f55\u4e00\u4e2a\u5c0f\u4e8e\u7b49\u4e8e0\u7684\u8fb9\u957f\uff0c\u5219\u8fd4\u56de-1\u3002\u7136\u540e\uff0c\u5b83\u901a\u8fc7\u5224\u65ad\u4efb\u610f\u4e24\u6761\u8fb9\u4e4b\u548c\u662f\u5426\u5927\u4e8e\u7b2c\u4e09\u6761\u8fb9\u6765\u786e\u5b9a\u4e09\u4e2a\u8fb9\u957f\u662f\u5426\u80fd\u591f\u6784\u6210\u4e00\u4e2a\u6709\u6548\u7684\u4e09\u89d2\u5f62\u3002\u5982\u679c\u80fd\u591f\u6784\u6210\u6709\u6548\u7684\u4e09\u89d2\u5f62\uff0c\u5219\u4f7f\u7528\u6d77\u4f26\u516c\u5f0f\u8ba1\u7b97\u4e09\u89d2\u5f62\u9762\u79ef\u5e76\u8fd4\u56de\u56db\u820d\u4e94\u5165\u5230\u5c0f\u6570\u70b9\u540e\u4e24\u4f4d\u7684\u7ed3\u679c\u3002\u5982\u679c\u4e0d\u80fd\u6784\u6210\u6709\u6548\u7684\u4e09\u89d2\u5f62\uff0c\u5219\u8fd4\u56de-1\u3002"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # \u5224\u65ad\u5217\u8868\u662f\u5426\u4e3a\u56de\u6587\u5217\u8868\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    # \u5224\u65ad\u5217\u8868\u7684\u5143\u7d20\u603b\u548c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u91cd\u91cf\n    def sum_total(lst):\n        return sum(lst) <= w\n    \n    # \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u80fd\u98de\u884c\n    if is_palindrome(q) and sum_total(q):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "\u601d\u8def\uff1a\n\u9996\u5148\uff0c\u56de\u6587\u6570\u7ec4\u4ece\u5de6\u53f3\u4e24\u8fb9\u770b\u8d77\u6765\u662f\u4e00\u6837\u7684\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u6570\u7ec4\u7684\u524d\u4e00\u534a\u548c\u540e\u4e00\u534a\u662f\u5426\u5bf9\u79f0\u5373\u53ef\u3002\n\n\u7136\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u4e0d\u5bf9\u79f0\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u4e2d\u4e00\u4e2a\u5143\u7d20\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a\u5143\u7d20\uff0c\u4f7f\u5f97\u5b83\u4eec\u76f8\u7b49\uff0c\u4ece\u800c\u4f7f\u5f97\u6570\u7ec4\u66f4\u63a5\u8fd1\u56de\u6587\u6570\u7ec4\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n1. \u521d\u59cb\u5316\u4e00\u4e2a\u8ba1\u6570\u5668\u53d8\u91cfcount=0\uff0c\u7528\u6765\u8bb0\u5f55\u66f4\u6539\u6b21\u6570\u3002\n2. \u904d\u5386\u6570\u7ec4\u7684\u524d\u4e00\u534a\uff0c\u4f7f\u7528\u4e24\u4e2a\u6307\u9488i\u548cj\uff0ci\u4ece\u6570\u7ec4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\uff0cj\u4ece\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u904d\u5386\u3002\n3. \u5982\u679carr[i]\u548carr[j]\u4e0d\u76f8\u7b49\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e0d\u5bf9\u79f0\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5b83\u4eec\u4e2d\u7684\u4e00\u4e2a\u66f4\u6539\u4e3a\u53e6\u4e00\u4e2a\u5143\u7d20\u3002\n4. \u5728\u66f4\u6539\u524d\uff0c\u6211\u4eec\u9700\u8981\u5224\u65adarr[i]\u548carr[j]\u4e24\u4e2a\u5143\u7d20\u54ea\u4e2a\u66f4\u5c0f\uff0c\u5c06\u66f4\u5c0f\u7684\u5143\u7d20\u66f4\u6539\u4e3a\u66f4\u5927\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6570\u7ec4\u66f4\u63a5\u8fd1\u56de\u6587\u6570\u7ec4\u3002\n5. \u5c06\u66f4\u6539\u6b21\u6570count\u52a01\u3002\n6. \u8fd4\u56decount\u4f5c\u4e3a\u7ed3\u679c\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n\ndef smallest_change(arr):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n // 2):\n        j = n - 1 - i\n        if arr[i] != arr[j]:\n            if arr[i] < arr[j]:\n                arr[i] = arr[j]\n            else:\n                arr[j] = arr[i]\n            count += 1\n    return count\n\n\u6d4b\u8bd5\u6837\u4f8b\uff1a\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # \u8f93\u51fa4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # \u8f93\u51fa1\nprint(smallest_change([1, 2, 3, 2, 1]))  # \u8f93\u51fa0"}
{"task_id": "HumanEval/74", "completion": "\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u6765\u5b9e\u73b0\uff1a\n\n```python\ndef total_match(lst1, lst2):\n    # \u8ba1\u7b97lst1\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u603b\u6570\n    total1 = sum(len(s) for s in lst1)\n    # \u8ba1\u7b97lst2\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u603b\u6570\n    total2 = sum(len(s) for s in lst2)\n    \n    # \u5224\u65ad\u54ea\u4e2a\u5217\u8868\u7684\u5b57\u7b26\u603b\u6570\u5c0f\u4e8e\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u5b57\u7b26\u603b\u6570\n    if total1 < total2:\n        return lst1\n    else:\n        return lst2\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5229\u7528`sum`\u51fd\u6570\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u5206\u522b\u8ba1\u7b97\u4e86`lst1`\u548c`lst2`\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u603b\u6570\u3002\u7136\u540e\u901a\u8fc7\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u5b57\u7b26\u603b\u6570\u7684\u5927\u5c0f\uff0c\u8fd4\u56de\u5bf9\u5e94\u7684\u5217\u8868\u3002\n\n\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u5176\u4e2dn\u4e3a\u6240\u6709\u5b57\u7b26\u4e32\u7684\u603b\u5b57\u7b26\u6570\u3002"}
{"task_id": "HumanEval/75", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0\u51fd\u6570is_multiply_prime\u7684\u4f8b\u5b50:\n\n```python\ndef is_multiply_prime(a):\n    primes = [2, 3, 5]\n    for p in primes:\n        if a % p != 0:\n            return False\n        a //= p\n    return a == 1\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u7d20\u65702\u30013\u548c5\u7684\u5217\u8868\u3002\u63a5\u4e0b\u6765\uff0c\u51fd\u6570\u901a\u8fc7\u5faa\u73af\u8fed\u4ee3\u8fd9\u4e2a\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u7d20\u6570\uff0c\u68c0\u67e5a\u662f\u5426\u80fd\u88ab\u5f53\u524d\u7d20\u6570\u6574\u9664\u3002\u5982\u679c\u4e0d\u80fd\u6574\u9664\uff0c\u5219\u8fd4\u56deFalse\u3002\u5982\u679c\u80fd\u6574\u9664\uff0c\u5219\u5c06a\u9664\u4ee5\u5f53\u524d\u7d20\u6570\uff0c\u8fdb\u4e00\u6b65\u68c0\u67e5\u3002\u6700\u540e\uff0c\u5982\u679ca\u7b49\u4e8e1\uff0c\u8bf4\u660ea\u786e\u5b9e\u662f\u4e09\u4e2a\u7d20\u6570\u7684\u4e58\u79ef\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n\n\u4ee5\u4e0b\u662f\u4e00\u4e9b\u6d4b\u8bd5\u4f8b\u5b50\uff1a\n\n```python\nprint(is_multiply_prime(30)) # True\nprint(is_multiply_prime(90)) # False\nprint(is_multiply_prime(2)) # False\nprint(is_multiply_prime(60)) # False\n```\n\n\u8f93\u51fa\uff1a\n\n```\nTrue\nFalse\nFalse\nFalse\n```\n\n\u6ce8\u610f\uff1a\u51fd\u6570\u5047\u8bbea\u662f\u4e00\u4e2a\u6b63\u6574\u6570\u3002\u5982\u679ca\u4e0d\u662f\u6b63\u6574\u6570\uff0c\u51fd\u6570\u7684\u884c\u4e3a\u5c06\u4e0d\u53ef\u9884\u6d4b\u3002"}
{"task_id": "HumanEval/76", "completion": "\u8fd9\u662f\u4e00\u4e2a\u5224\u65ad\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u662f\u53e6\u4e00\u4e2a\u6570\u5b57\u7684\u7b80\u5355\u5e42\u7684\u51fd\u6570\u3002\u7b80\u5355\u5e42\u6307\u7684\u662fx=n**k\uff0c\u5176\u4e2dn\u548ck\u90fd\u662f\u6b63\u6574\u6570\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```python\nimport math\n\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        k = math.log(x, n)\n        return k == int(k)\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u4e86`math.log()`\u51fd\u6570\u6765\u8ba1\u7b97\u4ee5n\u4e3a\u5e95\u7684x\u7684\u5bf9\u6570\u3002\u5982\u679c\u8ba1\u7b97\u7ed3\u679c\u662f\u4e00\u4e2a\u6574\u6570\uff0c\u8bf4\u660ex\u662fn\u7684\u7b80\u5355\u5e42\uff0c\u5426\u5219\u4e0d\u662f\u3002\n\n\u4f60\u53ef\u4ee5\u5c1d\u8bd5\u8fd0\u884c\u8fd9\u4e2a\u51fd\u6570\u6765\u9a8c\u8bc1\u7ed3\u679c\u3002"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:   # \u5224\u65ad\u8d1f\u6570\u7684\u7acb\u65b9\u6839\n        a = -a   # \u53d6\u7edd\u5bf9\u503c\n        root = int(a ** (1 / 3))   # \u6c42\u7acb\u65b9\u6839\n        if root ** 3 == a:   # \u5224\u65ad\u662f\u5426\u4e3a\u7acb\u65b9\u6570\n            return True\n        else:\n            return False\n    else:   # \u5224\u65ad\u6b63\u6570\u548c0\u7684\u7acb\u65b9\u6839\n        root = int(a ** (1 / 3))   # \u6c42\u7acb\u65b9\u6839\n        if root ** 3 == a:   # \u5224\u65ad\u662f\u5426\u4e3a\u7acb\u65b9\u6570\n            return True\n        else:\n            return False\n\nprint(iscube(1))   # True\nprint(iscube(2))   # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))   # True\nprint(iscube(180))   # False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\nprint(hex_key(\"AB\"))  # 1\nprint(hex_key(\"1077E\"))  # 2\nprint(hex_key(\"ABED1A33\"))  # 4\nprint(hex_key(\"123456789ABCDEF0\"))  # 6\nprint(hex_key(\"2020\"))  # 2"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    # \u5c06\u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n    binary = bin(decimal)[2:]\n    # \u6dfb\u52a0\u5f00\u5934\u548c\u7ed3\u5c3e\u6807\u8bb0\n    binary = 'db' + binary + 'db'\n    return binary"}
{"task_id": "HumanEval/80", "completion": "\u8be5\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u6765\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u6bcf\u6b21\u5224\u65ad\u5f53\u524d\u5b57\u7b26\u4e0e\u524d\u4e24\u4e2a\u5b57\u7b26\u662f\u5426\u76f8\u540c\u3002\u5982\u679c\u76f8\u540c\uff0c\u5219\u8fd4\u56deFalse\uff1b\u5982\u679c\u4e0d\u540c\uff0c\u5219\u7ee7\u7eed\u904d\u5386\uff0c\u76f4\u5230\u904d\u5386\u5b8c\u6574\u4e2a\u5b57\u7b26\u4e32\u3002\u5982\u679c\u5faa\u73af\u80fd\u591f\u6b63\u5e38\u7ed3\u675f\uff0c\u5219\u8bf4\u660e\u5b57\u7b26\u4e32\u662fhappy\u7684\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n\n\u4ee5\u4e0b\u662f\u51fd\u6570\u7684\u5b9e\u73b0\u4ee3\u7801\uff1a\n\n```python\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2]:\n            return False\n    \n    return True\n```\n\n\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c\u4e00\u4e9b\u7b80\u5355\u7684\u6d4b\u8bd5\u6765\u9a8c\u8bc1\u51fd\u6570\u7684\u6b63\u786e\u6027\uff1a\n\n```python\nprint(is_happy(\"a\"))     # False\nprint(is_happy(\"aa\"))    # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))   # True\nprint(is_happy(\"xyy\"))   # False\n```\n\n\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u4e3a\uff1a\n\n```\nFalse\nFalse\nTrue\nFalse\nTrue\nFalse\n```"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades\n\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))"}
{"task_id": "HumanEval/82", "completion": "import math\n\ndef is_prime(n):\n    \"\"\"\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\u5224\u65ad\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u4e3a\u7d20\u6570\"\"\"\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    start_count = 0\n    end_count = 0\n    \n    # \u904d\u5386n\u4f4d\u6b63\u6574\u6570\n    for i in range(10**(n-1), 10**n):\n        num_str = str(i)\n        # \u5224\u65ad\u662f\u5426\u4ee51\u5f00\u59cb\n        if num_str[0] == '1':\n            start_count += 1\n        # \u5224\u65ad\u662f\u5426\u4ee51\u7ed3\u675f\n        if num_str[-1] == '1':\n            end_count += 1\n    \n    return start_count, end_count\n\n# \u6d4b\u8bd5\u51fd\u6570\nprint(starts_one_ends(2)) # (10, 19)\nprint(starts_one_ends(3)) # (100, 199)"}
{"task_id": "HumanEval/84", "completion": "\u8be5\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u904d\u5386\u6574\u6570\u7684\u6bcf\u4e00\u4f4d\u6570\uff0c\u7136\u540e\u7d2f\u52a0\u5f97\u5230\u6570\u5b57\u4e4b\u548c\u3002\u7136\u540e\u5c06\u6570\u5b57\u4e4b\u548c\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u8868\u793a\u3002\n\n\u89e3\u51b3\u65b9\u6848\u5982\u4e0b\uff1a\n\ndef solve(N):\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    binary = bin(total)[2:]\n    return binary\n\n\u8fd9\u4e2a\u89e3\u51b3\u65b9\u6848\u4f1a\u904d\u5386\u6574\u6570N\u7684\u6bcf\u4e00\u4f4d\u6570\uff0c\u7136\u540e\u5c06\u6bcf\u4e00\u4f4d\u6570\u76f8\u52a0\u5f97\u5230\u6570\u5b57\u4e4b\u548c\u3002\u7136\u540e\u4f7f\u7528bin()\u51fd\u6570\u5c06\u6570\u5b57\u4e4b\u548c\u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u8868\u793a\uff0c\u5e76\u5220\u9664\u524d\u7f00\"0b\"\u3002\n\u6700\u540e\uff0c\u8fd4\u56de\u4e8c\u8fdb\u5236\u8868\u793a\u7684\u5b57\u7b26\u4e32\u3002"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result\n\nprint(add([4, 2, 6, 7]))  # \u8f93\u51fa2"}
{"task_id": "HumanEval/86", "completion": "\u4ee5\u4e0b\u662f\u5b9e\u73b0anti_shuffle\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\ndef anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "\u4e0b\u9762\u662f\u6211\u5199\u7684\u89e3\u51b3\u65b9\u6848\uff1a\n\ndef get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result\n\n\u6d4b\u8bd5\u7ed3\u679c\u4e0e\u9884\u671f\u7ed3\u679c\u76f8\u7b26\u3002"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # \u68c0\u67e5\u6570\u7ec4\u957f\u5ea6\u662f\u5426\u4e3a0\u62161\n    if len(array) < 2:\n        return array\n\n    # \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u7d22\u5f15\u503c\u548c\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u503c\u7684\u548c\n    sum_index = array[0] + array[-1]\n    \n    # \u6309\u7167\u5947\u5076\u6570\u5206\u522b\u6392\u5e8f\n    if sum_index % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684encrypt\u51fd\u6570\u7684\u5b9e\u73b0\uff1a\n\n```python\ndef encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            char_code = ord(char)\n            if char.islower():\n                rotated_code = ((char_code - ord('a')) + 4) % 26 + ord('a')\n            else:\n                rotated_code = ((char_code - ord('A')) + 4) % 26 + ord('A')\n            encrypted += chr(rotated_code)\n        else:\n            encrypted += char\n    return encrypted\n```\n\n\u8be5\u51fd\u6570\u904d\u5386\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u3002\u5bf9\u4e8e\u5b57\u6bcd\u5b57\u7b26\uff0c\u5b83\u6839\u636e\u5176\u5927\u5c0f\u5199\u8fdb\u884c\u4e86\u4e0d\u540c\u7684\u5904\u7406\u3002\u9996\u5148\uff0c\u5b83\u5c06\u5b57\u6bcd\u5b57\u7b26\u7684Unicode\u7f16\u7801\u8f6c\u6362\u4e3a0\u523025\u4e4b\u95f4\u7684\u6570\u503c\u3002\u7136\u540e\uff0c\u5b83\u6839\u636e\u5e73\u79fb2\u4e2a\u4f4d\u7f6e\u7684\u8981\u6c42\u8ba1\u7b97\u65cb\u8f6c\u540e\u7684\u7f16\u7801\u3002\u6700\u540e\uff0c\u5b83\u5c06\u65cb\u8f6c\u540e\u7684\u7f16\u7801\u8f6c\u6362\u56de\u5b57\u6bcd\u5b57\u7b26\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e2d\u3002\u5bf9\u4e8e\u975e\u5b57\u6bcd\u5b57\u7b26\uff0c\u5b83\u76f4\u63a5\u5c06\u5176\u6dfb\u52a0\u5230\u52a0\u5bc6\u5b57\u7b26\u4e32\u4e2d\u3002\n\n\u4f7f\u7528\u793a\u4f8b\uff1a\n```python\nprint(encrypt('hi'))  # \u8f93\u51fa 'lm'\nprint(encrypt('asdfghjkl'))  # \u8f93\u51fa 'ewhjklnop'\nprint(encrypt('gf'))  # \u8f93\u51fa 'kj'\nprint(encrypt('et'))  # \u8f93\u51fa 'ix'\n```\n\n\u8bf7\u6ce8\u610f\uff0c\u8be5\u7b97\u6cd5\u4ec5\u9002\u7528\u4e8e\u82f1\u6587\u5b57\u6bcd\u5b57\u7b26\u3002\u5bf9\u4e8e\u5176\u4ed6\u5b57\u7b26\uff08\u5982\u6570\u5b57\u6216\u6807\u70b9\u7b26\u53f7\uff09\uff0c\u5b83\u5c06\u4fdd\u7559\u539f\u6837\u3002\u5982\u679c\u60a8\u9700\u8981\u5904\u7406\u5176\u4ed6\u5b57\u7b26\uff0c\u8bf7\u6839\u636e\u9700\u8981\u8fdb\u884c\u4fee\u6539\u3002"}
{"task_id": "HumanEval/90", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0next_smallest()\u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```python\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u8fdb\u884c\u5224\u65ad\uff0c\u5982\u679c\u5217\u8868\u957f\u5ea6\u5c0f\u4e8e2\uff0c\u5373\u6ca1\u6709\u7b2c\u4e8c\u5c0f\u7684\u5143\u7d20\uff0c\u5c31\u76f4\u63a5\u8fd4\u56deNone\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u53d8\u91cf\uff1asmallest\u548csecond_smallest\uff0c\u521d\u59cb\u5316\u4e3a\u6b63\u65e0\u7a77\u5927\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u3002\u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8esmallest\uff0c\u6211\u4eec\u5c06smallest\u7684\u503c\u8d4b\u7ed9second_smallest\uff0c\u5e76\u66f4\u65b0smallest\u4e3a\u5f53\u524d\u5143\u7d20\u3002\n\n\u5982\u679c\u5f53\u524d\u5143\u7d20\u5927\u4e8e\u7b49\u4e8esmallest\uff0c\u5e76\u4e14\u5c0f\u4e8esecond_smallest\u5e76\u4e14\u4e0d\u7b49\u4e8esmallest\uff0c\u6211\u4eec\u5c06\u5f53\u524d\u5143\u7d20\u8d4b\u7ed9second_smallest\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u5224\u65adsecond_smallest\u662f\u5426\u4ecd\u7136\u662f\u6b63\u65e0\u7a77\u5927\u3002\u5982\u679c\u662f\uff0c\u5219\u8fd4\u56deNone\uff1b\u5426\u5219\uff0c\u8fd4\u56desecond_smallest\u5373\u53ef\u3002\n\n\u6ce8\u610f\uff0c\u6211\u4eec\u7684\u5b9e\u73b0\u4e2d\u5047\u8bbe\u5217\u8868\u4e2d\u6ca1\u6709\u91cd\u590d\u7684\u5143\u7d20\u3002\u5982\u679c\u5b58\u5728\u91cd\u590d\u5143\u7d20\uff0c\u6211\u4eec\u4f1a\u8df3\u8fc7\u5b83\u3002"}
{"task_id": "HumanEval/91", "completion": "\u8fd9\u662f\u4e00\u4e2a\u5224\u65ad\u7ed9\u5b9a\u5b57\u7b26\u4e32\u4e2d\u6709\u591a\u5c11\u4e2a\u4ee5\u201c\u6211\u201d\u5f00\u5934\u7684\u53e5\u5b50\u7684\u51fd\u6570\u3002\u5b83\u7684\u65b9\u6cd5\u662f\u5148\u5c06\u5b57\u7b26\u4e32\u6309\u53e5\u5b50\u5206\u9694\u7b26\u5206\u6210\u53e5\u5b50\u5217\u8868\uff0c\u7136\u540e\u68c0\u67e5\u6bcf\u4e2a\u53e5\u5b50\u662f\u5426\u4ee5\u201c\u6211\u201d\u5f00\u5934\uff0c\u8ba1\u6570\u6ee1\u8db3\u6761\u4ef6\u7684\u53e5\u5b50\u7684\u4e2a\u6570\u3002\n\n\u4e0b\u9762\u662f\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\n```python\ndef is_bored(S):\n    sentences = S.split('. ')  # \u5206\u5272\u53e5\u5b50\n    sentences = [s.strip() for s in sentences]  # \u53bb\u9664\u7a7a\u683c\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"\u6211\"):\n            count += 1\n    return count\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u793a\u4f8b\u8fdb\u884c\u6d4b\u8bd5\uff1a\n\n```python\nprint(is_bored(\"Hello world\"))  # \u8f93\u51fa0\nprint(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # \u8f93\u51fa1\n```"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\nprint(any_int(5, 2, 7))  # True\nprint(any_int(3, 2, 2))  # False\nprint(any_int(3, -2, 1))  # True\nprint(any_int(3.6, -2.2, 2))  # False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                char = chr(ord(char.lower()) + 2)\n            else:\n                char = char.swapcase()\n        result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "\u60a8\u7684\u4ee3\u7801\u770b\u8d77\u6765\u5df2\u7ecf\u975e\u5e38\u5b8c\u5584\u4e86\uff0c\u6211\u6ca1\u6709\u627e\u5230\u9700\u8981\u6539\u8fdb\u7684\u5730\u65b9\u3002\u4f46\u662f\u6709\u4e00\u70b9\u6211\u9700\u8981\u6307\u51fa\u7684\u662f\uff0c\u5efa\u8bae\u4e0d\u8981\u5c06\u53c2\u6570\u540d\u547d\u540d\u4e3a\"dict\"\uff0c\u8fd9\u662fPython\u7684\u5173\u952e\u5b57\uff0c\u5efa\u8bae\u6539\u4e3a\u5176\u4ed6\u540d\u79f0\uff0c\u4f8b\u5982\"my_dict\"\u3002\n\n\u53e6\u5916\uff0c\u8fd8\u6709\u4e00\u70b9\u53ef\u4ee5\u6539\u8fdb\u7684\u5730\u65b9\u662f\u4f60\u53ef\u4ee5\u6dfb\u52a0\u5bf9\u5b57\u5178\u662f\u5426\u4e3a\u7a7a\u7684\u5224\u65ad\u3002\u5728\u5b57\u5178\u4e3a\u7a7a\u7684\u60c5\u51b5\u4e0b\uff0c\u8be5\u51fd\u6570\u5e94\u8be5\u8fd4\u56deFalse\u3002\u53ef\u4ee5\u901a\u8fc7\u5224\u65ad\u5b57\u5178\u7684\u957f\u5ea6\u662f\u5426\u4e3a0\u6765\u5b9e\u73b0\uff0c\u4f8b\u5982\uff1a\n\n```python\ndef check_dict_case(my_dict):\n    if len(my_dict) == 0:\n        return False\n    # rest of your code\n```\n\n\u5e0c\u671b\u8fd9\u4e9b\u53ef\u4ee5\u5e2e\u52a9\u5230\u60a8\uff01\u5982\u679c\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u63d0\u95ee\u3002"}
{"task_id": "HumanEval/96", "completion": "\u4e0b\u9762\u662f\u5b9e\u73b0\u51fd\u6570count_up_to\u7684\u4ee3\u7801\uff1a\n\n```python\ndef is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n```\n\n\u8fd9\u4e2a\u5b9e\u73b0\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570is_prime\uff0c\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u3002\u5728count_up_to\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e00\u4e2afor\u5faa\u73af\u4ece2\u5230n-1\u904d\u5386\u6bcf\u4e2a\u6570\uff0c\u5e76\u8c03\u7528is_prime\u51fd\u6570\u5224\u65ad\u5b83\u4eec\u662f\u5426\u4e3a\u7d20\u6570\u3002\u5982\u679c\u4e00\u4e2a\u6570\u662f\u7d20\u6570\uff0c\u6211\u4eec\u5c06\u5176\u6dfb\u52a0\u5230primes\u5217\u8868\u4e2d\u3002\u6700\u540e\uff0c\u6211\u4eec\u8fd4\u56deprimes\u5217\u8868\u4f5c\u4e3a\u7ed3\u679c\u3002"}
{"task_id": "HumanEval/97", "completion": "\u5982\u679c\u6211\u4eec\u53ea\u9700\u8981\u8ba1\u7b97\u4e24\u4e2a\u6574\u6570\u7684\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53d6\u6a21\u8fd0\u7b97\u548c\u6574\u9664\u8fd0\u7b97\u6765\u5b9e\u73b0\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n1. \u5c06\u4e24\u4e2a\u6574\u6570\u5206\u522b\u53d6\u6a2110\uff0c\u5f97\u5230\u5b83\u4eec\u7684\u4e2a\u4f4d\u6570\u3002\n2. \u5c06\u4e24\u4e2a\u4e2a\u4f4d\u6570\u76f8\u4e58\uff0c\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u5b9e\u73b0\u4ee3\u7801\uff1a\n\n```\ndef multiply(a, b):\n    # \u83b7\u53d6a\u548cb\u7684\u4e2a\u4f4d\u6570\n    a_digit = a % 10\n    b_digit = b % 10\n\n    # \u8ba1\u7b97\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\n    result = a_digit * b_digit\n\n    return result\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u8ba1\u7b97\u4e24\u4e2a\u6574\u6570\u7684\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\u3002\u5728\u51fd\u6570\u4e2d\u6211\u4eec\u9996\u5148\u901a\u8fc7\u53d6\u6a21\u8fd0\u7b97\u83b7\u53d6\u5230\u4e24\u4e2a\u6574\u6570\u7684\u4e2a\u4f4d\u6570\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u76f8\u4e58\u5e76\u8fd4\u56de\u7ed3\u679c\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u53ea\u8ba1\u7b97\u4e86\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\uff0c\u5982\u679c\u9700\u8981\u8ba1\u7b97\u6574\u4e2a\u6570\u7684\u4e58\u79ef\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u591a\u6b21\u6765\u5b9e\u73b0\u3002"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count\n\nprint(count_upper('aBCdEf'))  # 1\nprint(count_upper('abcdefg'))  # 0\nprint(count_upper('dBBE'))  # 0"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\n    num = float(value)\n    \n    # \u53d6\u6574\u5f97\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\n    closest_int = round(num)\n    \n    # \u5224\u65ad\u6700\u63a5\u8fd1\u7684\u6574\u6570\u79bb0\u7684\u8ddd\u79bb\n    distance_from_zero = abs(closest_int)\n    distance_from_zero_minus_one = abs(closest_int - 1)\n\n    # \u5982\u679c\u8ddd\u79bb\u76f8\u7b49\uff0c\u8fd4\u56de\u79bb\u96f6\u6700\u8fdc\u7684\u6574\u6570\n    if distance_from_zero == distance_from_zero_minus_one:\n        return closest_int if closest_int >= 0 else closest_int - 1\n    else:\n        return closest_int\n\n# \u6d4b\u8bd5\u4f8b\u5b50\nprint(closest_integer(\"10\"))\nprint(closest_integer(\"15.3\"))\nprint(closest_integer(\"14.5\"))\nprint(closest_integer(\"-14.5\"))"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + i)\n        else:\n            stones.append(n + i + 1)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # \u7528\u9017\u53f7\u548c\u7a7a\u683c\u5206\u9694\u5b57\u7b26\u4e32\n    words = s.split(\",\") + s.split(\" \")\n    # \u53bb\u9664\u5355\u8bcd\u524d\u540e\u7684\u7a7a\u683c\n    words = [word.strip() for word in words]\n    # \u53bb\u9664\u7a7a\u5b57\u7b26\u4e32\n    words = [word for word in words if word]\n    return words"}
{"task_id": "HumanEval/102", "completion": "\u6211\u6765\u5e2e\u4f60\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\uff1a\n\n```python\ndef choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u8bbe\u7f6e\u4e00\u4e2a\u53d8\u91cf`max_even`\uff0c\u7528\u6765\u4fdd\u5b58\u6700\u5927\u7684\u5076\u6570\u3002\u7136\u540e\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u6765\u904d\u5386\u4ecex\u5230y\u8303\u56f4\u5185\u7684\u6240\u6709\u6570\u5b57\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u904d\u5386\u5230\u7684\u6570\u5b57\uff0c\u5982\u679c\u5b83\u662f\u5076\u6570\u4e14\u5927\u4e8e`max_even`\uff0c\u5c31\u66f4\u65b0`max_even`\u4e3a\u5f53\u524d\u6570\u5b57\u3002\u6700\u540e\uff0c\u8fd4\u56de\u6700\u5927\u7684\u5076\u6570\u3002"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) // 2\n        return bin(average)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u5217\u8868x\uff0c\u8fd4\u56de\u6ca1\u6709\u5076\u6570\u7684\u6240\u6709\u5143\u7d20\u7684\u6709\u5e8f\u5217\u8868\u3002\n\n    \u6ce8\u610f: \u8fd4\u56de\u7684\u5217\u8868\u5e94\u6309\u9012\u589e\u987a\u5e8f\u6392\u5e8f\u3002\n    \n    \u4f8b\u5982:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "\u4ee5\u4e0b\u662f\u6211\u7684\u89e3\u51b3\u65b9\u6848\uff1a\n\n```python\ndef by_length(arr):\n    # \u5c06\u6570\u7ec4\u4e2d\u7684\u975e\u4e00\u5230\u4e5d\u7684\u6570\u5b57\u8fc7\u6ee4\u6389\n    arr = [x for x in arr if 1 <= x <= 9]\n    \n    # \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u548c\u53cd\u8f6c\n    arr.sort()\n    arr.reverse()\n    \n    # \u4f7f\u7528\u5b57\u5178\u5c06\u6570\u5b57\u6620\u5c04\u4e3a\u5bf9\u5e94\u7684\u540d\u79f0\n    num_map = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    # \u5c06\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u540d\u79f0\n    arr = [num_map[x] for x in arr]\n    \n    return arr\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5c06\u6570\u7ec4\u4e2d\u975e\u4e00\u5230\u4e5d\u7684\u6570\u5b57\u8fc7\u6ee4\u6389\uff0c\u7136\u540e\u8fdb\u884c\u6392\u5e8f\u548c\u53cd\u8f6c\u64cd\u4f5c\u3002\u6700\u540e\uff0c\u4f7f\u7528\u4e00\u4e2a\u5b57\u5178\u5c06\u6570\u5b57\u6620\u5c04\u4e3a\u5bf9\u5e94\u7684\u540d\u79f0\uff0c\u5e76\u5c06\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u66ff\u6362\u4e3a\u540d\u79f0\u3002\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u6570\u7ec4\u3002"}
{"task_id": "HumanEval/106", "completion": "\u8fd9\u4e2a\u51fd\u6570\u7684\u5b9e\u73b0\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u6765\u904d\u53861\u5230n\uff0c\u5e76\u6839\u636e\u7d22\u5f15\u7684\u5947\u5076\u6027\u6765\u8ba1\u7b97\u4e0d\u540c\u7684\u503c\uff0c\u7136\u540e\u5c06\u7ed3\u679c\u6dfb\u52a0\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u8fd4\u56de\u3002\n\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a\n\n```python\ndef f(n):\n    result = []\n    factorial = 1\n    total_sum = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n            result.append(factorial)\n        else:\n            total_sum += i\n            result.append(total_sum)\n\n    return result\n```\n\n\u6d4b\u8bd5\u4ee3\u7801\uff1a\n\n```python\nprint(f(5))  # [1, 2, 6, 24, 15]\nprint(f(10))  # [1, 2, 6, 24, 15, 1, 1, 3, 15, 105]\n```\n\n\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f97\u5230\u6839\u636e\u9898\u76ee\u8981\u6c42\u8fd4\u56de\u7684\u5217\u8868\u4e86\u3002"}
{"task_id": "HumanEval/107", "completion": "\u4e0b\u9762\u662f\u5b9e\u73b0even_odd_palindrome\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\n```python\ndef even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\ndef is_palindrome(num):\n    # \u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32\n    s = str(num)\n    return s == s[::-1]\n```\n\n\u9996\u5148\uff0c\u6211\u4eec\u521d\u59cb\u5316\u4e24\u4e2a\u8ba1\u6570\u5668`even_count`\u548c`odd_count`\uff0c\u7528\u4e8e\u8bb0\u5f55\u5076\u6570\u548c\u5947\u6570\u56de\u6587\u7684\u6570\u91cf\u3002\n\u7136\u540e\uff0c\u6211\u4eec\u901a\u8fc7\u5faa\u73af\u4ece1\u5230n\u904d\u5386\u6240\u6709\u6574\u6570\u3002\n\u5728\u5faa\u73af\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528`is_palindrome`\u51fd\u6570\u6765\u68c0\u67e5\u5f53\u524d\u7684\u6570\u5b57\u662f\u5426\u662f\u56de\u6587\u6570\u3002\n\u5982\u679c\u662f\u56de\u6587\u6570\uff0c\u6211\u4eec\u5c06\u6839\u636e\u5176\u5947\u5076\u6027\u589e\u52a0\u76f8\u5e94\u7684\u8ba1\u6570\u5668\u3002\n\u6700\u540e\uff0c\u6211\u4eec\u8fd4\u56de\u5305\u542b\u5076\u6570\u548c\u5947\u6570\u56de\u6587\u6570\u91cf\u7684\u5143\u7ec4\u3002\n\n`is_palindrome`\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u662f\u56de\u6587\u6570\u3002\n\u6211\u4eec\u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u4e0e\u9006\u8f6c\u540e\u7684\u5b57\u7b26\u4e32\u8fdb\u884c\u6bd4\u8f83\u3002\n\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\uff0c\u5219\u8be5\u6570\u5b57\u662f\u56de\u6587\u6570\u3002"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for i in arr:\n        if i < 0:\n            i = -i\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if sum_of_digits > 0:\n            count += 1\n    return count\n\nassert count_nums([]) == 0\nassert count_nums([-1, 11, -11]) == 1\nassert count_nums([1, 1, 2]) == 3"}
{"task_id": "HumanEval/109", "completion": "\u8be5\u51fd\u6570\u7684\u76ee\u6807\u662f\u5224\u65ad\u7ed9\u5b9a\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u53f3\u79fb\u64cd\u4f5c\u53d8\u4e3a\u975e\u9012\u51cf\u987a\u5e8f\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u5219\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u4e00\u4e9b\u8fb9\u754c\u60c5\u51b5\u3002\u5982\u679c\u7ed9\u5b9a\u6570\u7ec4\u4e3a\u7a7a\uff0c\u5219\u65e0\u9700\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u53ef\u4ee5\u89c6\u4e3a\u7a7a\u6570\u7ec4\u662f\u5df2\u7ecf\u662f\u975e\u9012\u51cf\u987a\u5e8f\uff0c\u6240\u4ee5\u8fd4\u56deTrue\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u6570\u7ec4\u975e\u9012\u51cf\u6392\u5e8f\u7684\u6027\u8d28\u3002\u5982\u679c\u7ed9\u5b9a\u6570\u7ec4\u5df2\u7ecf\u662f\u975e\u9012\u51cf\u987a\u5e8f\uff0c\u6211\u4eec\u65e0\u9700\u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u76f4\u63a5\u8fd4\u56deTrue\u3002\n\n\u73b0\u5728\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u901a\u8fc7\u6267\u884c\u53f3\u79fb\u64cd\u4f5c\u6765\u5f97\u5230\u975e\u9012\u51cf\u987a\u5e8f\u3002\u89c2\u5bdf\u53f3\u79fb\u64cd\u4f5c\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4efb\u610f\u7ed9\u5b9a\u7684\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u79fb\u52a8\u5230\u6570\u7ec4\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u6700\u7ec8\u4f1a\u4f7f\u5f97\u6570\u7ec4\u4e2d\u7684\u6700\u5927\u5143\u7d20\u4f4d\u4e8e\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u7ee7\u7eed\u6267\u884c\u53f3\u79fb\u64cd\u4f5c\u6765\u79fb\u52a8\u5269\u4e0b\u7684\u5143\u7d20\uff0c\u4f7f\u5f97\u6570\u7ec4\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7b49\u4e8e\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u7684\u5143\u7d20\u503c\uff0c\u5219\u6570\u7ec4\u4ecd\u7136\u4fdd\u6301\u975e\u9012\u51cf\u987a\u5e8f\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8ba1\u7b97\u6700\u5927\u5143\u7d20\u7684\u4f4d\u7f6e\u4e0e\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u4f4d\u7f6e\u4e4b\u5dee\u6765\u5224\u65ad\u6570\u7ec4\u662f\u5426\u53ef\u4ee5\u901a\u8fc7\u53f3\u79fb\u64cd\u4f5c\u5f97\u5230\u975e\u9012\u51cf\u987a\u5e8f\u3002\u5982\u679c\u5dee\u503c\u5927\u4e8e1\uff0c\u5219\u8868\u793a\u6700\u5927\u5143\u7d20\u65e0\u6cd5\u79fb\u52a8\u5230\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u6765\u4fdd\u6301\u975e\u9012\u51cf\u987a\u5e8f\uff0c\u8fd4\u56deFalse\uff1b\u5426\u5219\uff0c\u8fd4\u56deTrue\u3002\n\n\u4e0b\u9762\u662f\u6211\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a\n\n```\ndef move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    if sorted(arr) == arr:\n        return True\n    \n    max_idx = arr.index(max(arr))\n    return abs(max_idx - 0) <= 1\n```\n\n\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = sum(x % 2 == 0 for x in lst1)\n    if even_count == len(lst1):\n        return \"YES\"\n    \n    for num in lst1:\n        if num % 2 != 0:\n            if (num + 1) in lst2 and lst2.count(num + 1) > 1:\n                return \"YES\"\n            elif (num - 1) in lst2 and lst2.count(num -1) > 1:\n                return \"YES\"\n\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "\u4e0b\u9762\u662f\u5b9e\u73b0\u8be5\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\n```python\ndef histogram(test):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178\u7528\u4e8e\u5b58\u50a8\u5b57\u6bcd\u548c\u5b83\u4eec\u7684\u51fa\u73b0\u6b21\u6570\n    result = {}\n    \n    # \u5c06\u5b57\u7b26\u4e32\u6309\u7a7a\u683c\u5206\u5272\u6210\u5355\u8bcd\n    words = test.split(' ')\n\n    # \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\n    for word in words:\n        # \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        if word in result:\n            # \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u589e\u52a0\u5b83\u7684\u51fa\u73b0\u6b21\u6570\n            result[word] += 1\n        else:\n            # \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5c06\u5b83\u6dfb\u52a0\u5230\u5b57\u5178\uff0c\u5e76\u5c06\u51fa\u73b0\u6b21\u6570\u8bbe\u4e3a1\n            result[word] = 1\n    \n    # \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\n    max_count = max(result.values())\n    \n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178\u7528\u4e8e\u5b58\u50a8\u91cd\u590d\u6b21\u6570\u6700\u591a\u7684\u5b57\u6bcd\u53ca\u5176\u76f8\u5e94\u7684\u51fa\u73b0\u6b21\u6570\n    final_result = {}\n    \n    # \u904d\u5386\u6bcf\u4e2a\u5b57\u6bcd\u53ca\u5176\u51fa\u73b0\u6b21\u6570\n    for letter, count in result.items():\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e\u6700\u5927\u6b21\u6570\uff0c\u5c06\u5b83\u6dfb\u52a0\u5230\u6700\u7ec8\u7ed3\u679c\u5b57\u5178\u4e2d\n        if count == max_count:\n            final_result[letter] = count\n    \n    return final_result\n```\n\n\u8be5\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\uff0c\u5176\u4e2dn\u662f\u8f93\u5165\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # \u5c06\u5b57\u7b26\u4e32s\u8f6c\u6362\u4e3a\u5217\u8868\uff0c\u65b9\u4fbf\u5220\u9664\u64cd\u4f5c\n    s_list = list(s)\n    \n    # \u5220\u9664s\u4e2d\u7b49\u4e8ec\u4e2d\u4efb\u610f\u5b57\u7b26\u7684\u5b57\u7b26\n    for char in c:\n        s_list = [ch for ch in s_list if ch != char]\n    \n    # \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    s_new = ''.join(s_list)\n    \n    # \u68c0\u67e5\u7ed3\u679c\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587\n    if s_new == s_new[::-1]:\n        return s_new, True\n    else:\n        return s_new, False"}
{"task_id": "HumanEval/113", "completion": "\u8fd9\u662f\u4e00\u4e2a\u8ba1\u7b97\u5b57\u7b26\u4e32\u5217\u8868\u4e2d\u5947\u6570\u6570\u5b57\u4e2a\u6570\u7684\u51fd\u6570\u3002\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u5b9e\u73b0\uff1a\n\n```python\ndef odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(int(d) % 2 != 0 for d in s)\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u4e86\u4e24\u4e2a\u53d8\u91cf\uff1a`result`\u548c`odd_count`\u3002`result`\u7528\u4e8e\u5b58\u50a8\u6700\u7ec8\u7684\u7ed3\u679c\u5217\u8868\uff0c`odd_count`\u7528\u4e8e\u8ba1\u7b97\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u5947\u6570\u6570\u5b57\u7684\u4e2a\u6570\u3002\n\n\u51fd\u6570\u4e2d\u7684`enumerate(lst, 1)`\u7528\u4e8e\u904d\u5386\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u5e76\u4e3a\u6bcf\u4e2a\u5b57\u7b26\u4e32\u6dfb\u52a0\u4e00\u4e2a\u7d22\u5f15\u503c\uff0c\u4ece1\u5f00\u59cb\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u901a\u8fc7sum\u51fd\u6570\u548c\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u8ba1\u7b97\u6bcf\u4e2a\u5b57\u7b26\u4e32\u4e2d\u5947\u6570\u6570\u5b57\u7684\u4e2a\u6570\u3002\u751f\u6210\u5668\u8868\u8fbe\u5f0f`(int(d) % 2 != 0 for d in s)`\u901a\u8fc7\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\uff0c\u5c06\u5176\u8f6c\u6362\u4e3a\u6574\u6570\u540e\u5224\u65ad\u662f\u5426\u4e3a\u5947\u6570\u3002\u5982\u679c\u662f\u5947\u6570\uff0c\u5219\u7ed3\u679c\u4e3aTrue\uff0c\u5426\u5219\u4e3aFalse\u3002sum\u51fd\u6570\u5c06\u8fd9\u4e9bTrue\u8ba1\u6570\u8d77\u6765\uff0c\u5f97\u5230\u5947\u6570\u6570\u5b57\u7684\u4e2a\u6570\u3002\n\n\u6700\u540e\uff0c\u5c06\u8ba1\u7b97\u5f97\u5230\u7684\u5947\u6570\u6570\u5b57\u4e2a\u6570\u548c\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u6210\u9700\u8981\u7684\u8f93\u51fa\u7ed3\u679c\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868`result`\u4e2d\u3002\n\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6d4b\u8bd5\u51fd\u6570\uff1a\n\n```python\nprint(odd_count(['1234567']))\nprint(odd_count(['3', '11111111']))\n```\n\n\u8f93\u51fa\u7ed3\u679c\u5e94\u8be5\u4e0e\u9898\u76ee\u793a\u4f8b\u4e2d\u7684\u4e00\u81f4\u3002"}
{"task_id": "HumanEval/114", "completion": "\u8be5\u51fd\u6570\u7684\u5b9e\u73b0\u601d\u8def\u662f\u904d\u5386\u6570\u7ec4\uff0c\u6bcf\u6b21\u5c06\u5f53\u524d\u5143\u7d20\u52a0\u5165\u4e00\u4e2a\u4e34\u65f6\u6570\u7ec4temp\u3002\u5982\u679ctemp\u7684\u548c\u5927\u4e8e0\uff0c\u5219\u7ee7\u7eed\u6dfb\u52a0\u5143\u7d20\uff1b\u5982\u679ctemp\u7684\u548c\u5c0f\u4e8e\u7b49\u4e8e0\uff0c\u5219\u79fb\u9664\u6389\u4e4b\u524d\u6dfb\u52a0\u7684\u5143\u7d20\uff0c\u91cd\u65b0\u5f00\u59cb\u3002\u63a5\u7740\u6bd4\u8f83\u5f53\u524d\u7684\u6700\u5c0f\u548c\u4e0etemp\u7684\u548c\uff0c\u66f4\u65b0\u6700\u5c0f\u548c\u7684\u503c\u3002\u904d\u5386\u5b8c\u6210\u540e\uff0c\u6700\u5c0f\u548c\u5373\u4e3a\u6240\u6c42\u3002\n\u4ee5\u4e0b\u662f\u4ee3\u7801\u5b9e\u73b0\uff1a\n\ndef minSubArraySum(nums):\n    # \u521d\u59cb\u5316\u6700\u5c0f\u548c\u4e3a\u6b63\u65e0\u7a77\u5927\n    min_sum = float('inf')\n    # \u521d\u59cb\u5316\u4e34\u65f6\u6570\u7ec4\n    temp = []\n    # \u904d\u5386\u8f93\u5165\u6570\u7ec4\n    for num in nums:\n        # \u5c06\u5f53\u524d\u5143\u7d20\u6dfb\u52a0\u5230\u4e34\u65f6\u6570\u7ec4\n        temp.append(num)\n        # \u5f53\u4e34\u65f6\u6570\u7ec4\u7684\u548c\u5927\u4e8e0\u65f6\uff0c\u7ee7\u7eed\u6dfb\u52a0\u5143\u7d20\n        if sum(temp) > 0:\n            continue\n        else:\n            # \u5f53\u4e34\u65f6\u6570\u7ec4\u7684\u548c\u5c0f\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u79fb\u9664\u6389\u4e4b\u524d\u6dfb\u52a0\u7684\u5143\u7d20\n            while sum(temp) <= 0:\n                temp.pop(0)\n        # \u6bd4\u8f83\u5f53\u524d\u7684\u6700\u5c0f\u548c\u4e0e\u4e34\u65f6\u6570\u7ec4\u7684\u548c\uff0c\u66f4\u65b0\u6700\u5c0f\u548c\u7684\u503c\n        min_sum = min(min_sum, sum(temp))\n    \n    return min_sum\n\n\u8fd0\u884c\u4f8b\u5b50\uff1a\n\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # \u8f93\u51fa\uff1a1\nprint(minSubArraySum([-1, -2, -3]))        # \u8f93\u51fa\uff1a-6"}
{"task_id": "HumanEval/115", "completion": "\u89e3\u6cd5\u5982\u4e0b\uff1a\n\n1. \u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u904d\u5386\u6240\u6709\u7684\u4e95\uff0c\u5e76\u5c06\u6bcf\u53e3\u4e95\u4e2d\u7684\u6c34\u91cf\u5b58\u50a8\u5230\u4e00\u4e2a\u5217\u8868\u4e2d\u3002\n2. \u7136\u540e\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u6bcf\u53e3\u4e95\u4e2d\u5012\u6c34\u7684\u6b21\u6570\u3002\u904d\u5386\u6bcf\u4e00\u4e2a\u4e95\u7684\u6c34\u91cf\uff0c\u5e76\u5c06\u5176\u4e0e\u6876\u7684\u5bb9\u91cf\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e95\u4e2d\u7684\u6c34\u91cf\u5927\u4e8e\u6876\u7684\u5bb9\u91cf\uff0c\u5219\u6bcf\u6b21\u5012\u6c34\u90fd\u9700\u8981\u51cf\u5c11\u4e95\u4e2d\u7684\u6c34\u91cf\uff0c\u5e76\u8bb0\u5f55\u5012\u6c34\u7684\u6b21\u6570\u3002\n3. \u6700\u540e\uff0c\u8fd4\u56de\u5012\u6c34\u7684\u603b\u6b21\u6570\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n\n```python\ndef max_fill(grid, capacity):\n    # \u8ba1\u7b97\u6bcf\u53e3\u4e95\u4e2d\u7684\u6c34\u91cf\n    water = []\n    for row in grid:\n        water.append(sum(row))\n\n    # \u8ba1\u7b97\u5012\u6c34\u7684\u6b21\u6570\n    count = 0\n    for w in water:\n        while w > 0:\n            w -= capacity\n            count += 1\n\n    return count\n```\n\n\u8fd9\u4e2a\u89e3\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(n)\uff0c\u5176\u4e2d n \u662f\u4e95\u7684\u6570\u91cf\u3002"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            if num % 2 == 1:\n                count += 1\n            num = num // 2\n        return count\n\n    arr.sort()\n    return sorted(arr, key=count_ones)"}
{"task_id": "HumanEval/117", "completion": "\u4e0b\u9762\u662f\u6211\u5b9e\u73b0\u7684`select_words`\u51fd\u6570\uff1a\n\n```python\ndef select_words(s, n):\n    if not s:\n        return []\n    \n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = 0\n        for char in word:\n            if char in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    \n    return result\n```\n\n\u8be5\u51fd\u6570\u9996\u5148\u68c0\u67e5\u5b57\u7b26\u4e32`s`\u662f\u5426\u4e3a\u7a7a\uff0c\u5982\u679c\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de\u4e00\u4e2a\u7a7a\u5217\u8868\u3002\u7136\u540e\uff0c\u5b83\u5c06\u5b57\u7b26\u4e32`s`\u5206\u5272\u6210\u5355\u8bcd\u5217\u8868\uff0c\u5e76\u521d\u59cb\u5316\u4e00\u4e2a\u7a7a\u5217\u8868`result`\u6765\u5b58\u50a8\u6ee1\u8db3\u6761\u4ef6\u7684\u5355\u8bcd\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u51fd\u6570\u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u8ba1\u6570\u5668\u53d8\u91cf`count`\u6765\u8ba1\u7b97\u5355\u8bcd\u4e2d\u7684\u8f85\u97f3\u6570\u3002\u5982\u679c`count`\u7b49\u4e8e\u7ed9\u5b9a\u7684\u8f85\u97f3\u6570`n`\uff0c\u5219\u5c06\u8be5\u5355\u8bcd\u6dfb\u52a0\u5230`result`\u5217\u8868\u4e2d\u3002\n\n\u6700\u540e\uff0c\u51fd\u6570\u8fd4\u56de`result`\u5217\u8868\u3002"}
{"task_id": "HumanEval/118", "completion": "\u4ee5\u4e0b\u662f\u6211\u7ed9\u51fa\u7684\u89e3\u6cd5\uff1a\n\ndef get_closest_vowel(word):\n    vowels = set('aeiou')\n    word = word.lower()\n    for i in range(1, len(word)-1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i].upper()\n    return \"\"\n\n\u6211\u4f7f\u7528\u4e86\u4e00\u4e2a\u96c6\u5408\u6765\u5b58\u50a8\u6240\u6709\u7684\u5143\u97f3\u5b57\u6bcd\u3002\u7136\u540e\uff0c\u6211\u5c06\u8f93\u5165\u7684\u5355\u8bcd\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u5e76\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u3002\u5bf9\u4e8e\u4f4d\u4e8e\u4e2d\u95f4\u7684\u5143\u97f3\u5b57\u7b26\uff0c\u6211\u68c0\u67e5\u5176\u524d\u540e\u662f\u5426\u4e3a\u8f85\u97f3\u5b57\u7b26\u3002\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5c06\u8be5\u5143\u97f3\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199\u5e76\u8fd4\u56de\u3002\u5982\u679c\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u5143\u97f3\u5b57\u6bcd\uff0c\u5219\u8fd4\u56de\u7a7a\u5b57\u7b26\u4e32\u3002\n\n\u5e0c\u671b\u8fd9\u4e2a\u89e3\u6cd5\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01\u5982\u679c\u4f60\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u8bf7\u968f\u65f6\u63d0\u95ee\u3002"}
{"task_id": "HumanEval/119", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u5b9e\u73b0\u65b9\u6cd5\uff1a\n\n```python\ndef match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n\n    count1 = 0\n    count2 = 0\n\n    for c in s1:\n        if c == '(':\n            count1 += 1\n        elif c == ')':\n            count1 -= 1\n\n    for c in s2:\n        if c == '(':\n            count2 += 1\n        elif c == ')':\n            count2 -= 1\n\n    if count1 == count2:\n        return 'Yes'\n    else:\n        return 'No'\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5c06\u7ed9\u5b9a\u7684\u4e24\u4e2a\u5b57\u7b26\u4e32\u5206\u522b\u4fdd\u5b58\u5728`s1`\u548c`s2`\u4e2d\u3002\u7136\u540e\uff0c\u5206\u522b\u4f7f\u7528`count1`\u548c`count2`\u53d8\u91cf\u6765\u8ba1\u7b97`s1`\u548c`s2`\u4e2d`(`\u548c`)`\u7684\u6570\u91cf\u5dee\u3002\n\n\u6700\u540e\uff0c\u5c06`count1`\u548c`count2`\u8fdb\u884c\u6bd4\u8f83\uff0c\u5982\u679c\u76f8\u7b49\uff0c\u5219\u8fd4\u56de'Yes'\uff0c\u5426\u5219\u8fd4\u56de'No'\u3002\n\n\u53ef\u4ee5\u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u8c03\u7528\u8be5\u51fd\u6570\uff1a\n\n```python\nresult = match_parens(['()(', ')'])\nprint(result)  # \u8f93\u51fa 'Yes'\n\nresult = match_parens([')', ')'])\nprint(result)  # \u8f93\u51fa 'No'\n```"}
{"task_id": "HumanEval/120", "completion": "\u4ee5\u4e0b\u662f\u5b9e\u73b0\u8be5\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\n```python\ndef maximum(arr, k):\n    if k == 0:\n        return []\n    \n    # \u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7528\u4e8e\u4fdd\u5b58\u6570\u7ec4\u4e2d\u7684k\u4e2a\u6700\u5927\u6570\n    heap = []\n    \n    # \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u6700\u5c0f\u5806\u4e2d\n    for num in arr:\n        # \u5982\u679c\u6700\u5c0f\u5806\u7684\u5143\u7d20\u6570\u91cf\u5c0f\u4e8ek\uff0c\u5219\u76f4\u63a5\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u4e2d\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u4e2d\n            if num > heap[0]:\n                heapq.heappushpop(heap, num)\n    \n    # \u8fd4\u56de\u5806\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5373\u4e3a\u6700\u5927\u7684k\u4e2a\u6570\n    return heap\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u5229\u7528\u6700\u5c0f\u5806\u5b9e\u73b0\u4e86\u4e00\u4e2a\u52a8\u6001\u5730\u4fdd\u5b58\u6700\u5927\u7684k\u4e2a\u6570\u7684\u7b97\u6cd5\u3002\u9996\u5148\u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7136\u540e\u904d\u5386\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\uff0c\u5982\u679c\u5806\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u5c0f\u4e8ek\uff0c\u5c31\u76f4\u63a5\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u4e2d\uff1b\u5982\u679c\u5806\u4e2d\u7684\u5143\u7d20\u6570\u91cf\u8fbe\u5230k\uff0c\u5e76\u4e14\u5f53\u524d\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u4e2d\u3002\u8fd9\u6837\u904d\u5386\u5b8c\u6210\u540e\uff0c\u5806\u4e2d\u4fdd\u5b58\u7684\u5c31\u662f\u6570\u7ec4\u4e2d\u6700\u5927\u7684k\u4e2a\u6570\u4e86\u3002\n\n\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662fO(Nlogk)\uff0c\u5176\u4e2dN\u662f\u6570\u7ec4\u7684\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    # \u521d\u59cb\u5316\u5947\u6570\u5143\u7d20\u548c\n    sum_of_odd_elements = 0\n    \n    # \u904d\u5386\u5217\u8868\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\uff0c\u6b65\u957f\u4e3a2\n    for i in range(1, len(lst), 2):\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a\u5947\u6570\uff0c\u5219\u5c06\u5176\u52a0\u5230\u5947\u6570\u5143\u7d20\u548c\u4e2d\n        if lst[i] % 2 != 0:\n            sum_of_odd_elements += lst[i]\n    \n    # \u8fd4\u56de\u5947\u6570\u5143\u7d20\u548c\n    return sum_of_odd_elements\n\n# \u6d4b\u8bd5\nprint(solution([5, 8, 7, 1]))  # 12\nprint(solution([3, 3, 3, 3, 3]))  # 9\nprint(solution([30, 13, 24, 321]))  # 0"}
{"task_id": "HumanEval/122", "completion": "\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\uff1a\n\n1. \u5bf9\u6570\u7ec4arr\u8fdb\u884c\u6392\u5e8f\uff0c\u4ee5\u4fbf\u524dk\u4e2a\u5143\u7d20\u6700\u591a\u6709\u4e24\u4f4d\u6570\u5b57\u7684\u5143\u7d20\u6392\u5728\u524d\u9762\u3002\n2. \u521d\u59cb\u5316\u4e00\u4e2a\u53d8\u91cfsum\u6765\u4fdd\u5b58\u548c\uff0c\u521d\u59cb\u503c\u4e3a0\u3002\n3. \u904d\u5386\u6570\u7ec4arr\u7684\u524dk\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u662f\u4e24\u4f4d\u6570\u5b57\u6216\u8005\u66f4\u5c0f\u7684\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5230sum\u4e2d\u3002\n4. \u8fd4\u56desum\u4f5c\u4e3a\u7ed3\u679c\u3002\n\n\u4e0b\u9762\u662f\u5b9e\u73b0\u7684\u4ee3\u7801\uff1a\n\n```python\ndef add_elements(arr, k):\n    arr.sort()  # \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sum = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            sum += arr[i]\n    return sum\n```\n\n\u8fd9\u4e2a\u5b9e\u73b0\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(nlogn)\uff0c\u5176\u4e2d n \u662farr\u7684\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz = [n]  # \u521d\u59cb\u5316collatz\u5e8f\u5217\u4e3an\n    while n != 1:  # \u5f53n\u4e0d\u7b49\u4e8e1\u65f6\u5faa\u73af\n        if n % 2 == 0:  # \u5982\u679cn\u662f\u5076\u6570\n            n //= 2  # \u5c06n\u9664\u4ee52\n        else:  # \u5982\u679cn\u662f\u5947\u6570\n            n = 3 * n + 1  # \u5c06n\u4e58\u4ee53\u518d\u52a01\n        collatz.append(n)  # \u5c06n\u6dfb\u52a0\u5230collatz\u5e8f\u5217\u4e2d\n\n    # \u7b5b\u9009\u51fa\u5947\u6570\u5e76\u6392\u5e8f\n    odd_collatz = [x for x in collatz if x % 2 != 0]\n    odd_collatz.sort()\n\n    return odd_collatz"}
{"task_id": "HumanEval/124", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0valid_date\u51fd\u6570\u7684\u4f8b\u5b50\uff1a\n\n```python\ndef valid_date(date):\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n\n    month, day, year = date.split('-')\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or (month == 2 and day > 29) or (month in [4, 6, 9, 11] and day > 30) or (day > 31):\n        return False\n\n    return True\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u68c0\u67e5\u65e5\u671f\u5b57\u7b26\u4e32\u957f\u5ea6\u548c\u5206\u9694\u7b26\u7684\u6570\u91cf\u662f\u5426\u6b63\u786e\uff0c\u4e0d\u6b63\u786e\u5219\u8fd4\u56deFalse\u3002\n\n\u7136\u540e\uff0c\u5b83\u4f7f\u7528split\u51fd\u6570\u5c06\u65e5\u671f\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u6708\u3001\u5929\u548c\u5e74\uff0c\u5e76\u5c1d\u8bd5\u5c06\u5b83\u4eec\u8f6c\u6362\u4e3a\u6574\u6570\u3002\u5982\u679c\u8f6c\u6362\u5931\u8d25\uff0c\u5219\u8fd4\u56deFalse\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u51fd\u6570\u68c0\u67e5\u6708\u4efd\u662f\u5426\u5728\u8303\u56f41\u523012\u4e4b\u5185\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56deFalse\u3002\n\n\u6700\u540e\uff0c\u51fd\u6570\u68c0\u67e5\u6bcf\u4e2a\u6708\u4efd\u5bf9\u5e94\u7684\u5929\u6570\u662f\u5426\u5728\u5408\u7406\u8303\u56f4\u5185\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u5219\u8fd4\u56deFalse\u3002\u5177\u4f53\u7684\u89c4\u5219\u5728\u51fd\u6570\u5185\u90e8\u6709\u8be6\u7ec6\u6ce8\u91ca\u3002\n\n\u5982\u679c\u6240\u6709\u7684\u68c0\u67e5\u90fd\u901a\u8fc7\u4e86\uff0c\u5219\u8fd4\u56deTrue\uff0c\u8868\u793a\u65e5\u671f\u6709\u6548\u3002\n\n\u5e0c\u671b\u8fd9\u4e2a\u4f8b\u5b50\u5bf9\u60a8\u6709\u5e2e\u52a9\uff01"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff1a\n\n```python\ndef is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    return sorted(lst) == lst\n```\n\n\u8be5\u51fd\u6570\u9996\u5148\u4f7f\u7528 `set` \u51fd\u6570\u6765\u53bb\u9664\u5217\u8868\u4e2d\u7684\u91cd\u590d\u5143\u7d20\uff0c\u5e76\u4e0e\u539f\u5217\u8868\u957f\u5ea6\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u957f\u5ea6\u4e0d\u540c\uff0c\u8bf4\u660e\u5b58\u5728\u591a\u4e8e\u4e00\u4e2a\u526f\u672c\u7684\u76f8\u540c\u6570\u5b57\uff0c\u8fd4\u56de False\u3002\n\n\u7136\u540e\uff0c\u51fd\u6570\u5bf9\u7ed9\u5b9a\u5217\u8868\u8fdb\u884c\u6392\u5e8f\uff0c\u7136\u540e\u5c06\u6392\u5e8f\u540e\u7684\u5217\u8868\u4e0e\u539f\u5217\u8868\u8fdb\u884c\u6bd4\u8f83\u3002\u5982\u679c\u4e8c\u8005\u76f8\u540c\uff0c\u5219\u8bf4\u660e\u5217\u8868\u662f\u6309\u5347\u5e8f\u6392\u5217\u7684\uff0c\u8fd4\u56de True\uff1b\u5426\u5219\uff0c\u8fd4\u56de False\u3002\n\n\u4e0b\u9762\u662f\u8be5\u51fd\u6570\u7684\u4f7f\u7528\u793a\u4f8b\uff1a\n\n```python\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False\n```\n\n\u4ee5\u4e0a\u8f93\u51fa\u7b26\u5408\u9898\u76ee\u8981\u6c42\u7684\u9884\u671f\u7ed3\u679c\u3002"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "The function `prod_signs` calculates the product of the sum of the absolute values of all numbers in the input list `arr`, multiplied by the product of all the signs of the numbers.\n\nThe function first checks if the input list is empty and returns `None` if it is. \n\n```python\nif len(arr) == 0:\n    return None\n```\n\nThen, the function initializes two variables: `sum_abs` to keep track of the sum of the absolute values of the numbers, and `sign_product` to keep track of the product of the signs.\n\n```python\nsum_abs = 0\nsign_product = 1\n```\n\nNext, the function iterates over each number in the input list. For each number, it adds its absolute value to `sum_abs` and multiplies `sign_product` by its sign.\n\n```python\nfor num in arr:\n    sum_abs += abs(num)\n    sign_product *= 1 if num >= 0 else -1\n```\n\nFinally, the function returns the product of `sum_abs` and `sign_product`.\n\n```python\nreturn sum_abs * sign_product\n```"}
{"task_id": "HumanEval/129", "completion": "\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u51fd\u6570minPath\uff0c\u7528\u4e8e\u5728\u7f51\u683c\u4e2d\u627e\u5230\u957f\u5ea6\u4e3ak\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u5e76\u8fd4\u56de\u6700\u5c0f\u8def\u5f84\u7ecf\u8fc7\u7684\u5355\u5143\u683c\u4e0a\u7684\u503c\u7684\u6709\u5e8f\u5217\u8868\u3002\n\n\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u4e3a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683cgrid\u548c\u4e00\u4e2a\u6b63\u6574\u6570k\u3002\u7f51\u683c\u7684\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u5305\u542b\u4e00\u4e2a\u503c\uff0c\u4e14\u5728[1, N * N]\u8303\u56f4\u5185\u3002\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u5c0f\u8def\u5f84\u7ecf\u8fc7\u7684\u5355\u5143\u683c\u503c\u7684\u6709\u5e8f\u5217\u8868\u3002\n\n\u51fd\u6570\u7684\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n1. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfvisited\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u5355\u5143\u683c\uff0c\u521d\u59cb\u503c\u4e3a\u7a7a\u96c6\u5408\u3002\n2. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfn\uff0c\u7528\u4e8e\u8868\u793a\u7f51\u683c\u7684\u5927\u5c0f\uff0c\u5373\u884c\u6570\u6216\u5217\u6570\u3002\n3. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfcur\uff0c\u8868\u793a\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u503c\u4e3a\u4efb\u610f\u4e00\u4e2a\u5355\u5143\u683c\u7684\u5750\u6807\u3002\n4. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfpath\uff0c\u7528\u4e8e\u8bb0\u5f55\u8def\u5f84\u7ecf\u8fc7\u7684\u5355\u5143\u683c\u4e0a\u7684\u503c\uff0c\u521d\u59cb\u503c\u4e3a\u4e00\u4e2a\u7a7a\u5217\u8868\u3002\n5. \u8fdb\u5165\u5faa\u73af\uff0c\u76f4\u5230\u627e\u5230\u957f\u5ea6\u4e3ak\u7684\u6700\u5c0f\u8def\u5f84\u6216\u904d\u5386\u5b8c\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u4e3a\u6b62\u3002\n   a. \u5c06\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u6dfb\u52a0\u5230path\u4e2d\u3002\n   b. \u5c06\u5f53\u524d\u4f4d\u7f6e\u6dfb\u52a0\u5230visited\u4e2d\u3002\n   c. \u5982\u679cpath\u7684\u957f\u5ea6\u7b49\u4e8ek\uff0c\u5219\u8fd4\u56depath\u3002\n   d. \u904d\u5386\u5f53\u524d\u4f4d\u7f6e\u7684\u76f8\u90bb\u5355\u5143\u683c\uff0c\u627e\u5230\u4e00\u4e2a\u672a\u8bbf\u95ee\u8fc7\u7684\u5355\u5143\u683c\uff0c\u5c06\u5176\u8bbe\u4e3a\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\n   e. \u5982\u679c\u6240\u6709\u7684\u76f8\u90bb\u5355\u5143\u683c\u90fd\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u5219\u9009\u62e9\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u76f8\u90bb\u5355\u5143\u683c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\n6. \u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u8868\u793a\u627e\u4e0d\u5230\u957f\u5ea6\u4e3ak\u7684\u8def\u5f84\u3002\n\n\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n * n * k)\uff0c\u5176\u4e2dn\u4e3a\u7f51\u683c\u7684\u5927\u5c0f\uff0ck\u4e3a\u8def\u5f84\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 1, 2]\n    else:\n        sequence = [1, 1, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i/2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n        return sequence\n\n# Test Cases\nprint(tri(0))  # [0]\nprint(tri(1))  # [1]\nprint(tri(2))  # [1, 1]\nprint(tri(3))  # [1, 1, 2]\nprint(tri(4))  # [1, 1, 2, 3]"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    # \u5c06n\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    n_str = str(n)\n    \n    # \u521d\u59cb\u5316\u4e58\u79ef\u4e3a1\n    product = 1\n    \n    # \u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\n    for digit in n_str:\n        # \u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u6570\n        num = int(digit)\n        \n        # \u5982\u679c\u6570\u5b57\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56de0\n        if num % 2 == 0:\n            return 0\n        \n        # \u5426\u5219\u5c06\u6570\u5b57\u4e58\u79ef\u5230\u7ed3\u679c\u4e2d\n        product *= num\n    \n    # \u8fd4\u56de\u4e58\u79ef\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n\nprint(is_nested('[[]]')) # True\nprint(is_nested('[]]]]]]][[[[[]')) # False\nprint(is_nested('[][]')) # False\nprint(is_nested('[]')) # False\nprint(is_nested('[[][]]')) # True\nprint(is_nested('[[]][[')) # True"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded_num = round(num)\n        square_num = rounded_num ** 2\n        total += square_num\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (not txt[:-1] or txt[:-1].split()[-1] != txt[:-1]):\n        return True\n    else:\n        return False\n\n# \u6d4b\u8bd5\u793a\u4f8b\nprint(check_if_last_char_is_a_letter(\"apple pie\")) # False\nprint(check_if_last_char_is_a_letter(\"apple pi e\")) # True\nprint(check_if_last_char_is_a_letter(\"apple pi e \")) # False\nprint(check_if_last_char_is_a_letter(\"\")) # False"}
{"task_id": "HumanEval/135", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0\u4e0a\u8ff0\u529f\u80fd\u7684\u51fd\u6570\uff1a\n\n```python\ndef can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i-1\n    return max_index\n```\n\n\u8be5\u51fd\u6570\u904d\u5386\u7ed9\u5b9a\u6570\u7ec4\uff0c\u5c06\u6700\u5927\u7d22\u5f15\u521d\u59cb\u5316\u4e3a-1\u3002\u7136\u540e\uff0c\u4ece\u7d22\u5f151\u5f00\u59cb\uff0c\u5224\u65ad\u5f53\u524d\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u524d\u4e00\u4e2a\u5143\u7d20\u3002\u5982\u679c\u662f\uff0c\u5219\u66f4\u65b0\u6700\u5927\u7d22\u5f15\u4e3a\u524d\u4e00\u4e2a\u5143\u7d20\u7684\u7d22\u5f15\u3002\u6700\u540e\u8fd4\u56de\u6700\u5927\u7d22\u5f15\u3002\n\n\u4f8b\u5982\uff0c\u5bf9\u4e8e\u8f93\u5165 `[1,2,4,3,5]`\uff0c\u51fd\u6570\u5c06\u8fd4\u56de3\uff0c\u56e0\u4e3a\u5728\u7d22\u5f153\u65f6\uff0c\u5143\u7d203\u4e0d\u5927\u4e8e\u7d22\u5f152\u7684\u5143\u7d204\u3002\n\n\u5bf9\u4e8e\u8f93\u5165 `[1,2,3]`\uff0c\u51fd\u6570\u5c06\u8fd4\u56de-1\uff0c\u56e0\u4e3a\u6ca1\u6709\u5143\u7d20\u5c0f\u4e8e\u7b49\u4e8e\u5b83\u524d\u9762\u7684\u5143\u7d20\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u8be5\u51fd\u6570\u5047\u8bbe\u7ed9\u5b9a\u7684\u6570\u7ec4\u4e0d\u5305\u542b\u91cd\u590d\u7684\u503c\u3002"}
{"task_id": "HumanEval/136", "completion": "\u60a8\u597d\uff01\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b9e\u73b0\u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```python\ndef largest_smallest_integers(lst):\n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n\n    if not negative_nums or not positive_nums:\n        return (None, None)\n\n    largest_negative = max(negative_nums)\n    smallest_positive = min(positive_nums)\n\n    return (largest_negative, smallest_positive)\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u901a\u8fc7\u5217\u8868\u63a8\u5bfc\u5f0f\u521b\u5efa\u4e86\u5217\u8868`negative_nums`\uff0c\u5176\u4e2d\u5b58\u50a8\u4e86\u6240\u6709\u5c0f\u4e8e0\u7684\u6574\u6570\u3002\u7136\u540e\uff0c\u5b83\u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u521b\u5efa\u4e86\u5217\u8868`positive_nums`\uff0c\u5176\u4e2d\u5b58\u50a8\u4e86\u6240\u6709\u5927\u4e8e0\u7684\u6574\u6570\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u51fd\u6570\u68c0\u67e5`negative_nums`\u548c`positive_nums`\u662f\u5426\u4e3a\u7a7a\u3002\u5982\u679c\u5176\u4e2d\u4efb\u610f\u4e00\u4e2a\u4e3a\u7a7a\uff0c\u5219\u8fd4\u56de`(None, None)`\uff0c\u8868\u793a\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6574\u6570\u3002\n\n\u5982\u679c\u4e24\u4e2a\u5217\u8868\u90fd\u4e0d\u4e3a\u7a7a\uff0c\u5219\u4f7f\u7528`max()`\u51fd\u6570\u627e\u5230`negative_nums`\u4e2d\u7684\u6700\u5927\u503c\uff0c\u5b58\u50a8\u5728\u53d8\u91cf`largest_negative`\u4e2d\u3002\u4f7f\u7528`min()`\u51fd\u6570\u627e\u5230`positive_nums`\u4e2d\u7684\u6700\u5c0f\u503c\uff0c\u5b58\u50a8\u5728\u53d8\u91cf`smallest_positive`\u4e2d\u3002\n\n\u6700\u540e\uff0c\u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u5143\u7ec4`(largest_negative, smallest_positive)`\uff0c\u8868\u793a\u6700\u5927\u7684\u8d1f\u6574\u6570\u548c\u6700\u5c0f\u7684\u6b63\u6574\u6570\u3002\n\n\u8bf7\u6ce8\u610f\uff0c\u8be5\u4ee3\u7801\u5047\u8bbe\u5217\u8868\u4e2d\u7684\u5143\u7d20\u65e2\u53ef\u4ee5\u662f\u6574\u6570\u4e5f\u53ef\u4ee5\u662f\u6d6e\u70b9\u6570\u3002\u5982\u679c\u5217\u8868\u4e2d\u5305\u542b\u5176\u4ed6\u7c7b\u578b\u7684\u5143\u7d20\uff0c\u53ef\u80fd\u4f1a\u5f15\u53d1\u9519\u8bef\u3002"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")  # \u5c06\u9017\u53f7\u66ff\u6362\u4e3a\u5c0f\u6570\u70b9\n        b = b.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n    elif isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        a = float(a)\n    elif isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        b = float(b)\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b9e\u73b0\u8be5\u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```python\ndef is_equal_to_sum_even(n):\n    \"\"\"\u6c42\u7ed9\u5b9a\u7684\u6570n\u662f\u5426\u53ef\u4ee5\u5199\u6210\u6b63\u597d4\u4e2a\u6b63\u5076\u6570\u7684\u548c\"\"\"\n    # \u5982\u679cn\u5c0f\u4e8e8\uff0c\u65e0\u6cd5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u76f4\u63a5\u8fd4\u56deFalse\n    if n < 8:\n        return False\n    # \u5982\u679cn\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56deTrue\n    if n % 2 == 0:\n        return True\n    # \u5982\u679cn\u662f\u5947\u6570\uff0c\u5224\u65adn-8\u662f\u5426\u53ef\u4ee5\u5199\u62104\u4e2a\u6b63\u5076\u6570\u7684\u548c\n    return is_equal_to_sum_even(n - 8)\n\n# \u6d4b\u8bd5\u4ee3\u7801\nassert is_equal_to_sum_even(4) == False\nassert is_equal_to_sum_even(6) == False\nassert is_equal_to_sum_even(8) == True\nprint(\"\u6d4b\u8bd5\u901a\u8fc7\")\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528\u4e86\u9012\u5f52\u7684\u7b97\u6cd5\u6765\u89e3\u51b3\u95ee\u9898\u3002\u5f53\u7ed9\u5b9a\u7684\u6570n\u5c0f\u4e8e8\u65f6\uff0c\u65e0\u6cd5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u76f4\u63a5\u8fd4\u56deFalse\u3002\u5982\u679c\u7ed9\u5b9a\u7684\u6570n\u662f\u5076\u6570\uff0c\u5219\u76f4\u63a5\u8fd4\u56deTrue\u3002\u5982\u679c\u7ed9\u5b9a\u7684\u6570n\u662f\u5947\u6570\uff0c\u5219\u5224\u65adn-8\u662f\u5426\u53ef\u4ee5\u5199\u62104\u4e2a\u6b63\u5076\u6570\u7684\u548c\uff0c\u9012\u5f52\u8c03\u7528is_equal_to_sum_even\u51fd\u6570\u3002\u8fd9\u6837\u4e0d\u65ad\u51cf\u5c11n\u7684\u503c\uff0c\u76f4\u5230n\u4e3a\u5076\u6570\u6216\u5c0f\u4e8e8\u4e3a\u6b62\u3002"}
{"task_id": "HumanEval/139", "completion": "\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u4f7f\u7528\u9012\u5f52\u6765\u5b9e\u73b0\u3002\u53ef\u4ee5\u8003\u8651\u5c06\u9636\u4e58\u7684\u8ba1\u7b97\u8fc7\u7a0b\u5c01\u88c5\u6210\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\u3002\n\n```python\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef special_factorial(n):\n    if n > 0:\n        result = factorial(n)  # \u8ba1\u7b97n!\n        for i in range(n-1, 0, -1):\n            result *= factorial(i)  # \u8ba1\u7b97(n-1)! * (n-2)! * ... * 1!\n        return result\n    else:\n        return None\n```\n\n\u5728\u8fd9\u91cc\uff0c`factorial(n)`\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u666e\u901a\u9636\u4e58\u3002`special_factorial(n)`\u51fd\u6570\u9996\u5148\u8ba1\u7b97n\u7684\u9636\u4e58\uff0c\u7136\u540e\u5faa\u73af\u8ba1\u7b97(n-1)! * (n-2)! * ... * 1!\uff0c\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u3002\n\n\u8fd9\u4e2a\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u3002"}
{"task_id": "HumanEval/140", "completion": "\u8fd9\u662f\u4e00\u4e2a\u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u7a7a\u683c\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\u7684\u51fd\u6570\uff0c\u5e76\u4e14\u6839\u636e\u8fde\u7eed\u7a7a\u683c\u7684\u6570\u91cf\u8fdb\u884c\u66ff\u6362\u7684\u89c4\u5219\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u6765\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\uff1a\n\n```python\ndef fix_spaces(text):\n    \"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6587\u672c\uff0c\u5c06\u5176\u4e2d\u7684\u6240\u6709\u7a7a\u683c\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\uff0c\n    \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709\u8d85\u8fc7\u4e24\u4e2a\u8fde\u7eed\u7684\u7a7a\u683c\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fde\u7eed\u7684\u7a7a\u683c\u66ff\u6362\u4e3a-\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count > 2:\n                new_text += \"-\"\n        elif space_count > 1:\n            new_text += \"_\"\n            new_text += char\n            space_count = 0\n        else:\n            new_text += char\n            space_count = 0\n    return new_text\n```\n"}
{"task_id": "HumanEval/141", "completion": "\u8bf7\u95ee\u6709\u4ec0\u4e48\u5177\u4f53\u9700\u6c42\uff0c\u8fd8\u662f\u9700\u8981\u5b8c\u6574\u7684\u4ee3\u7801\u5b9e\u73b0\uff1f"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i, num in enumerate(lst):\n        if (i + 1) % 3 == 0:\n            sum += num ** 2\n        elif (i + 1) % 4 == 0:\n            sum += num ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "\u4e0b\u9762\u662f\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u51fd\u6570\u5b9e\u73b0\uff1a\n\n```\ndef is_prime(n):\n    \"\"\"\n    \u8f85\u52a9\u51fd\u6570\uff1a\u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    # \u5c06\u53e5\u5b50\u5207\u5206\u6210\u5355\u8bcd\n    words = sentence.split(\" \")\n    \n    # \u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u51fa\u957f\u5ea6\u4e3a\u8d28\u6570\u7684\u5355\u8bcd\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # \u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\uff0c\u7528\u7a7a\u683c\u8fde\u63a5\u8fc7\u6ee4\u51fa\u7684\u5355\u8bcd\n    return \" \".join(prime_words)\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8f85\u52a9\u51fd\u6570`is_prime`\uff0c\u7528\u6765\u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\u3002\u7136\u540e\uff0c\u5b83\u5c06\u8f93\u5165\u7684\u53e5\u5b50\u5207\u5206\u6210\u5355\u8bcd\uff0c\u5e76\u4f7f\u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u51fa\u957f\u5ea6\u4e3a\u8d28\u6570\u7684\u5355\u8bcd\u3002\u6700\u540e\uff0c\u5b83\u5c06\u8fc7\u6ee4\u51fa\u7684\u5355\u8bcd\u7528\u7a7a\u683c\u8fde\u63a5\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u5e76\u8fd4\u56de\u3002"}
{"task_id": "HumanEval/144", "completion": "\u8fd9\u662f\u4e00\u4e2a\u7b80\u5316\u8868\u8fbe\u5f0f\u7684\u51fd\u6570\u3002\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5c06\u5206\u6570\u8f6c\u5316\u4e3a\u7b97\u672f\u8fd0\u7b97\uff0c\u5373\u5c06\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5206\u6570\u8f6c\u5316\u4e3a\u5206\u5b50\u548c\u5206\u6bcd\u7684\u6574\u6570\u3002\u7136\u540e\uff0c\u6211\u4eec\u5c06\u4e24\u4e2a\u5206\u6570\u7684\u5206\u5b50\u548c\u5206\u6bcd\u76f8\u4e58\u5f97\u5230\u7ed3\u679c\u3002\n\n\u4e0b\u9762\u662f\u4e00\u4e2a\u53ef\u80fd\u7684\u5b9e\u73b0\uff1a\n\n```python\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    # \u5c06\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5206\u6570\u8f6c\u5316\u4e3aFraction\u5bf9\u8c61\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    \n    # \u5c06\u5206\u5b50\u548c\u5206\u6bcd\u76f8\u4e58\u5f97\u5230\u7ed3\u679c\n    result = x_frac * n_frac\n    \n    # \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a\u6574\u6570\n    if result.numerator % result.denominator == 0:\n        return True\n    else:\n        return False\n```\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684\u793a\u4f8b\uff1a\n\n```python\nsimplify(\"1/5\", \"5/1\")\n```\n\n\u8f93\u51fa\u4e3aTrue\uff0c\u56e0\u4e3a1/5 * 5/1 = 1\uff0c\u7ed3\u679c\u4e3a\u6574\u6570\u3002\n\n```python\nsimplify(\"1/6\", \"2/1\")\n```\n\n\u8f93\u51fa\u4e3aFalse\uff0c\u56e0\u4e3a1/6 * 2/1 = 1/3\uff0c\u7ed3\u679c\u4e0d\u662f\u6574\u6570\u3002\n\n```python\nsimplify(\"7/10\", \"10/2\")\n```\n\n\u8f93\u51fa\u4e3aFalse\uff0c\u56e0\u4e3a7/10 * 10/2 = 7\uff0c\u7ed3\u679c\u662f\u6574\u6570\uff0c\u4f46\u4e0d\u662fx * n\u7684\u5f62\u5f0f\u3002"}
{"task_id": "HumanEval/145", "completion": "\u53ef\u4ee5\u4f7f\u7528sorted\u51fd\u6570\u548clambda\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u8ba1\u7b97\u4e00\u4e2a\u6574\u6570\u7684\u4f4d\u6570\u548c\u3002\u53ef\u4ee5\u901a\u8fc7\u5c06\u6574\u6570\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u6765\u5b9e\u73b0\uff0c\u7136\u540e\u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u5e76\u5c06\u5b83\u4eec\u8f6c\u6362\u6210\u6574\u6570\uff0c\u6700\u540e\u6c42\u548c\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528sorted\u51fd\u6570\u5bf9\u7ed9\u5b9a\u7684\u6574\u6570\u5217\u8868\u8fdb\u884c\u6392\u5e8f\u3002\u901a\u8fc7\u63d0\u4f9b\u4e00\u4e2alambda\u8868\u8fbe\u5f0f\u4f5c\u4e3akey\u53c2\u6570\uff0c\u6211\u4eec\u53ef\u4ee5\u6307\u5b9a\u6392\u5e8f\u7684\u4f9d\u636e\u3002\u5728\u8fd9\u4e2alambda\u8868\u8fbe\u5f0f\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u8ba1\u7b97\u6bcf\u4e2a\u6574\u6570\u7684\u4f4d\u6570\u548c\uff0c\u7136\u540e\u5c06\u539f\u59cb\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u5143\u7d20\u3002\u7531\u4e8esorted\u51fd\u6570\u9ed8\u8ba4\u662f\u5347\u5e8f\u6392\u5217\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5c06\u4f4d\u6570\u548c\u53d6\u8d1f\u6570\uff0c\u4ee5\u5b9e\u73b0\u6309\u4f4d\u6570\u548c\u7684\u5347\u5e8f\u6392\u5217\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u8fd4\u56de\u6392\u5e8f\u540e\u7684\u7ed3\u679c\u3002\n\n\u4e0b\u9762\u662f\u5b9e\u73b0\u8fd9\u4e2a\u51fd\u6570\u7684\u4ee3\u7801\uff1a\n\ndef order_by_points(nums):\n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))\n\n\u6d4b\u8bd5\u7ed3\u679c\u548c\u9884\u671f\u7ed3\u679c\u4e00\u81f4\uff1a\n\nprint(order_by_points([1, 11, -1, -11, -12]))  # [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # []"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = []\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            result.append(num)\n    return len(result)"}
{"task_id": "HumanEval/147", "completion": "\u8be5\u95ee\u9898\u53ef\u4ee5\u901a\u8fc7\u679a\u4e3e\u4e09\u5143\u7ec4\u7684\u65b9\u5f0f\u6765\u89e3\u51b3\u3002\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b\uff1a\n\n1. \u6839\u636e\u7ed9\u5b9a\u7684n\uff0c\u521b\u5efa\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6574\u6570\u6570\u7ec4a\uff0c\u5e76\u521d\u59cb\u5316\u4e3a0\u3002\n2. \u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u904d\u5386\u6570\u7ec4a\u7684\u6bcf\u4e2a\u5143\u7d20i\uff0c\u5176\u4e2di\u7684\u8303\u56f4\u4ece1\u5230n-2\u3002\n3. \u5728\u6bcf\u6b21\u5faa\u73af\u4e2d\uff0c\u4f7f\u7528\u4e24\u4e2a\u5d4c\u5957\u5faa\u73af\u904d\u5386\u6570\u7ec4a\u7684\u540e\u9762\u5143\u7d20j\u548ck\uff0c\u5176\u4e2dj\u7684\u8303\u56f4\u4ecei+1\u5230n-1\uff0ck\u7684\u8303\u56f4\u4ecej+1\u5230n\u3002\n4. \u8ba1\u7b97a[i]\u3001a[j]\u548ca[k]\u7684\u548csum\uff0c\u5e76\u5224\u65adsum\u662f\u5426\u4e3a3\u7684\u500d\u6570\u3002\u5982\u679c\u662f\uff0c\u5219\u5c06\u7ed3\u679c\u8ba1\u6570\u5668count\u52a01\u3002\n5. \u8fd4\u56de\u8ba1\u6570\u5668count\u7684\u503c\uff0c\u5373\u4e3a\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u5143\u7ec4\u6570\u91cf\u3002\n\n\u4ee5\u4e0b\u662f\u5b9e\u73b0\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```python\ndef get_max_triples(n):\n    a = [0] * n\n\n    for i in range(1, n-1):\n        a[i] = i*i - i + 1\n\n    count = 0\n\n    for i in range(1, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0:\n                    count += 1\n\n    return count\n```\n\n\u4f7f\u7528\u793a\u4f8b\uff1a\n\n```python\nn = 5\nresult = get_max_triples(n)\nprint(result)  # \u8f93\u51fa\uff1a1\n```\n\n\u5e0c\u671b\u5bf9\u4f60\u6709\u5e2e\u52a9\uff01"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx2+1:idx1])"}
{"task_id": "HumanEval/149", "completion": "def list_sort(lst):\n    # \u5220\u9664\u5947\u6570\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # \u6309\u7167\u957f\u5ea6\u548c\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "\u4f60\u7684\u4ee3\u7801\u5df2\u7ecf\u5f88\u63a5\u8fd1\u6b63\u786e\u4e86\uff0c\u53ea\u662f\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\u9700\u8981\u4fee\u590d\u3002\u4ee5\u4e0b\u662f\u4fee\u590d\u540e\u7684\u4ee3\u7801\uff1a\n\n```python\ndef x_or_y(n, x, y):\n    \"\"\"\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u5982\u679cn\u662f\u8d28\u6570\uff0c\u5b83\u5e94\u8be5\u8fd4\u56dex\u7684\u503c\uff0c\u5426\u5219\u5e94\u8be5\u8fd4\u56dey\u7684\u503c\u3002\n\n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \"\"\"\n\n    # \u68c0\u67e5n\u662f\u5426\u662f\u8d28\u6570\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y\n```\n\n\u4ee3\u7801\u4e2d\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5185\u90e8\u51fd\u6570 `is_prime`\uff0c\u7528\u4e8e\u68c0\u67e5\u4e00\u4e2a\u6570\u5b57\u662f\u5426\u662f\u8d28\u6570\u3002\u4fee\u590d\u540e\u7684\u4ee3\u7801\u80fd\u591f\u6b63\u786e\u8fd4\u56de `x` \u6216 `y` \u7684\u503c\uff0c\u5177\u4f53\u53d6\u51b3\u4e8e\u8f93\u5165\u6570\u5b57 `n` \u662f\u5426\u4e3a\u8d28\u6570\u3002"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    square_sum = 0\n    \n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            square_sum += num * num\n    \n    return square_sum"}
{"task_id": "HumanEval/152", "completion": "\u9996\u5148\uff0c\u6211\u4eec\u9700\u8981\u8fdb\u884c\u6570\u7ec4\u7684\u6bd4\u8f83\uff0c\u8ba1\u7b97\u6bcf\u6b21\u731c\u6d4b\u7684\u8ddd\u79bb\u3002\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u6765\u4f9d\u6b21\u6bd4\u8f83\u4e24\u4e2a\u6570\u7ec4\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u8ddd\u79bb\u52a0\u5165\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\u4e2d\u3002\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a\n\n```python\ndef compare(game, guess):\n    distances = []\n    for i in range(len(game)):\n        distances.append(abs(game[i] - guess[i]))\n    return distances\n```\n\n\u7136\u800c\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u5904\u7406\u731c\u6d4b\u6b63\u786e\u7684\u60c5\u51b5\uff0c\u5373\u8ddd\u79bb\u4e3a0\u7684\u60c5\u51b5\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u5faa\u73af\u4e2d\u6dfb\u52a0\u4e00\u4e2a\u6761\u4ef6\u5224\u65ad\uff0c\u5c06\u8ddd\u79bb\u4e3a0\u7684\u60c5\u51b5\u5904\u7406\u4e3a\u7279\u6b8a\u60c5\u51b5\u3002\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a\n\n```python\ndef compare(game, guess):\n    distances = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            distances.append(0)\n        else:\n            distances.append(abs(game[i] - guess[i]))\n    return distances\n```\n\n\u4ee5\u4e0a\u5c31\u662f\u5b9e\u73b0\u8fd9\u4e2a\u6bd4\u8f83\u51fd\u6570\u7684\u57fa\u672c\u6b65\u9aa4\u3002\u4f60\u53ef\u4ee5\u6839\u636e\u9700\u8981\u5bf9\u4ee3\u7801\u8fdb\u884c\u4fee\u6539\u548c\u4f18\u5316\u3002"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')  # \u7528\u4e8e\u8bb0\u5f55\u6700\u5927\u5f3a\u5ea6\n    strongest_extension = \"\"  # \u7528\u4e8e\u8bb0\u5f55\u6700\u5f3a\u6269\u5c55\u7684\u540d\u79f0\n    \n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())  # \u5927\u5199\u5b57\u6bcd\u6570\u91cf\n        sm_count = sum(1 for c in extension if c.islower())  # \u5c0f\u5199\u5b57\u6bcd\u6570\u91cf\n        strength = cap_count - sm_count  # \u8ba1\u7b97\u6269\u5c55\u5f3a\u5ea6\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u7684\u4ee3\u7801\uff1a\n\n```python\ndef cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        temp = b[i:] + b[:i]\n        if a.find(temp) != -1:\n            return True\n    return False\n```\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u5224\u65ad\u4e24\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u76f8\u540c\u5219\u76f4\u63a5\u8fd4\u56deFalse\u3002\u7136\u540e\u901a\u8fc7\u5faa\u73af\u6765\u751f\u6210b\u7684\u6240\u6709\u65cb\u8f6c\u5b57\u7b26\u4e32\uff0c\u5e76\u5224\u65ad\u662f\u5426\u662fa\u7684\u5b50\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u662f\u5219\u8fd4\u56deTrue\uff0c\u5426\u5219\u7ee7\u7eed\u5faa\u73af\u3002\u5982\u679c\u5faa\u73af\u7ed3\u675f\u540e\u90fd\u6ca1\u6709\u627e\u5230\u7b26\u5408\u6761\u4ef6\u7684\u65cb\u8f6c\u5b57\u7b26\u4e32\uff0c\u5219\u8fd4\u56deFalse\u3002"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for i in range(len(num_str)):\n        if int(num_str[i]) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\nprint(even_odd_count(-12))\nprint(even_odd_count(123))"}
{"task_id": "HumanEval/156", "completion": "\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b9e\u73b0int_to_mini_roman\u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\n``` python\ndef int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    \n    if number < 1 or number > 1000:\n        raise ValueError(\"Number out of range\")\n    \n    result = \"\"\n    \n    for value in sorted(roman_dict.keys(), reverse=True):\n        while number >= value:\n            result += roman_dict[value]\n            number -= value\n    \n    return result\n```\n\n\u8fd9\u6bb5\u4ee3\u7801\u4f7f\u7528\u4e86\u4e00\u4e2a\u5b57\u5178\u6765\u5b58\u50a8\u7f57\u9a6c\u6570\u5b57\u548c\u5bf9\u5e94\u7684\u6574\u6570\u503c\u3002\u7136\u540e\uff0c\u901a\u8fc7\u4f9d\u6b21\u904d\u5386\u5b57\u5178\u4e2d\u7684\u952e\u503c\u5bf9\uff0c\u5e76\u4e0d\u65ad\u5730\u51cf\u53bb\u6574\u6570\u503c\uff0c\u76f4\u5230\u6574\u6570\u503c\u4e3a0\u4e3a\u6b62\u3002\u8fd4\u56de\u7684\u7ed3\u679c\u5373\u4e3a\u5bf9\u5e94\u7684\u7f57\u9a6c\u6570\u5b57\u5b57\u7b26\u4e32\u3002\u4ee3\u7801\u4e2d\u8fd8\u52a0\u5165\u4e86\u5bf9\u8f93\u5165\u6570\u503c\u8303\u56f4\u7684\u5224\u65ad\uff0c\u5982\u679c\u8d85\u51fa\u4e86\u8303\u56f4\uff0c\u4f1a\u629b\u51faValueError\u5f02\u5e38\u3002"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the sides of a triangle. If they form a right-angled triangle, return True, otherwise False. A right-angled triangle has one angle which is a right angle or 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u51fd\u6570\u5b9e\u73b0\uff1a\n```python\ndef find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word\n```\n\u51fd\u6570\u9996\u5148\u521d\u59cb\u5316\u4e00\u4e2a\u6700\u5927\u552f\u4e00\u5b57\u7b26\u6570\u548c\u6700\u5927\u5355\u8bcd\u7684\u53d8\u91cf\u4e3a0\u548c\"\"\u3002\u7136\u540e\u904d\u5386\u8f93\u5165\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5355\u8bcd\u3002\u5bf9\u4e8e\u6bcf\u4e2a\u5355\u8bcd\uff0c\u4f7f\u7528set\u51fd\u6570\u83b7\u53d6\u6240\u6709\u552f\u4e00\u7684\u5b57\u7b26\uff0c\u5e76\u8ba1\u7b97\u552f\u4e00\u5b57\u7b26\u7684\u6570\u91cf\u3002\u5982\u679c\u8ba1\u7b97\u5f97\u5230\u7684\u552f\u4e00\u5b57\u7b26\u6570\u91cf\u5927\u4e8e\u6700\u5927\u552f\u4e00\u5b57\u7b26\u6570\uff0c\u66f4\u65b0\u6700\u5927\u552f\u4e00\u5b57\u7b26\u6570\u548c\u6700\u5927\u5355\u8bcd\u53d8\u91cf\u4e3a\u5f53\u524d\u5355\u8bcd\u3002\u5982\u679c\u8ba1\u7b97\u5f97\u5230\u7684\u552f\u4e00\u5b57\u7b26\u6570\u91cf\u7b49\u4e8e\u6700\u5927\u552f\u4e00\u5b57\u7b26\u6570\uff0c\u5219\u6309\u5b57\u5178\u987a\u5e8f\u6bd4\u8f83\u5f53\u524d\u5355\u8bcd\u548c\u6700\u5927\u5355\u8bcd\uff0c\u5e76\u66f4\u65b0\u6700\u5927\u5355\u8bcd\u53d8\u91cf\u4e3a\u8f83\u5c0f\u7684\u5355\u8bcd\u3002\u6700\u540e\u8fd4\u56de\u6700\u5927\u5355\u8bcd\u3002\n\n\u793a\u4f8b\u8f93\u51fa\uff1a\n```python\nprint(find_max([\"name\", \"of\", \"string\"]))  # \u8f93\u51fa: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # \u8f93\u51fa: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # \u8f93\u51fa: \"aaaaaaa\"\n```"}
{"task_id": "HumanEval/159", "completion": "\u8fd9\u9053\u9898\u7684\u601d\u8def\u5f88\u7b80\u5355\uff0c\u6211\u4eec\u5c31\u6309\u7167\u9898\u76ee\u4e2d\u6240\u63cf\u8ff0\u7684\u8981\u6c42\u7f16\u5199\u4ee3\u7801\u5373\u53ef\u3002\n\n\u9996\u5148\u5224\u65ad\u5269\u4e0b\u7684\u80e1\u841d\u535c\u6570\u91cf\u662f\u5426\u8db3\u591f\uff0c\u5982\u679c\u8db3\u591f\uff0c\u90a3\u4e48\u5403\u6389\u6240\u9700\u7684\u80e1\u841d\u535c\u6570\u91cf\u5e76\u8ba1\u7b97\u5269\u4e0b\u7684\u80e1\u841d\u535c\u6570\u91cf\uff1b\u5982\u679c\u4e0d\u591f\uff0c\u90a3\u4e48\u5403\u6389\u6240\u6709\u5269\u4e0b\u7684\u80e1\u841d\u535c\u5e76\u8fd4\u56de0\u3002\n\n\u4e0b\u9762\u662f\u4ee3\u7801\u7684\u5b9e\u73b0\uff1a\n\n```python\ndef eat(number, need, remaining):\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    \n    return [total_eaten, remaining]\n```\n\n\u8fd9\u4e2a\u4ee3\u7801\u53ef\u4ee5\u6ee1\u8db3\u9898\u76ee\u4e2d\u7684\u6240\u6709\u8981\u6c42\uff0c\u5e76\u4e14\u5728\u6ee1\u8db3\u7ed9\u5b9a\u7684\u7ea6\u675f\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\u826f\u597d\u3002"}
{"task_id": "HumanEval/160", "completion": "\u4e0b\u9762\u662f\u4e00\u4e2a\u5b9e\u73b0do_algebra\u51fd\u6570\u7684\u793a\u4f8b\u4ee3\u7801\uff1a\n\ndef do_algebra(operator, operand):\n    result = operand[0]  # \u521d\u59cb\u5316\u7ed3\u679c\u4e3a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result\n\n# \u6d4b\u8bd5\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)  # \u8f93\u51fa9\n\n\u8be5\u51fd\u6570\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af\u904d\u5386\u64cd\u4f5c\u7b26\u5217\u8868\u3002\u6839\u636e\u6bcf\u4e2a\u64cd\u4f5c\u7b26\u5bf9\u7ed3\u679c\u8fdb\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\uff0c\u6700\u7ec8\u8fd4\u56de\u8fd0\u7b97\u7ed3\u679c\u3002\u6ce8\u610f\uff0c\u8be5\u5b9e\u73b0\u6ca1\u6709\u5bf9\u9664\u4ee5\u96f6\u7684\u60c5\u51b5\u505a\u5904\u7406\uff0c\u8bf7\u786e\u4fdd\u64cd\u4f5c\u6570\u5217\u8868\u4e2d\u6ca1\u67090\u3002"}
{"task_id": "HumanEval/161", "completion": "\u4e0b\u9762\u662f\u6211\u7ed9\u51fa\u7684\u89e3\u51b3\u65b9\u6848\uff1a\n\ndef solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]  # \u53cd\u8f6c\u5b57\u7b26\u4e32\n\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()  # \u5927\u5c0f\u5199\u98a0\u5012\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result\n\nprint(solve(\"1234\"))  # \u8f93\u51fa\uff1a4321\nprint(solve(\"ab\"))  # \u8f93\u51fa\uff1aAB\nprint(solve(\"#a@C\"))  # \u8f93\u51fa\uff1a#A@c\n\n\u8fd9\u4e2a\u51fd\u6570\u9996\u5148\u68c0\u67e5\u5b57\u7b26\u4e32\u4e2d\u662f\u5426\u6709\u5b57\u6bcd\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u53cd\u8f6c\u7684\u5b57\u7b26\u4e32\u3002\u5426\u5219\uff0c\u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5b57\u6bcd\uff0c\u5982\u679c\u662f\u5c0f\u5199\uff0c\u5219\u53d8\u4e3a\u5927\u5199\uff0c\u5982\u679c\u662f\u5927\u5199\uff0c\u5219\u53d8\u4e3a\u5c0f\u5199\u3002\u5bf9\u4e8e\u975e\u5b57\u6bcd\u5b57\u7b26\uff0c\u4fdd\u6301\u539f\u6837\u3002\u6700\u540e\u8fd4\u56de\u7ed3\u679c\u5b57\u7b26\u4e32\u3002"}
{"task_id": "HumanEval/162", "completion": "from hashlib import md5\n\ndef string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5\u4f7f\u7528 for \u5faa\u73af\u548c\u5217\u8868\u63a8\u5bfc\u6765\u89e3\u51b3\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```python\ndef generate_integers(a, b):\n    return [x for x in range(min(a, b), max(a, b)+1) if x % 2 == 0]\n```\n\n\u6d4b\u8bd5\u7ed3\u679c\uff1a\n\n```python\nprint(generate_integers(2, 8))  # \u8f93\u51fa [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # \u8f93\u51fa [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # \u8f93\u51fa [10, 12, 14]\n```\n\n\u5e0c\u671b\u80fd\u5e2e\u5230\u4f60\uff01"}
