{"task_id": "HumanEval/0", "completion": "def has_close_elements(numbers: List[float], threshold: float) -> bool:\n    n = len(numbers)\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "def separate_paren_groups(paren_string: str) -> List[str]:\n    # \u521b\u5efa\u4e00\u4e2a\u5217\u8868\uff0c\u5b58\u50a8\u5206\u9694\u540e\u7684\u5b57\u7b26\u4e32\n    result = []\n\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u6808\uff0c\u7528\u4e8e\u68c0\u67e5\u62ec\u53f7\u662f\u5426\u5339\u914d\n    stack = []\n\n    # \u904d\u5386\u8f93\u5165\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in paren_string:\n        # \u5982\u679c\u5b57\u7b26\u662f\u5de6\u62ec\u53f7\uff0c\u5c06\u5176\u538b\u5165\u6808\u4e2d\n        if char == '(':\n            stack.append(char)\n        # \u5982\u679c\u5b57\u7b26\u662f\u53f3\u62ec\u53f7\uff0c\u5f39\u51fa\u6808\u9876\u5143\u7d20\uff0c\u5224\u65ad\u662f\u5426\u5339\u914d\n        elif char == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                # \u62ec\u53f7\u4e0d\u5339\u914d\uff0c\u5c06\u5176\u66ff\u6362\u4e3a\u4e00\u4e2a\u7a7a\u683c\uff0c\u4ee5\u5206\u9694\u4e0d\u540c\u7684\u7ec4\n                stack.append(' ')\n        # \u5982\u679c\u5b57\u7b26\u4e0d\u662f\u62ec\u53f7\uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u6808\u4e2d\n        else:\n            stack.append(char)\n    \n    # \u5c06\u6808\u4e2d\u5269\u4f59\u7684\u5b57\u7b26\u7ec4\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5e76\u5c06\u5176\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n    result.append(''.join(stack))\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "def truncate_number(number: float) -> float:\n    integer_part = int(number)  # \u83b7\u53d6\u6574\u6570\u90e8\u5206\n    fractional_part = number - integer_part  # \u83b7\u53d6\u5c0f\u6570\u90e8\u5206\n    return fractional_part"}
{"task_id": "HumanEval/3", "completion": "def below_zero(operations):\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "def mean_absolute_deviation(numbers):\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(num - mean) for num in numbers]\n    return sum(deviations) / len(deviations)"}
{"task_id": "HumanEval/5", "completion": "def intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result"}
{"task_id": "HumanEval/6", "completion": "def parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    max_depth = 0\n    stack = []\n\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            max_depth = max(max_depth, len(stack))\n        elif char == ')':\n            stack.pop()\n\n    while stack:\n        stack.pop()  # \u6e05\u7a7a\u6808\n\n    return [max_depth] * len(paren_string.split())"}
{"task_id": "HumanEval/7", "completion": "def filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "def sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" \u8fd4\u56de\u4e00\u4e2a\u7531\u5217\u8868\u4e2d\u6240\u6709\u6574\u6570\u7684\u548c\u4e0e\u4e58\u79ef\u7ec4\u6210\u7684\u5143\u7ec4\u3002\u7a7a\u5217\u8868\u7684\u548c\u5e94\u8be5\u7b49\u4e8e0\uff0c\u7a7a\u5217\u8868\u7684\u79ef\u5e94\u8be5\u7b49\u4e8e1\u3002\n\n    :param numbers: \u6574\u6570\u5217\u8868\n    :return: \u6574\u6570\u5217\u8868\u7684\u548c\u4e0e\u4e58\u79ef\u7ec4\u6210\u7684\u5143\u7ec4\n    \"\"\"\n    if len(numbers) == 0:\n        return 0, 1\n\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n\n    return s, p"}
{"task_id": "HumanEval/9", "completion": "def rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        if i == 0:\n            result.append(numbers[i])\n        elif i < len(numbers) - 1:\n            result.append(max(numbers[i-1:i+2]))\n        else:\n            result.append(max(numbers[i-1:i+1]))\n    return result"}
{"task_id": "HumanEval/10", "completion": "def is_palindrome(string: str) -> bool:\n    \"\"\" \u6d4b\u8bd5\u7ed9\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587 \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" \u67e5\u627e\u4ee5\u63d0\u4f9b\u7684\u5b57\u7b26\u4e32\u5f00\u5934\u7684\u6700\u77ed\u56de\u6587\u3002\n    \u7b97\u6cd5\u601d\u8def\u7b80\u5355:\n        -\u67e5\u627e\u6240\u63d0\u4f9b\u5b57\u7b26\u4e32\u4e2d\u6700\u957f\u7684\u56de\u6587\u540e\u7f00\u3002\n        -\u5728\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u6dfb\u52a0\u4e0e\u56de\u6587\u540e\u7f00\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u524d\u7f00\u76f8\u53cd\u7684\u5b57\u7b26\u4e32\u3002\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # \u5982\u679c\u5b57\u7b26\u4e32\u672c\u8eab\u5c31\u662f\u56de\u6587\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u5b57\u7b26\u4e32\n    if is_palindrome(string):\n        return string\n    \n    # \u4ece\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u5f00\u59cb\u67e5\u627e\u6700\u957f\u7684\u56de\u6587\u540e\u7f00\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            # \u8fd4\u56de\u6dfb\u52a0\u56de\u6587\u540e\u7f00\u4e4b\u524d\u7684\u5b57\u7b26\u4e32\u524d\u7f00\u76f8\u53cd\u7684\u5b57\u7b26\u4e32\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "completion": "def string_xor(a: str, b: str) -> str:\n    \"\"\" \u8f93\u5165\u662f\u4e24\u4e2a\u5b57\u7b26\u4e32a\u548cb\uff0c\u53ea\u67091\u548c0\u3002\u5bf9\u8fd9\u4e9b\u8f93\u5165\u6267\u884c\u4e8c\u8fdb\u5236\u5f02\u6216\uff0c\u5e76\u4ee5\u5b57\u7b26\u4e32\u5f62\u5f0f\u8fd4\u56de\u7ed3\u679c\u3002\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"The two strings must have the same length.\")\n    result = \"\"\n    for c1, c2 in zip(a, b):\n        result += str(int(c1) ^ int(c2))\n    return result"}
{"task_id": "HumanEval/12", "completion": "def longest(strings: List[str]) -> Optional[str]:\n    if len(strings) == 0:\n        return None\n    return max(strings, key=len)"}
{"task_id": "HumanEval/13", "completion": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" \u8fd4\u56de\u4e24\u4e2a\u6574\u6570a\u548cb\u7684\u6700\u5927\u516c\u7ea6\u6570 \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result"}
{"task_id": "HumanEval/15", "completion": "def string_sequence(n: int) -> str:\n    return ' '.join(str(x) for x in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "def count_distinct_characters(string: str) -> int:\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\u7528\u4e8e\u5b58\u50a8\u4e0d\u540c\u7684\u5b57\u7b26\n    distinct_chars = set()\n\n    # \u904d\u5386\u5b57\u7b26\u4e32\u7684\u6bcf\u4e2a\u5b57\u7b26\n    for char in string:\n        # \u5c06\u5b57\u7b26\u7684\u5c0f\u5199\u5f62\u5f0f\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n        distinct_chars.add(char.lower())\n    \n    # \u8fd4\u56de\u96c6\u5408\u4e2d\u4e0d\u540c\u5b57\u7b26\u7684\u6570\u91cf\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "def parse_music(music_string: str) -> List[int]:\n    beats = []\n\n    music_list = music_string.split()\n    for symbol in music_list:\n        if symbol == 'o':\n            beats.append(4)\n        elif symbol == 'o|':\n            beats.append(2)\n        elif symbol == '.|':\n            beats.append(1)\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while substring in string[start:]:\n        count += 1\n        start = string.index(substring, start) + 1\n    return count"}
{"task_id": "HumanEval/19", "completion": "def sort_numbers(numbers: str) -> str:\n    number_dict = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    return ' '.join(numbers_list)"}
{"task_id": "HumanEval/20", "completion": "def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # \u5c06\u6570\u5b57\u5217\u8868\u8fdb\u884c\u6392\u5e8f\n    numbers.sort()\n\n    # \u521d\u59cb\u5316\u53d8\u91cf\u6765\u5b58\u50a8\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u6570\u5b57\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n\n    # \u904d\u5386\u6570\u5b57\u5217\u8868\u7684\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            # \u8ba1\u7b97\u5f53\u524d\u4e24\u4e2a\u6570\u5b57\u7684\u5dee\u503c\n            difference = abs(numbers[i] - numbers[j])\n\n            # \u5982\u679c\u5f53\u524d\u5dee\u503c\u5c0f\u4e8e\u6700\u5c0f\u5dee\u503c\uff0c\u5219\u66f4\u65b0\u6700\u5c0f\u5dee\u503c\u548c\u6700\u63a5\u8fd1\u7684\u4e24\u4e2a\u6570\u5b57\n            if difference < min_difference:\n                min_difference = difference\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "def rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = []\n    for num in numbers:\n        scaled_num = (num - min_num) / (max_num - min_num)\n        scaled_numbers.append(scaled_num)\n    return scaled_numbers"}
{"task_id": "HumanEval/22", "completion": "result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/23", "completion": "def strlen(string: str) -> int:\n    \"\"\"\u8fd4\u56de\u7ed9\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "completion": "def largest_divisor(n: int) -> int:\n    \"\"\" \u5bf9\u4e8e\u7ed9\u5b9a\u7684\u6570n\uff0c\u6c42\u80fd\u5c06n\u6574\u9664\u7684\u6700\u5927\u7684\u5c0f\u4e8en\u7684\u6570\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return -1  # \u5982\u679c\u6ca1\u6709\u627e\u5230\u80fd\u6574\u9664n\u7684\u6570\uff0c\u5219\u8fd4\u56de-1"}
{"task_id": "HumanEval/25", "completion": "def factorize(n: int) -> List[int]:\n    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    \n    return factors"}
{"task_id": "HumanEval/26", "completion": "def remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result"}
{"task_id": "HumanEval/27", "completion": "def flip_case(string: str) -> str:\n    flipped_string = \"\"\n    for char in string:\n        if char.isupper():\n            flipped_string += char.lower()\n        elif char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char\n    return flipped_string"}
{"task_id": "HumanEval/28", "completion": "def concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "completion": "result = []\nfor string in strings:\n    if string.startswith(prefix):\n        result.append(string)\nreturn result"}
{"task_id": "HumanEval/30", "completion": "def get_positive(l: list):\n    \"\"\"\u53ea\u8fd4\u56de\u5217\u8868\u4e2d\u7684\u6b63\u6570\u3002\n\n    Args:\n        l (list): \u8f93\u5165\u7684\u5217\u8868\n\n    Returns:\n        list: \u4ec5\u5305\u542b\u6b63\u6570\u7684\u5217\u8868\n    \"\"\"\n    return [x for x in l if x > 0]"}
{"task_id": "HumanEval/31", "completion": "\u60a8\u63d0\u4f9b\u7684\u4ee3\u7801\u5b8c\u5168\u6b63\u786e\u3002\u5b83\u662f\u4e00\u4e2a\u7528\u4e8e\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\u7684\u51fd\u6570\u3002\u901a\u8fc7\u5229\u7528\u4e0d\u65ad\u904d\u5386\u6574\u6570\u9664\u6570\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u5bf9\u7ed9\u5b9a\u7684\u6570\u9010\u4e2a\u8fdb\u884c\u6c42\u4f59\u64cd\u4f5c\u3002\u5982\u679c\u627e\u5230\u67d0\u4e2a\u6574\u9664\u6570\uff0c\u5373\u8bf4\u660e\u8fd9\u4e2a\u6570\u4e0d\u662f\u7d20\u6570\uff0c\u8fd4\u56deFalse\uff1b\u5426\u5219\uff0c\u5982\u679c\u5faa\u73af\u904d\u5386\u5b8c\u6210\uff0c\u5219\u8bf4\u660e\u8fd9\u4e2a\u6570\u662f\u7d20\u6570\uff0c\u8fd4\u56deTrue\u3002\n\n\u8fd9\u4e2a\u51fd\u6570\u901a\u8fc7\u4f7f\u7528doctest\u6a21\u5757\u63d0\u4f9b\u7684\u6587\u6863\u6d4b\u8bd5\u529f\u80fd\uff0c\u53ef\u4ee5\u81ea\u52a8\u5bf9\u51fd\u6570\u8fdb\u884c\u6d4b\u8bd5\u3002\u5728\u51fd\u6570\u5b9a\u4e49\u4e0b\u65b9\u4f7f\u7528\u591a\u884c\u5b57\u7b26\u4e32\u7684\u5f62\u5f0f\u7f16\u5199\u4e86\u51e0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\uff0c\u6bcf\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u5305\u62ec\u4e00\u4e2a\u7ed9\u5b9a\u7684\u53c2\u6570\u548c\u9884\u671f\u7684\u8f93\u51fa\u7ed3\u679c\u3002\u8fd0\u884c\u6d4b\u8bd5\u4f1a\u81ea\u52a8\u751f\u6210\u7684\u6587\u6863\u5e76\u8fdb\u884c\u9a8c\u8bc1\u3002\u5982\u679c\u6240\u6709\u7684\u6d4b\u8bd5\u7528\u4f8b\u90fd\u901a\u8fc7\u4e86\uff0c\u51fd\u6570\u5c31\u662f\u6b63\u786e\u7684\u3002"}
{"task_id": "HumanEval/32", "completion": "def find_zero(xs: list):\n    # \u9996\u5148\u5224\u65adxs\u957f\u5ea6\u662f\u5426\u4e3a\u5076\u6570\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The list of coefficients must have an even length\")\n    \n    # \u5224\u65ad\u6700\u5927\u7cfb\u6570\u662f\u5426\u4e3a\u96f6\n    if xs[-1] == 0:\n        raise ValueError(\"The largest coefficient cannot be zero\")\n    \n    # \u5bfb\u627e0\u70b9\n    zeros = []\n    for i in range(-100, 100):\n        x = i / 10\n        if poly(xs, x) == 0:\n            zeros.append(round(x, 1))\n    return zeros"}
{"task_id": "HumanEval/33", "completion": "def sort_third(l: list):\n    non_divisible = [l[i] for i in range(len(l)) if i % 3 != 0]\n    divisible = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\n    \n    new_list = []\n    j = 0\n    k = 0\n    \n    for i in range(len(l)):\n        if i % 3 == 0:\n            new_list.append(divisible[j])\n            j += 1\n        else:\n            new_list.append(non_divisible[k])\n            k += 1\n    \n    return new_list"}
{"task_id": "HumanEval/34", "completion": "def unique(l: list):\n    \"\"\"\u8fd4\u56de\u5217\u8868\u4e2d\u552f\u4e00\u5143\u7d20\uff0c\u5e76\u5bf9\u5176\u6392\u5e8f\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/35", "completion": "def max_element(l: list):\n    \"\"\"\u8fd4\u56de\u5217\u8868\u4e2d\u6700\u5927\u7684\u5143\u7d20\u3002\"\"\"\n    return max(l)"}
{"task_id": "HumanEval/36", "completion": "def fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count"}
{"task_id": "HumanEval/37", "completion": "def sort_even(l: list):\n    even_indices = []\n    odd_indices = []\n    result = []\n\n    # \u904d\u5386\u5217\u8868l\uff0c\u5c06\u5947\u5076\u7d22\u5f15\u5206\u522b\u5b58\u50a8\u5728\u4e0d\u540c\u7684\u5217\u8868\u4e2d\n    for i in range(len(l)):\n        if i % 2 == 0:\n            even_indices.append(l[i])\n        else:\n            odd_indices.append(i)\n\n    # \u5bf9\u5076\u6570\u7d22\u5f15\u7684\u503c\u8fdb\u884c\u5347\u5e8f\u6392\u5e8f\n    even_indices = sorted(even_indices)\n\n    # \u6839\u636e\u5947\u5076\u7d22\u5f15\u7684\u4f4d\u7f6e\uff0c\u6784\u5efa\u7ed3\u679c\u5217\u8868\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(l[i])\n\n    return result"}
{"task_id": "HumanEval/38", "completion": "    # \u5c06\u5b57\u7b26\u4e32\u62c6\u5206\u4e3a\u7ec4\u3002\u6bcf\u4e2a\u957f\u5ea6\u4e3a3\u3002\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # \u5faa\u73af\u6bcf\u7ec4\u4e2d\u7684\u5143\u7d20\u3002\u9664\u975e\u7ec4\u7684\u5143\u7d20\u5c11\u4e8e3\u4e2a\u3002\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "def prime_fib(n: int):\n    \"\"\"\n    prime_fib\u8fd4\u56de\u6590\u6ce2\u90a3\u5951\u6570\u4e2d\u7684\u7b2cn\u4e2a\u7d20\u6570\u3002\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    fib = [1, 1]\n    count = 2\n    while count < n:\n        next_num = fib[-1] + fib[-2]\n        if is_prime(next_num):\n            count += 1\n        fib.append(next_num)\n    return fib[-1]"}
{"task_id": "HumanEval/40", "completion": "def triples_sum_to_zero(l: list):\n    # \u901a\u8fc7\u4e24\u5c42\u5faa\u73af\u904d\u5386\u6240\u6709\u53ef\u80fd\u7684\u7ec4\u5408\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                # \u5982\u679c\u627e\u5230\u4e00\u7ec4\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u4e2a\u5143\u7d20\uff0c\u8fd4\u56deTrue\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u4e09\u4e2a\u5143\u7d20\uff0c\u5219\u8fd4\u56deFalse\n    return False"}
{"task_id": "HumanEval/41", "completion": "def car_race_collision(n: int) -> int:\n    return (n - 1) * n"}
{"task_id": "HumanEval/42", "completion": "def incr_list(l: list):\n    \"\"\"\u8fd4\u56de\u5143\u7d20\u52a01\u7684\u5217\u8868\u3002\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "def pairs_sum_to_zero(l):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u96c6\u5408\uff0c\u7528\u6765\u4fdd\u5b58\u51fa\u73b0\u8fc7\u7684\u6570\u5b57\n    num_set = set()\n\n    # \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\n    for num in l:\n        # \u5982\u679c\u5f53\u524d\u6570\u5b57\u7684\u76f8\u53cd\u6570\u5df2\u7ecf\u5b58\u5728\u4e8e\u96c6\u5408\u4e2d\uff0c\u5219\u8fd4\u56deTrue\n        if -num in num_set:\n            return True\n        # \u5426\u5219\u5c06\u5f53\u524d\u6570\u5b57\u6dfb\u52a0\u5230\u96c6\u5408\u4e2d\n        num_set.add(num)\n\n    # \u5982\u679c\u904d\u5386\u5b8c\u6574\u4e2a\u5217\u8868\u90fd\u6ca1\u6709\u627e\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6570\u5b57\u5bf9\uff0c\u5219\u8fd4\u56deFalse\n    return False"}
{"task_id": "HumanEval/44", "completion": "def change_base(x: int, base: int) -> str:\n    if x < 0 or base < 2 or base > 9:\n        raise ValueError(\"Invalid input\")\n\n    result = \"\"\n    while x > 0:\n        result = str(x % base) + result\n        x //= base\n\n    return result"}
{"task_id": "HumanEval/45", "completion": "def triangle_area(a, h):\n    \"\"\"\n    \u7ed9\u5b9a\u4e09\u89d2\u5f62\u8fb9\u7684\u957f\u5ea6\u548c\u9ad8\u8fd4\u56de\u9762\u79ef\u3002\n\n    :param a: \u4e09\u89d2\u5f62\u7684\u5e95\u8fb9\u957f\u5ea6\n    :param h: \u4e09\u89d2\u5f62\u7684\u9ad8\n    :return: \u4e09\u89d2\u5f62\u7684\u9762\u79ef\n    \"\"\"\n    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "def fib4(n: int) -> int:\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 2\n    else:\n        fib = [0, 0, 2, 0]\n        for i in range(4, n + 1):\n            fib[i % 4] = fib[(i - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4]\n        return fib[n % 4]"}
{"task_id": "HumanEval/47", "completion": "def median(l: list):\n    \"\"\"\u8fd4\u56de\u5217\u8868l\u4e2d\u5143\u7d20\u7684\u4e2d\u4f4d\u6570\u3002\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    sorted_l = sorted(l)\n    length = len(sorted_l)\n    middle = length // 2\n    if length % 2 == 0:\n        # \u5982\u679c\u5217\u8868\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u53d6\u4e2d\u95f4\u4e24\u4e2a\u6570\u7684\u5e73\u5747\u503c\n        return (sorted_l[middle - 1] + sorted_l[middle]) / 2\n    else:\n        # \u5982\u679c\u5217\u8868\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u76f4\u63a5\u53d6\u4e2d\u95f4\u6570\n        return sorted_l[middle]"}
{"task_id": "HumanEval/48", "completion": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    \u68c0\u67e5\u7ed9\u5b9a\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587\n    \"\"\"\n    # \u9996\u5148\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\uff0c\u7a7a\u5b57\u7b26\u4e32\u4e5f\u89c6\u4e3a\u56de\u6587\n    if len(text) == 0:\n        return True\n    \n    # \u4f7f\u7528\u53cc\u6307\u9488\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5b57\u7b26\u4e32\u7684\u5f00\u5934\u5411\u540e\u79fb\u52a8\uff0c\u4e00\u4e2a\u6307\u9488\u4ece\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u5411\u524d\u79fb\u52a8\n    left = 0\n    right = len(text) - 1\n    \n    # \u5faa\u73af\u7ec8\u6b62\u6761\u4ef6\u662f\u5de6\u6307\u9488\u5927\u4e8e\u7b49\u4e8e\u53f3\u6307\u9488\n    while left < right:\n        # \u5982\u679c\u5de6\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u548c\u53f3\u6307\u9488\u6307\u5411\u7684\u5b57\u7b26\u4e0d\u76f8\u540c\uff0c\u5219\u5b57\u7b26\u4e32\u4e0d\u662f\u56de\u6587\n        if text[left] != text[right]:\n            return False\n        # \u5de6\u6307\u9488\u5411\u540e\u79fb\u52a8\u4e00\u6b65\n        left += 1\n        # \u53f3\u6307\u9488\u5411\u524d\u79fb\u52a8\u4e00\u6b65\n        right -= 1\n    \n    # \u5faa\u73af\u7ed3\u675f\u540e\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u662f\u56de\u6587\n    return True"}
{"task_id": "HumanEval/49", "completion": "def modp(n: int, p: int):\n    \"\"\"\u8fd4\u56de2^n\u6a21p(\u6ce8\u610f\u6570\u5b57)\u3002\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return (2 ** n) % p"}
{"task_id": "HumanEval/50", "completion": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/51", "completion": "def remove_vowels(text):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = \"\"\n    for letter in text:\n        if letter.lower() not in vowels:\n            result += letter\n    return result"}
{"task_id": "HumanEval/52", "completion": "def below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "def add(x: int, y: int) -> int:\n    \"\"\"\u4e24\u4e2a\u6570x\u548cy\u76f8\u52a0\"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "completion": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    \u68c0\u67e5\u4e24\u4e2a\u5355\u8bcd\u662f\u5426\u6709\u76f8\u540c\u7684\u5b57\u7b26\u3002\n    \"\"\"\n    # \u5c06\u4e24\u4e2a\u5355\u8bcd\u8f6c\u6362\u4e3a\u96c6\u5408\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # \u6c42\u4e24\u4e2a\u96c6\u5408\u7684\u4ea4\u96c6\n    intersection = set_s0.intersection(set_s1)\n    \n    # \u5982\u679c\u4ea4\u96c6\u4e0d\u4e3a\u7a7a\uff0c\u5219\u8bf4\u660e\u4e24\u4e2a\u5355\u8bcd\u6709\u76f8\u540c\u7684\u5b57\u7b26\uff0c\u8fd4\u56deTrue\uff1b\u5426\u5219\u8fd4\u56deFalse\n    if intersection:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/55", "completion": "def fib(n: int):\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    if n == 1 or n == 2:\n        return 1\n    a, b = 1, 1\n    for i in range(3, n + 1):\n        a, b = b, a + b\n    return b"}
{"task_id": "HumanEval/56", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) > 0:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "def monotonic(l: list):\n    \"\"\"\u5982\u679c\u5217\u8868\u5143\u7d20\u5355\u8c03\u9012\u589e\u6216\u9012\u51cf\uff0c\u5219\u8fd4\u56deTrue\u3002\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    # \u68c0\u67e5\u5217\u8868\u662f\u5426\u9012\u589e\n    if all(l[i] <= l[i+1] for i in range(len(l)-1)):\n        return True\n    # \u68c0\u67e5\u5217\u8868\u662f\u5426\u9012\u51cf\n    if all(l[i] >= l[i+1] for i in range(len(l)-1)):\n        return True\n    return False"}
{"task_id": "HumanEval/58", "completion": "def common(l1: list, l2: list):\n    \"\"\"\u8fd4\u56de\u4e24\u4e2a\u5217\u8868\u4e2d\u5df2\u6392\u5e8f\u7684\u552f\u4e00\u516c\u5171\u5143\u7d20\u3002\n\n    Args:\n        l1 (list): \u7b2c\u4e00\u4e2a\u5217\u8868\n        l2 (list): \u7b2c\u4e8c\u4e2a\u5217\u8868\n\n    Returns:\n        list: \u516c\u5171\u5143\u7d20\u5217\u8868\uff0c\u5df2\u6392\u5e8f\u4e14\u552f\u4e00\n\n    \"\"\"\n    l1.sort()\n    l2.sort()\n    \n    common_elements = []\n    i, j = 0, 0\n    \n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n            if not common_elements or l1[i] != common_elements[-1]:\n                common_elements.append(l1[i])\n            i += 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n        else:\n            j += 1\n    \n    return common_elements"}
{"task_id": "HumanEval/59", "completion": "def largest_prime_factor(n: int):\n    # \u521d\u59cb\u5316\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e3a1\n    largest_factor = 1\n\n    # \u4ece2\u5f00\u59cb\u9010\u4e2a\u5224\u65ad\u662f\u5426\u4e3a\u56e0\u5b50\n    factor = 2\n    while factor <= math.sqrt(n):\n        # \u5982\u679c\u8be5\u56e0\u5b50\u80fd\u591f\u6574\u9664n\uff0c\u5219\u66f4\u65b0\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e3a\u8be5\u56e0\u5b50\uff0c\u5e76\u5c06n\u9664\u4ee5\u8be5\u56e0\u5b50\uff0c\u7ee7\u7eed\u5224\u65ad\n        if n % factor == 0:\n            largest_factor = factor\n            n = n // factor\n        # \u5982\u679c\u4e0d\u80fd\u6574\u9664\uff0c\u5219\u7ee7\u7eed\u5224\u65ad\u4e0b\u4e00\u4e2a\u56e0\u5b50\n        else:\n            factor += 1\n\n    # \u5982\u679c\u6700\u540e\u5269\u4f59\u7684n\u5927\u4e8e1\uff0c\u5219\u66f4\u65b0\u6700\u5927\u7d20\u6570\u56e0\u5b50\u4e3an\n    if n > 1:\n        largest_factor = n\n\n    return largest_factor"}
{"task_id": "HumanEval/60", "completion": "def sum_to_n(n: int):\n    return (n * (n + 1)) // 2"}
{"task_id": "HumanEval/61", "completion": "def correct_bracketing(brackets: str):\n    stack = []\n    for b in brackets:\n        if b == \"(\":\n            stack.append(b)\n        elif b == \")\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/62", "completion": "def derivative(xs):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "def fibfib(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fib1 = 0\n        fib2 = 1\n        fib3 = 0\n        for i in range(3, n+1):\n            fib3 = fib1 + fib2 + fib3\n            fib1 = fib2\n            fib2 = fib3\n        return fib3"}
{"task_id": "HumanEval/64", "completion": "def vowels_count(s):\n    vowels = \"aeiouy\"\n    count = 0\n    for c in s.lower():\n        if c in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "completion": "def circular_shift(x, shift):\n    x = str(x)\n    n = len(x)\n    shift %= n\n    if shift == 0:\n        return x\n    else:\n        return x[-shift:] + x[:-shift]"}
{"task_id": "HumanEval/66", "completion": "def digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total"}
{"task_id": "HumanEval/67", "completion": "def fruit_distribution(s,n):\n    # \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u82f9\u679c\u548c\u6a58\u5b50\u6570\u91cf\n    apple_count = int(s.split(\" \")[0])\n    orange_count = int(s.split(\" \")[-2])\n    \n    # \u8ba1\u7b97\u8292\u679c\u7684\u6570\u91cf\n    mango_count = n - apple_count - orange_count\n    \n    return mango_count"}
{"task_id": "HumanEval/68", "completion": "def pluck(arr):\n    min_even_value = float('inf')\n    min_even_index = -1\n\n    for i, num in enumerate(arr):\n        if num % 2 == 0 and num < min_even_value:\n            min_even_value = num\n            min_even_index = i\n\n    if min_even_index == -1:\n        return []\n    else:\n        return [min_even_value, min_even_index]"}
{"task_id": "HumanEval/69", "completion": "def search(lst):\n    num_dict = {}\n    \n    # \u8bb0\u5f55\u6bcf\u4e2a\u6570\u5b57\u51fa\u73b0\u7684\u6b21\u6570\n    for num in lst:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    # \u627e\u51fa\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e\u6570\u5b57\u672c\u8eab\u7684\u6700\u5927\u6570\u5b57\n    max_num = -1\n    for num, count in num_dict.items():\n        if num == count and num > max_num:\n            max_num = num\n    \n    return max_num\n\n\n\u4ee5\u4e0a\u5b9e\u73b0\u8f83\u4e3a\u76f4\u89c2\uff0c\u4f46\u662f\u65f6\u95f4\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4e3aO(n^2)\u3002\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\u7684\u4f18\u5316\u5b9e\u73b0\u3002\n\n\ndef search(lst):\n    num_dict = {}\n    max_num = -1\n    \n    for num in lst:\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n        \n        if num_dict[num] == num and num > max_num:\n            max_num = num\n    \n    return max_num"}
{"task_id": "HumanEval/70", "completion": "def strange_sort_list(lst):\n    # \u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u7a7a\u5217\u8868\n    if not lst:\n        return []\n    \n    # \u7ed3\u679c\u5217\u8868\n    result = []\n    \n    # \u5faa\u73af\u76f4\u5230\u5217\u8868\u4e3a\u7a7a\n    while lst:\n        # \u627e\u5230\u5217\u8868\u4e2d\u7684\u6700\u5c0f\u503c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        min_val = min(lst)\n        result.append(min_val)\n        lst.remove(min_val)\n        \n        # \u5982\u679c\u5217\u8868\u4e3a\u7a7a\uff0c\u5219\u8df3\u51fa\u5faa\u73af\n        if not lst:\n            break\n        \n        # \u627e\u5230\u5269\u4f59\u6574\u6570\u4e2d\u7684\u6700\u5927\u503c\u5e76\u6dfb\u52a0\u5230\u7ed3\u679c\u5217\u8868\u4e2d\n        max_val = max(lst)\n        result.append(max_val)\n        lst.remove(max_val)\n    \n    return result"}
{"task_id": "HumanEval/71", "completion": "def triangle_area(a, b, c):\n    if a <= 0 or b <= 0 or c <= 0:\n        return -1\n    \n    if (a + b) > c and (a + c) > b and (b + c) > a:\n        p = (a + b + c) / 2\n        area = (p * (p - a) * (p - b) * (p - c)) ** 0.5\n        return round(area, 2)\n    \n    return -1"}
{"task_id": "HumanEval/72", "completion": "def will_it_fly(q, w):\n    # \u5224\u65ad\u5217\u8868\u662f\u5426\u4e3a\u56de\u6587\u5217\u8868\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    \n    # \u5224\u65ad\u5217\u8868\u7684\u5143\u7d20\u603b\u548c\u662f\u5426\u5c0f\u4e8e\u7b49\u4e8e\u6700\u5927\u91cd\u91cf\n    def sum_total(lst):\n        return sum(lst) <= w\n    \n    # \u5224\u65ad\u5bf9\u8c61\u662f\u5426\u80fd\u98de\u884c\n    if is_palindrome(q) and sum_total(q):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "def smallest_change(arr):\n    count = 0\n    n = len(arr)\n    \n    for i in range(n // 2):\n        j = n - 1 - i\n        if arr[i] != arr[j]:\n            if arr[i] < arr[j]:\n                arr[i] = arr[j]\n            else:\n                arr[j] = arr[i]\n            count += 1\n    return count"}
{"task_id": "HumanEval/74", "completion": "def total_match(lst1, lst2):\n    # \u8ba1\u7b97lst1\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u603b\u6570\n    total1 = sum(len(s) for s in lst1)\n    # \u8ba1\u7b97lst2\u6240\u6709\u5b57\u7b26\u4e32\u7684\u5b57\u7b26\u603b\u6570\n    total2 = sum(len(s) for s in lst2)\n    \n    # \u5224\u65ad\u54ea\u4e2a\u5217\u8868\u7684\u5b57\u7b26\u603b\u6570\u5c0f\u4e8e\u53e6\u4e00\u4e2a\u5217\u8868\u7684\u5b57\u7b26\u603b\u6570\n    if total1 < total2:\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": "def is_multiply_prime(a):\n    primes = [2, 3, 5]\n    for p in primes:\n        if a % p != 0:\n            return False\n        a //= p\n    return a == 1"}
{"task_id": "HumanEval/76", "completion": "def is_simple_power(x, n):\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        k = math.log(x, n)\n        return k == int(k)"}
{"task_id": "HumanEval/77", "completion": "def iscube(a):\n    if a < 0:   # \u5224\u65ad\u8d1f\u6570\u7684\u7acb\u65b9\u6839\n        a = -a   # \u53d6\u7edd\u5bf9\u503c\n        root = int(a ** (1 / 3))   # \u6c42\u7acb\u65b9\u6839\n        if root ** 3 == a:   # \u5224\u65ad\u662f\u5426\u4e3a\u7acb\u65b9\u6570\n            return True\n        else:\n            return False\n    else:   # \u5224\u65ad\u6b63\u6570\u548c0\u7684\u7acb\u65b9\u6839\n        root = int(a ** (1 / 3))   # \u6c42\u7acb\u65b9\u6839\n        if root ** 3 == a:   # \u5224\u65ad\u662f\u5426\u4e3a\u7acb\u65b9\u6570\n            return True\n        else:\n            return False"}
{"task_id": "HumanEval/78", "completion": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "completion": "def decimal_to_binary(decimal):\n    # \u5c06\u5341\u8fdb\u5236\u6570\u5b57\u8f6c\u6362\u4e3a\u4e8c\u8fdb\u5236\u5b57\u7b26\u4e32\n    binary = bin(decimal)[2:]\n    # \u6dfb\u52a0\u5f00\u5934\u548c\u7ed3\u5c3e\u6807\u8bb0\n    binary = 'db' + binary + 'db'\n    return binary"}
{"task_id": "HumanEval/80", "completion": "def is_happy(s):\n    if len(s) < 3:\n        return False\n    \n    for i in range(2, len(s)):\n        if s[i] == s[i-1] or s[i] == s[i-2]:\n            return False\n    \n    return True"}
{"task_id": "HumanEval/81", "completion": "def numerical_letter_grade(grades):\n    letter_grades = []\n    for grade in grades:\n        if grade >= 4.0:\n            letter_grades.append(\"A+\")\n        elif grade >= 3.7:\n            letter_grades.append(\"A\")\n        elif grade >= 3.3:\n            letter_grades.append(\"A-\")\n        elif grade >= 3.0:\n            letter_grades.append(\"B+\")\n        elif grade >= 2.7:\n            letter_grades.append(\"B\")\n        elif grade >= 2.3:\n            letter_grades.append(\"B-\")\n        elif grade >= 2.0:\n            letter_grades.append(\"C+\")\n        elif grade >= 1.7:\n            letter_grades.append(\"C\")\n        elif grade >= 1.3:\n            letter_grades.append(\"C-\")\n        elif grade >= 1.0:\n            letter_grades.append(\"D+\")\n        elif grade >= 0.7:\n            letter_grades.append(\"D\")\n        elif grade >= 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "def is_prime(n):\n    \"\"\"\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u7d20\u6570\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    \"\"\"\u5224\u65ad\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u662f\u5426\u4e3a\u7d20\u6570\"\"\"\n    length = len(string)\n    return is_prime(length)"}
{"task_id": "HumanEval/83", "completion": "def starts_one_ends(n):\n    start_count = 0\n    end_count = 0\n    \n    # \u904d\u5386n\u4f4d\u6b63\u6574\u6570\n    for i in range(10**(n-1), 10**n):\n        num_str = str(i)\n        # \u5224\u65ad\u662f\u5426\u4ee51\u5f00\u59cb\n        if num_str[0] == '1':\n            start_count += 1\n        # \u5224\u65ad\u662f\u5426\u4ee51\u7ed3\u675f\n        if num_str[-1] == '1':\n            end_count += 1\n    \n    return start_count, end_count"}
{"task_id": "HumanEval/84", "completion": "def solve(N):\n    total = 0\n    while N > 0:\n        total += N % 10\n        N //= 10\n    binary = bin(total)[2:]\n    return binary"}
{"task_id": "HumanEval/85", "completion": "def add(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 2 != 0 and lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "def anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/87", "completion": "def get_row(lst, x):\n    result = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                result.append((i, j))\n    result.sort(key=lambda tup: (tup[0], -tup[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "def sort_array(array):\n    # \u68c0\u67e5\u6570\u7ec4\u957f\u5ea6\u662f\u5426\u4e3a0\u62161\n    if len(array) < 2:\n        return array\n\n    # \u8ba1\u7b97\u7b2c\u4e00\u4e2a\u7d22\u5f15\u503c\u548c\u6700\u540e\u4e00\u4e2a\u7d22\u5f15\u503c\u7684\u548c\n    sum_index = array[0] + array[-1]\n    \n    # \u6309\u7167\u5947\u5076\u6570\u5206\u522b\u6392\u5e8f\n    if sum_index % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"}
{"task_id": "HumanEval/89", "completion": "def encrypt(s):\n    encrypted = ''\n    for char in s:\n        if char.isalpha():\n            char_code = ord(char)\n            if char.islower():\n                rotated_code = ((char_code - ord('a')) + 4) % 26 + ord('a')\n            else:\n                rotated_code = ((char_code - ord('A')) + 4) % 26 + ord('A')\n            encrypted += chr(rotated_code)\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "def next_smallest(lst):\n    if len(lst) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    if second_smallest == float('inf'):\n        return None\n    else:\n        return second_smallest"}
{"task_id": "HumanEval/91", "completion": "def is_bored(S):\n    sentences = S.split('. ')  # \u5206\u5272\u53e5\u5b50\n    sentences = [s.strip() for s in sentences]  # \u53bb\u9664\u7a7a\u683c\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"\u6211\"):\n            count += 1\n    return count"}
{"task_id": "HumanEval/92", "completion": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "completion": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    result = ''\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                char = chr(ord(char.lower()) + 2)\n            else:\n                char = char.swapcase()\n        result += char\n    return result"}
{"task_id": "HumanEval/94", "completion": "def skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n\n    return sum(int(digit) for digit in str(max_prime))"}
{"task_id": "HumanEval/95", "completion": "def check_dict_case(my_dict):\n    if len(my_dict) == 0:\n        return False"}
{"task_id": "HumanEval/96", "completion": "def is_prime(number):\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "def multiply(a, b):\n    # \u83b7\u53d6a\u548cb\u7684\u4e2a\u4f4d\u6570\n    a_digit = a % 10\n    b_digit = b % 10\n\n    # \u8ba1\u7b97\u4e2a\u4f4d\u6570\u7684\u4e58\u79ef\n    result = a_digit * b_digit\n\n    return result"}
{"task_id": "HumanEval/98", "completion": "def count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] in ['A', 'E', 'I', 'O', 'U']:\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "completion": "def closest_integer(value):\n    # \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u6d6e\u70b9\u6570\n    num = float(value)\n    \n    # \u53d6\u6574\u5f97\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\n    closest_int = round(num)\n    \n    # \u5224\u65ad\u6700\u63a5\u8fd1\u7684\u6574\u6570\u79bb0\u7684\u8ddd\u79bb\n    distance_from_zero = abs(closest_int)\n    distance_from_zero_minus_one = abs(closest_int - 1)\n\n    # \u5982\u679c\u8ddd\u79bb\u76f8\u7b49\uff0c\u8fd4\u56de\u79bb\u96f6\u6700\u8fdc\u7684\u6574\u6570\n    if distance_from_zero == distance_from_zero_minus_one:\n        return closest_int if closest_int >= 0 else closest_int - 1\n    else:\n        return closest_int"}
{"task_id": "HumanEval/100", "completion": "def make_a_pile(n):\n    stones = [n]\n    for i in range(1, n):\n        if n % 2 == 0:\n            stones.append(n + i)\n        else:\n            stones.append(n + i + 1)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "def words_string(s):\n    # \u7528\u9017\u53f7\u548c\u7a7a\u683c\u5206\u9694\u5b57\u7b26\u4e32\n    words = s.split(\",\") + s.split(\" \")\n    # \u53bb\u9664\u5355\u8bcd\u524d\u540e\u7684\u7a7a\u683c\n    words = [word.strip() for word in words]\n    # \u53bb\u9664\u7a7a\u5b57\u7b26\u4e32\n    words = [word for word in words if word]\n    return words"}
{"task_id": "HumanEval/102", "completion": "def choose_num(x, y):\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even"}
{"task_id": "HumanEval/103", "completion": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        average = (n + m) // 2\n        return bin(average)"}
{"task_id": "HumanEval/104", "completion": "def unique_digits(x):\n    \"\"\"\u7ed9\u5b9a\u4e00\u4e2a\u6b63\u6574\u6570\u5217\u8868x\uff0c\u8fd4\u56de\u6ca1\u6709\u5076\u6570\u7684\u6240\u6709\u5143\u7d20\u7684\u6709\u5e8f\u5217\u8868\u3002\n\n    \u6ce8\u610f: \u8fd4\u56de\u7684\u5217\u8868\u5e94\u6309\u9012\u589e\u987a\u5e8f\u6392\u5e8f\u3002\n    \n    \u4f8b\u5982:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "def by_length(arr):\n    # \u5c06\u6570\u7ec4\u4e2d\u7684\u975e\u4e00\u5230\u4e5d\u7684\u6570\u5b57\u8fc7\u6ee4\u6389\n    arr = [x for x in arr if 1 <= x <= 9]\n    \n    # \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\u548c\u53cd\u8f6c\n    arr.sort()\n    arr.reverse()\n    \n    # \u4f7f\u7528\u5b57\u5178\u5c06\u6570\u5b57\u6620\u5c04\u4e3a\u5bf9\u5e94\u7684\u540d\u79f0\n    num_map = {\n        1: 'One',\n        2: 'Two',\n        3: 'Three',\n        4: 'Four',\n        5: 'Five',\n        6: 'Six',\n        7: 'Seven',\n        8: 'Eight',\n        9: 'Nine'\n    }\n    \n    # \u5c06\u6570\u7ec4\u4e2d\u7684\u6570\u5b57\u66ff\u6362\u4e3a\u5bf9\u5e94\u7684\u540d\u79f0\n    arr = [num_map[x] for x in arr]\n    \n    return arr"}
{"task_id": "HumanEval/106", "completion": "def f(n):\n    result = []\n    factorial = 1\n    total_sum = 0\n\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            factorial *= i\n            result.append(factorial)\n        else:\n            total_sum += i\n            result.append(total_sum)\n\n    return result"}
{"task_id": "HumanEval/107", "completion": "def even_odd_palindrome(n):\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n\ndef is_palindrome(num):\n    # \u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u662f\u56de\u6587\u5b57\u7b26\u4e32\n    s = str(num)\n    return s == s[::-1]"}
{"task_id": "HumanEval/108", "completion": "def count_nums(arr):\n    count = 0\n    for i in arr:\n        if i < 0:\n            i = -i\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if sum_of_digits > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "completion": "def move_one_ball(arr):\n    if len(arr) == 0:\n        return True\n    \n    if sorted(arr) == arr:\n        return True\n    \n    max_idx = arr.index(max(arr))\n    return abs(max_idx - 0) <= 1"}
{"task_id": "HumanEval/110", "completion": "def exchange(lst1, lst2):\n    even_count = sum(x % 2 == 0 for x in lst1)\n    if even_count == len(lst1):\n        return \"YES\"\n    \n    for num in lst1:\n        if num % 2 != 0:\n            if (num + 1) in lst2 and lst2.count(num + 1) > 1:\n                return \"YES\"\n            elif (num - 1) in lst2 and lst2.count(num -1) > 1:\n                return \"YES\"\n\n    return \"NO\""}
{"task_id": "HumanEval/111", "completion": "def histogram(test):\n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178\u7528\u4e8e\u5b58\u50a8\u5b57\u6bcd\u548c\u5b83\u4eec\u7684\u51fa\u73b0\u6b21\u6570\n    result = {}\n    \n    # \u5c06\u5b57\u7b26\u4e32\u6309\u7a7a\u683c\u5206\u5272\u6210\u5355\u8bcd\n    words = test.split(' ')\n\n    # \u904d\u5386\u6bcf\u4e2a\u5355\u8bcd\n    for word in words:\n        # \u5224\u65ad\u5355\u8bcd\u662f\u5426\u5728\u5b57\u5178\u4e2d\n        if word in result:\n            # \u5982\u679c\u5728\u5b57\u5178\u4e2d\uff0c\u589e\u52a0\u5b83\u7684\u51fa\u73b0\u6b21\u6570\n            result[word] += 1\n        else:\n            # \u5982\u679c\u4e0d\u5728\u5b57\u5178\u4e2d\uff0c\u5c06\u5b83\u6dfb\u52a0\u5230\u5b57\u5178\uff0c\u5e76\u5c06\u51fa\u73b0\u6b21\u6570\u8bbe\u4e3a1\n            result[word] = 1\n    \n    # \u627e\u5230\u51fa\u73b0\u6b21\u6570\u6700\u591a\u7684\u5b57\u6bcd\u7684\u51fa\u73b0\u6b21\u6570\n    max_count = max(result.values())\n    \n    # \u521b\u5efa\u4e00\u4e2a\u7a7a\u7684\u5b57\u5178\u7528\u4e8e\u5b58\u50a8\u91cd\u590d\u6b21\u6570\u6700\u591a\u7684\u5b57\u6bcd\u53ca\u5176\u76f8\u5e94\u7684\u51fa\u73b0\u6b21\u6570\n    final_result = {}\n    \n    # \u904d\u5386\u6bcf\u4e2a\u5b57\u6bcd\u53ca\u5176\u51fa\u73b0\u6b21\u6570\n    for letter, count in result.items():\n        # \u5982\u679c\u51fa\u73b0\u6b21\u6570\u7b49\u4e8e\u6700\u5927\u6b21\u6570\uff0c\u5c06\u5b83\u6dfb\u52a0\u5230\u6700\u7ec8\u7ed3\u679c\u5b57\u5178\u4e2d\n        if count == max_count:\n            final_result[letter] = count\n    \n    return final_result"}
{"task_id": "HumanEval/112", "completion": "def reverse_delete(s, c):\n    # \u5c06\u5b57\u7b26\u4e32s\u8f6c\u6362\u4e3a\u5217\u8868\uff0c\u65b9\u4fbf\u5220\u9664\u64cd\u4f5c\n    s_list = list(s)\n    \n    # \u5220\u9664s\u4e2d\u7b49\u4e8ec\u4e2d\u4efb\u610f\u5b57\u7b26\u7684\u5b57\u7b26\n    for char in c:\n        s_list = [ch for ch in s_list if ch != char]\n    \n    # \u5c06\u5217\u8868\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    s_new = ''.join(s_list)\n    \n    # \u68c0\u67e5\u7ed3\u679c\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u56de\u6587\n    if s_new == s_new[::-1]:\n        return s_new, True\n    else:\n        return s_new, False"}
{"task_id": "HumanEval/113", "completion": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst, 1):\n        odd_count = sum(int(d) % 2 != 0 for d in s)\n        result.append(\"the number of odd elements in the string {} of the input.\".format(odd_count))\n    return result"}
{"task_id": "HumanEval/114", "completion": "def minSubArraySum(nums):\n    # \u521d\u59cb\u5316\u6700\u5c0f\u548c\u4e3a\u6b63\u65e0\u7a77\u5927\n    min_sum = float('inf')\n    # \u521d\u59cb\u5316\u4e34\u65f6\u6570\u7ec4\n    temp = []\n    # \u904d\u5386\u8f93\u5165\u6570\u7ec4\n    for num in nums:\n        # \u5c06\u5f53\u524d\u5143\u7d20\u6dfb\u52a0\u5230\u4e34\u65f6\u6570\u7ec4\n        temp.append(num)\n        # \u5f53\u4e34\u65f6\u6570\u7ec4\u7684\u548c\u5927\u4e8e0\u65f6\uff0c\u7ee7\u7eed\u6dfb\u52a0\u5143\u7d20\n        if sum(temp) > 0:\n            continue\n        else:\n            # \u5f53\u4e34\u65f6\u6570\u7ec4\u7684\u548c\u5c0f\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u79fb\u9664\u6389\u4e4b\u524d\u6dfb\u52a0\u7684\u5143\u7d20\n            while sum(temp) <= 0:\n                temp.pop(0)\n        # \u6bd4\u8f83\u5f53\u524d\u7684\u6700\u5c0f\u548c\u4e0e\u4e34\u65f6\u6570\u7ec4\u7684\u548c\uff0c\u66f4\u65b0\u6700\u5c0f\u548c\u7684\u503c\n        min_sum = min(min_sum, sum(temp))\n    \n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "def max_fill(grid, capacity):\n    # \u8ba1\u7b97\u6bcf\u53e3\u4e95\u4e2d\u7684\u6c34\u91cf\n    water = []\n    for row in grid:\n        water.append(sum(row))\n\n    # \u8ba1\u7b97\u5012\u6c34\u7684\u6b21\u6570\n    count = 0\n    for w in water:\n        while w > 0:\n            w -= capacity\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/116", "completion": "def sort_array(arr):\n    def count_ones(num):\n        count = 0\n        while num > 0:\n            if num % 2 == 1:\n                count += 1\n            num = num // 2\n        return count\n\n    arr.sort()\n    return sorted(arr, key=count_ones)"}
{"task_id": "HumanEval/117", "completion": "def select_words(s, n):\n    if not s:\n        return []\n    \n    vowels = \"aeiouAEIOU\"\n    words = s.split()\n    result = []\n    \n    for word in words:\n        count = 0\n        for char in word:\n            if char in vowels:\n                count += 1\n        if count == n:\n            result.append(word)\n    \n    return result"}
{"task_id": "HumanEval/118", "completion": "def get_closest_vowel(word):\n    vowels = set('aeiou')\n    word = word.lower()\n    for i in range(1, len(word)-1):\n        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:\n            return word[i].upper()\n    return \"\""}
{"task_id": "HumanEval/119", "completion": "def match_parens(lst):\n    s1, s2 = lst[0], lst[1]\n\n    count1 = 0\n    count2 = 0\n\n    for c in s1:\n        if c == '(':\n            count1 += 1\n        elif c == ')':\n            count1 -= 1\n\n    for c in s2:\n        if c == '(':\n            count2 += 1\n        elif c == ')':\n            count2 -= 1\n\n    if count1 == count2:\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/120", "completion": "def maximum(arr, k):\n    if k == 0:\n        return []\n    \n    # \u521b\u5efa\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u7528\u4e8e\u4fdd\u5b58\u6570\u7ec4\u4e2d\u7684k\u4e2a\u6700\u5927\u6570\n    heap = []\n    \n    # \u904d\u5386\u6570\u7ec4\uff0c\u5c06\u6570\u7ec4\u4e2d\u7684\u5143\u7d20\u6dfb\u52a0\u5230\u6700\u5c0f\u5806\u4e2d\n    for num in arr:\n        # \u5982\u679c\u6700\u5c0f\u5806\u7684\u5143\u7d20\u6570\u91cf\u5c0f\u4e8ek\uff0c\u5219\u76f4\u63a5\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u4e2d\n        if len(heap) < k:\n            heapq.heappush(heap, num)\n        else:\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u5806\u9876\u5143\u7d20\u5927\uff0c\u5219\u5c06\u5806\u9876\u5143\u7d20\u5f39\u51fa\uff0c\u5c06\u5f53\u524d\u5143\u7d20\u6dfb\u52a0\u5230\u5806\u4e2d\n            if num > heap[0]:\n                heapq.heappushpop(heap, num)\n    \n    # \u8fd4\u56de\u5806\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5373\u4e3a\u6700\u5927\u7684k\u4e2a\u6570\n    return heap"}
{"task_id": "HumanEval/121", "completion": "def solution(lst):\n    # \u521d\u59cb\u5316\u5947\u6570\u5143\u7d20\u548c\n    sum_of_odd_elements = 0\n    \n    # \u904d\u5386\u5217\u8868\uff0c\u4e0b\u6807\u4ece1\u5f00\u59cb\uff0c\u6b65\u957f\u4e3a2\n    for i in range(1, len(lst), 2):\n        # \u5982\u679c\u5f53\u524d\u5143\u7d20\u4e3a\u5947\u6570\uff0c\u5219\u5c06\u5176\u52a0\u5230\u5947\u6570\u5143\u7d20\u548c\u4e2d\n        if lst[i] % 2 != 0:\n            sum_of_odd_elements += lst[i]\n    \n    # \u8fd4\u56de\u5947\u6570\u5143\u7d20\u548c\n    return sum_of_odd_elements"}
{"task_id": "HumanEval/122", "completion": "def add_elements(arr, k):\n    arr.sort()  # \u5bf9\u6570\u7ec4\u8fdb\u884c\u6392\u5e8f\n    sum = 0\n    for i in range(k):\n        if arr[i] <= 99:\n            sum += arr[i]\n    return sum"}
{"task_id": "HumanEval/123", "completion": "def get_odd_collatz(n):\n    collatz = [n]  # \u521d\u59cb\u5316collatz\u5e8f\u5217\u4e3an\n    while n != 1:  # \u5f53n\u4e0d\u7b49\u4e8e1\u65f6\u5faa\u73af\n        if n % 2 == 0:  # \u5982\u679cn\u662f\u5076\u6570\n            n //= 2  # \u5c06n\u9664\u4ee52\n        else:  # \u5982\u679cn\u662f\u5947\u6570\n            n = 3 * n + 1  # \u5c06n\u4e58\u4ee53\u518d\u52a01\n        collatz.append(n)  # \u5c06n\u6dfb\u52a0\u5230collatz\u5e8f\u5217\u4e2d\n\n    # \u7b5b\u9009\u51fa\u5947\u6570\u5e76\u6392\u5e8f\n    odd_collatz = [x for x in collatz if x % 2 != 0]\n    odd_collatz.sort()\n\n    return odd_collatz"}
{"task_id": "HumanEval/124", "completion": "def valid_date(date):\n    if len(date) != 10 or date.count('-') != 2:\n        return False\n\n    month, day, year = date.split('-')\n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if day < 1 or (month == 2 and day > 29) or (month in [4, 6, 9, 11] and day > 30) or (day > 31):\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for c in txt if c.islower() and ord(c) % 2 == 1)"}
{"task_id": "HumanEval/126", "completion": "def is_sorted(lst):\n    if len(set(lst)) != len(lst):\n        return False\n    return sorted(lst) == lst"}
{"task_id": "HumanEval/127", "completion": "def is_prime(n):\n    \"\"\"\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u662f\u7d20\u6570\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    \n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/128", "completion": "if len(arr) == 0:\n    return None"}
{"task_id": "HumanEval/129", "completion": "\u8fd9\u6bb5\u4ee3\u7801\u5b9e\u73b0\u4e86\u4e00\u4e2a\u51fd\u6570minPath\uff0c\u7528\u4e8e\u5728\u7f51\u683c\u4e2d\u627e\u5230\u957f\u5ea6\u4e3ak\u7684\u6700\u5c0f\u8def\u5f84\uff0c\u5e76\u8fd4\u56de\u6700\u5c0f\u8def\u5f84\u7ecf\u8fc7\u7684\u5355\u5143\u683c\u4e0a\u7684\u503c\u7684\u6709\u5e8f\u5217\u8868\u3002\n\n\u51fd\u6570\u7684\u8f93\u5165\u53c2\u6570\u4e3a\u4e00\u4e2a\u4e8c\u7ef4\u7f51\u683cgrid\u548c\u4e00\u4e2a\u6b63\u6574\u6570k\u3002\u7f51\u683c\u7684\u6bcf\u4e2a\u5355\u5143\u683c\u90fd\u5305\u542b\u4e00\u4e2a\u503c\uff0c\u4e14\u5728[1, N * N]\u8303\u56f4\u5185\u3002\u51fd\u6570\u4f1a\u8fd4\u56de\u4e00\u4e2a\u6700\u5c0f\u8def\u5f84\u7ecf\u8fc7\u7684\u5355\u5143\u683c\u503c\u7684\u6709\u5e8f\u5217\u8868\u3002\n\n\u51fd\u6570\u7684\u5b9e\u73b0\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n1. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfvisited\uff0c\u7528\u4e8e\u8bb0\u5f55\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u5355\u5143\u683c\uff0c\u521d\u59cb\u503c\u4e3a\u7a7a\u96c6\u5408\u3002\n2. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfn\uff0c\u7528\u4e8e\u8868\u793a\u7f51\u683c\u7684\u5927\u5c0f\uff0c\u5373\u884c\u6570\u6216\u5217\u6570\u3002\n3. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfcur\uff0c\u8868\u793a\u5f53\u524d\u7684\u4f4d\u7f6e\uff0c\u521d\u59cb\u503c\u4e3a\u4efb\u610f\u4e00\u4e2a\u5355\u5143\u683c\u7684\u5750\u6807\u3002\n4. \u5b9a\u4e49\u4e00\u4e2a\u53d8\u91cfpath\uff0c\u7528\u4e8e\u8bb0\u5f55\u8def\u5f84\u7ecf\u8fc7\u7684\u5355\u5143\u683c\u4e0a\u7684\u503c\uff0c\u521d\u59cb\u503c\u4e3a\u4e00\u4e2a\u7a7a\u5217\u8868\u3002\n5. \u8fdb\u5165\u5faa\u73af\uff0c\u76f4\u5230\u627e\u5230\u957f\u5ea6\u4e3ak\u7684\u6700\u5c0f\u8def\u5f84\u6216\u904d\u5386\u5b8c\u6240\u6709\u53ef\u80fd\u7684\u8def\u5f84\u4e3a\u6b62\u3002\n   a. \u5c06\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\u6dfb\u52a0\u5230path\u4e2d\u3002\n   b. \u5c06\u5f53\u524d\u4f4d\u7f6e\u6dfb\u52a0\u5230visited\u4e2d\u3002\n   c. \u5982\u679cpath\u7684\u957f\u5ea6\u7b49\u4e8ek\uff0c\u5219\u8fd4\u56depath\u3002\n   d. \u904d\u5386\u5f53\u524d\u4f4d\u7f6e\u7684\u76f8\u90bb\u5355\u5143\u683c\uff0c\u627e\u5230\u4e00\u4e2a\u672a\u8bbf\u95ee\u8fc7\u7684\u5355\u5143\u683c\uff0c\u5c06\u5176\u8bbe\u4e3a\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\n   e. \u5982\u679c\u6240\u6709\u7684\u76f8\u90bb\u5355\u5143\u683c\u90fd\u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u5219\u9009\u62e9\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u76f8\u90bb\u5355\u5143\u683c\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u3002\n6. \u8fd4\u56de\u7a7a\u5217\u8868\uff0c\u8868\u793a\u627e\u4e0d\u5230\u957f\u5ea6\u4e3ak\u7684\u8def\u5f84\u3002\n\n\u51fd\u6570\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n * n * k)\uff0c\u5176\u4e2dn\u4e3a\u7f51\u683c\u7684\u5927\u5c0f\uff0ck\u4e3a\u8def\u5f84\u957f\u5ea6\u3002"}
{"task_id": "HumanEval/130", "completion": "def tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    elif n == 3:\n        return [1, 1, 2]\n    else:\n        sequence = [1, 1, 2]\n        for i in range(3, n+1):\n            if i % 2 == 0:\n                sequence.append(1 + i/2)\n            else:\n                sequence.append(sequence[i-1] + sequence[i-2] + sequence[i+1])\n        return sequence"}
{"task_id": "HumanEval/131", "completion": "def digits(n):\n    # \u5c06n\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n    n_str = str(n)\n    \n    # \u521d\u59cb\u5316\u4e58\u79ef\u4e3a1\n    product = 1\n    \n    # \u904d\u5386\u5b57\u7b26\u4e32\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6570\u5b57\n    for digit in n_str:\n        # \u5c06\u6570\u5b57\u8f6c\u6362\u4e3a\u6574\u6570\n        num = int(digit)\n        \n        # \u5982\u679c\u6570\u5b57\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56de0\n        if num % 2 == 0:\n            return 0\n        \n        # \u5426\u5219\u5c06\u6570\u5b57\u4e58\u79ef\u5230\u7ed3\u679c\u4e2d\n        product *= num\n    \n    # \u8fd4\u56de\u4e58\u79ef\n    return product"}
{"task_id": "HumanEval/132", "completion": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) > 0 and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n    if len(stack) == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/133", "completion": "def sum_squares(lst):\n    total = 0\n    for num in lst:\n        rounded_num = round(num)\n        square_num = rounded_num ** 2\n        total += square_num\n    return total"}
{"task_id": "HumanEval/134", "completion": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and (not txt[:-1] or txt[:-1].split()[-1] != txt[:-1]):\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/135", "completion": "def can_arrange(arr):\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            max_index = i-1\n    return max_index"}
{"task_id": "HumanEval/136", "completion": "def largest_smallest_integers(lst):\n    negative_nums = [num for num in lst if num < 0]\n    positive_nums = [num for num in lst if num > 0]\n\n    if not negative_nums or not positive_nums:\n        return (None, None)\n\n    largest_negative = max(negative_nums)\n    smallest_positive = min(positive_nums)\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "def compare_one(a, b):\n    if isinstance(a, str) and isinstance(b, str):\n        a = a.replace(\",\", \".\")  # \u5c06\u9017\u53f7\u66ff\u6362\u4e3a\u5c0f\u6570\u70b9\n        b = b.replace(\",\", \".\")\n        a = float(a)\n        b = float(b)\n    elif isinstance(a, str):\n        a = a.replace(\",\", \".\")\n        a = float(a)\n    elif isinstance(b, str):\n        b = b.replace(\",\", \".\")\n        b = float(b)\n    \n    if a == b:\n        return None\n    elif a > b:\n        return a\n    else:\n        return b"}
{"task_id": "HumanEval/138", "completion": "def is_equal_to_sum_even(n):\n    \"\"\"\u6c42\u7ed9\u5b9a\u7684\u6570n\u662f\u5426\u53ef\u4ee5\u5199\u6210\u6b63\u597d4\u4e2a\u6b63\u5076\u6570\u7684\u548c\"\"\"\n    # \u5982\u679cn\u5c0f\u4e8e8\uff0c\u65e0\u6cd5\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\uff0c\u76f4\u63a5\u8fd4\u56deFalse\n    if n < 8:\n        return False\n    # \u5982\u679cn\u662f\u5076\u6570\uff0c\u5219\u8fd4\u56deTrue\n    if n % 2 == 0:\n        return True\n    # \u5982\u679cn\u662f\u5947\u6570\uff0c\u5224\u65adn-8\u662f\u5426\u53ef\u4ee5\u5199\u62104\u4e2a\u6b63\u5076\u6570\u7684\u548c\n    return is_equal_to_sum_even(n - 8)"}
{"task_id": "HumanEval/139", "completion": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ndef special_factorial(n):\n    if n > 0:\n        result = factorial(n)  # \u8ba1\u7b97n!\n        for i in range(n-1, 0, -1):\n            result *= factorial(i)  # \u8ba1\u7b97(n-1)! * (n-2)! * ... * 1!\n        return result\n    else:\n        return None"}
{"task_id": "HumanEval/140", "completion": "def fix_spaces(text):\n    \"\"\"\n    \u7ed9\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u6587\u672c\uff0c\u5c06\u5176\u4e2d\u7684\u6240\u6709\u7a7a\u683c\u66ff\u6362\u4e3a\u4e0b\u5212\u7ebf\uff0c\n    \u5982\u679c\u4e00\u4e2a\u5b57\u7b26\u4e32\u6709\u8d85\u8fc7\u4e24\u4e2a\u8fde\u7eed\u7684\u7a7a\u683c\uff0c\u7136\u540e\u5c06\u6240\u6709\u8fde\u7eed\u7684\u7a7a\u683c\u66ff\u6362\u4e3a-\n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    new_text = \"\"\n    space_count = 0\n    for char in text:\n        if char == \" \":\n            space_count += 1\n            if space_count > 2:\n                new_text += \"-\"\n        elif space_count > 1:\n            new_text += \"_\"\n            new_text += char\n            space_count = 0\n        else:\n            new_text += char\n            space_count = 0\n    return new_text"}
{"task_id": "HumanEval/141", "completion": "\u8bf7\u95ee\u6709\u4ec0\u4e48\u5177\u4f53\u9700\u6c42\uff0c\u8fd8\u662f\u9700\u8981\u5b8c\u6574\u7684\u4ee3\u7801\u5b9e\u73b0\uff1f"}
{"task_id": "HumanEval/142", "completion": "def sum_squares(lst):\n    sum = 0\n    for i, num in enumerate(lst):\n        if (i + 1) % 3 == 0:\n            sum += num ** 2\n        elif (i + 1) % 4 == 0:\n            sum += num ** 3\n    return sum"}
{"task_id": "HumanEval/143", "completion": "def is_prime(n):\n    \"\"\"\n    \u8f85\u52a9\u51fd\u6570\uff1a\u68c0\u67e5\u4e00\u4e2a\u6570\u662f\u5426\u4e3a\u8d28\u6570\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    # \u5c06\u53e5\u5b50\u5207\u5206\u6210\u5355\u8bcd\n    words = sentence.split(\" \")\n    \n    # \u7528\u5217\u8868\u63a8\u5bfc\u5f0f\u8fc7\u6ee4\u51fa\u957f\u5ea6\u4e3a\u8d28\u6570\u7684\u5355\u8bcd\n    prime_words = [word for word in words if is_prime(len(word))]\n    \n    # \u8fd4\u56de\u65b0\u5b57\u7b26\u4e32\uff0c\u7528\u7a7a\u683c\u8fde\u63a5\u8fc7\u6ee4\u51fa\u7684\u5355\u8bcd\n    return \" \".join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "def simplify(x, n):\n    # \u5c06\u5b57\u7b26\u4e32\u8868\u793a\u7684\u5206\u6570\u8f6c\u5316\u4e3aFraction\u5bf9\u8c61\n    x_frac = Fraction(x)\n    n_frac = Fraction(n)\n    \n    # \u5c06\u5206\u5b50\u548c\u5206\u6bcd\u76f8\u4e58\u5f97\u5230\u7ed3\u679c\n    result = x_frac * n_frac\n    \n    # \u5224\u65ad\u7ed3\u679c\u662f\u5426\u4e3a\u6574\u6570\n    if result.numerator % result.denominator == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "completion": "def order_by_points(nums):\n    def get_digit_sum(num):\n        return sum(int(digit) for digit in str(num))\n\n    return sorted(nums, key=lambda x: (get_digit_sum(x), nums.index(x)))"}
{"task_id": "HumanEval/146", "completion": "def specialFilter(nums):\n    result = []\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            result.append(num)\n    return len(result)"}
{"task_id": "HumanEval/147", "completion": "def get_max_triples(n):\n    a = [0] * n\n\n    for i in range(1, n-1):\n        a[i] = i*i - i + 1\n\n    count = 0\n\n    for i in range(1, n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                sum = a[i] + a[j] + a[k]\n                if sum % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "def bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    idx1 = planets.index(planet1)\n    idx2 = planets.index(planet2)\n    if idx1 < idx2:\n        return tuple(planets[idx1+1:idx2])\n    else:\n        return tuple(planets[idx2+1:idx1])"}
{"task_id": "HumanEval/149", "completion": "def list_sort(lst):\n    # \u5220\u9664\u5947\u6570\u957f\u5ea6\u7684\u5b57\u7b26\u4e32\n    lst = [word for word in lst if len(word) % 2 == 0]\n    # \u6309\u7167\u957f\u5ea6\u548c\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\n    lst.sort(key=lambda x: (len(x), x))\n    return lst"}
{"task_id": "HumanEval/150", "completion": "def x_or_y(n, x, y):\n    \"\"\"\u4e00\u4e2a\u7b80\u5355\u7684\u7a0b\u5e8f\uff0c\u5982\u679cn\u662f\u8d28\u6570\uff0c\u5b83\u5e94\u8be5\u8fd4\u56dex\u7684\u503c\uff0c\u5426\u5219\u5e94\u8be5\u8fd4\u56dey\u7684\u503c\u3002\n\n    Examples:\n    x_or_y(7, 34, 12) == 34\n    x_or_y(15, 8, 5) == 5\n    \"\"\"\n\n    # \u68c0\u67e5n\u662f\u5426\u662f\u8d28\u6570\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "def double_the_difference(lst):\n    square_sum = 0\n    \n    for num in lst:\n        if num > 0 and num % 2 != 0:\n            square_sum += num * num\n    \n    return square_sum"}
{"task_id": "HumanEval/152", "completion": "def compare(game, guess):\n    distances = []\n    for i in range(len(game)):\n        distances.append(abs(game[i] - guess[i]))\n    return distances"}
{"task_id": "HumanEval/153", "completion": "def Strongest_Extension(class_name, extensions):\n    max_strength = float('-inf')  # \u7528\u4e8e\u8bb0\u5f55\u6700\u5927\u5f3a\u5ea6\n    strongest_extension = \"\"  # \u7528\u4e8e\u8bb0\u5f55\u6700\u5f3a\u6269\u5c55\u7684\u540d\u79f0\n    \n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())  # \u5927\u5199\u5b57\u6bcd\u6570\u91cf\n        sm_count = sum(1 for c in extension if c.islower())  # \u5c0f\u5199\u5b57\u6bcd\u6570\u91cf\n        strength = cap_count - sm_count  # \u8ba1\u7b97\u6269\u5c55\u5f3a\u5ea6\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return class_name + \".\" + strongest_extension"}
{"task_id": "HumanEval/154", "completion": "def cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    for i in range(len(a)):\n        temp = b[i:] + b[:i]\n        if a.find(temp) != -1:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for i in range(len(num_str)):\n        if int(num_str[i]) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "def int_to_mini_roman(number):\n    roman_dict = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n    \n    if number < 1 or number > 1000:\n        raise ValueError(\"Number out of range\")\n    \n    result = \"\"\n    \n    for value in sorted(roman_dict.keys(), reverse=True):\n        while number >= value:\n            result += roman_dict[value]\n            number -= value\n    \n    return result"}
{"task_id": "HumanEval/157", "completion": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the sides of a triangle. If they form a right-angled triangle, return True, otherwise False. A right-angled triangle has one angle which is a right angle or 90 degrees.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/158", "completion": "def find_max(words):\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "def eat(number, need, remaining):\n    if remaining >= need:\n        total_eaten = number + need\n        remaining -= need\n    else:\n        total_eaten = number + remaining\n        remaining = 0\n    \n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "def do_algebra(operator, operand):\n    result = operand[0]  # \u521d\u59cb\u5316\u7ed3\u679c\u4e3a\u7b2c\u4e00\u4e2a\u64cd\u4f5c\u6570\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n    return result"}
{"task_id": "HumanEval/161", "completion": "def solve(s):\n    if not any(c.isalpha() for c in s):\n        return s[::-1]  # \u53cd\u8f6c\u5b57\u7b26\u4e32\n\n    result = ''\n    for c in s:\n        if c.isalpha():\n            if c.islower():\n                result += c.upper()  # \u5927\u5c0f\u5199\u98a0\u5012\n            else:\n                result += c.lower()\n        else:\n            result += c\n    return result"}
{"task_id": "HumanEval/162", "completion": "def string_to_md5(text):\n    if not text:\n        return None\n\n    md5_hash = md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": "def generate_integers(a, b):\n    return [x for x in range(min(a, b), max(a, b)+1) if x % 2 == 0]"}