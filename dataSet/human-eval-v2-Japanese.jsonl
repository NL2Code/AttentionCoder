{"task_id": "HumanEval/0", "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\"\u756a\u53f7\u306e\u6307\u5b9a\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u3001\u4efb\u610f\u306e2\u3064\u306e\u6570\u5b57\u304c\u4e92\u3044\u306b\u8fd1\u3044\u3067\u3059\n\u95be\u5024\u4e0e\u3048\u3089\u308c\u305f\u3002\n>>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n", "entry_point": "has_close_elements", "canonical_solution": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\n"}
{"task_id": "HumanEval/1", "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\u3053\u306e\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u3001\u8907\u6570\u306e\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u62ec\u5f27\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u542b\u3080\u6587\u5b57\u5217\u3067\u3059\u3002\u3042\u306a\u305f\u306e\u76ee\u6a19\u306f\n\u3053\u308c\u3089\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u5225\u3005\u306e\u6587\u5b57\u5217\u306b\u533a\u5207\u308a\u3001\u305d\u308c\u3089\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u72ec\u7acb\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u306f\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u304a\u308a(\u305d\u308c\u305e\u308c\u306e\u958b\u3044\u305f\u30d6\u30ec\u30fc\u30b9\u306f\u9069\u5207\u306b\u9589\u3058\u3066\u3044\u307e\u3059)\u3001\u4e92\u3044\u306b\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u307e\u305b\u3093\n\u5165\u529b\u6587\u5b57\u5217\u5185\u306e\u7a7a\u767d\u306f\u7121\u8996\u3057\u307e\u3059\u3002\n>>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n", "entry_point": "separate_paren_groups", "canonical_solution": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [\n        '(()())', '((()))', '()', '((())()())'\n    ]\n    assert candidate('() (()) ((())) (((())))') == [\n        '()', '(())', '((()))', '(((())))'\n    ]\n    assert candidate('(()(())((())))') == [\n        '(()(())((())))'\n    ]\n    assert candidate('( ) (( )) (( )( ))') == ['()', '(())', '(()())']\n"}
{"task_id": "HumanEval/2", "prompt": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\"\u6b63\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u4ee5\u4e0b\u306b\u5206\u89e3\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\u3068\u6574\u6570\u90e8(\u6700\u5927\u306e\u6574\u6570\u3088\u308a\u3082\u6307\u5b9a\u3055\u308c\u305f\u6570)\u306e\u5c0f\u6570\u70b9\u4ee5\u4e0b\u3067\u3059\n(\u6b8b\u308a\u306e\u90e8\u5206\u306f\u5e38\u306b1\u3088\u308a\u5c0f\u3055\u3044)\u3002\n\n\u6570\u5024\u306e\u5c0f\u6570\u90e8\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> truncate_number(3.5)\n    0.5\n    \"\"\"\n", "entry_point": "truncate_number", "canonical_solution": "    return number % 1.0\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3.5) == 0.5\n    assert abs(candidate(1.33) - 0.33) < 1e-6\n    assert abs(candidate(123.456) - 0.456) < 1e-6\n"}
{"task_id": "HumanEval/3", "prompt": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\u9280\u884c\u53e3\u5ea7\u3067\u306e\u5165\u51fa\u91d1\u306e\u30ea\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\n\u30bc\u30ed\u3060\u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u6b8b\u9ad8\u304c\u30bc\u30ed\u3092\u4e0b\u56de\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u3067\u3059\n\u305d\u306e\u6642\u70b9\u3067\u95a2\u6570\u306ftrue\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306ffalse\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n", "entry_point": "below_zero", "canonical_solution": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == False\n    assert candidate([1, 2, -3, 1, 2, -3]) == False\n    assert candidate([1, 2, -4, 5, 6]) == True\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -4]) == False\n    assert candidate([1, -1, 2, -2, 5, -5, 4, -5]) == True\n    assert candidate([1, -2, 2, -2, 5, -5, 4, -4]) == True\n"}
{"task_id": "HumanEval/4", "prompt": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\u5165\u529b\u6570\u306e\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u3001\u5e73\u5747\u7d76\u5bfe\u504f\u5dee\u3092\u8a08\u7b97\u3057\u307e\u3059\n\u3053\u306e\u30c7\u30fc\u30bf\u306e\u5e73\u5747\u5024\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u5e73\u5747\u7d76\u5bfe\u504f\u5dee\u306f\u3001\u305d\u308c\u305e\u308c\u306e\u9593\u306e\u5e73\u5747\u7d76\u5bfe\u5dee\u3067\u3059\n\u8981\u7d20\u3068\u4e2d\u5fc3\u70b9(\u3053\u306e\u5834\u5408\u306e\u5e73\u5747):\n\u72c2=\u5e73\u5747| x x_mean |\n>>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "entry_point": "mean_absolute_deviation", "canonical_solution": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert abs(candidate([1.0, 2.0, 3.0]) - 2.0/3.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n    assert abs(candidate([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0/5.0) < 1e-6\n\n"}
{"task_id": "HumanEval/5", "prompt": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\u5165\u529b\u30ea\u30b9\u30c8' numbers'\u306e\u9023\u7d9a\u3059\u308b2\u3064\u306e\u8981\u7d20\u306e\u9593\u306b\u6570\u5024'delimeter'\u3092\u633f\u5165\u3059\u308b\u3002\n>>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n", "entry_point": "intersperse", "canonical_solution": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 7) == []\n    assert candidate([5, 6, 3, 2], 8) == [5, 8, 6, 8, 3, 8, 2]\n    assert candidate([2, 2, 2], 2) == [2, 2, 2, 2, 2]\n"}
{"task_id": "HumanEval/6", "prompt": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\u3053\u306e\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u3001\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305f\u5165\u308c\u5b50\u306e\u62ec\u5f27\u306e\u8907\u6570\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n\u5404\u30b0\u30eb\u30fc\u30d7\u306b\u3064\u3044\u3066\u3001\u62ec\u5f27\u306e\u5165\u308c\u5b50\u306e\u6700\u3082\u6df1\u3044\u30ec\u30d9\u30eb\u3092\u51fa\u529b\u3059\u308b\u3002\nE.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n", "entry_point": "parse_nested_parens", "canonical_solution": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n"}
{"task_id": "HumanEval/7", "prompt": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u90e8\u5206\u6587\u5b57\u5217\u3092\u542b\u3080\u6587\u5b57\u5217\u306e\u307f\u306e\u5165\u529b\u30ea\u30b9\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\n>>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n", "entry_point": "filter_by_substring", "canonical_solution": "    return [x for x in strings if substring in x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n"}
{"task_id": "HumanEval/8", "prompt": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u3001\u30ea\u30b9\u30c8\u5185\u306e\u3059\u3079\u3066\u306e\u6574\u6570\u306e\u548c\u3068\u7a4d\u304b\u3089\u306a\u308b\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u7a7a\u548c\u306f0\u306b\u7b49\u3057\u304f\u3001\u7a7a\u7a4d\u306f1\u306b\u7b49\u3057\u304f\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n>>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n", "entry_point": "sum_product", "canonical_solution": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (3 + 5 + 7, 3 * 5 * 7)\n    assert candidate([10]) == (10, 10)\n"}
{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u4e0e\u3048\u3089\u308c\u305f\u77ac\u9593\u307e\u3067\u306e\u6700\u5927\u8ee2\u304c\u308a\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\n\u308c\u305f\u306f\u305a\u3088\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "entry_point": "rolling_max", "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"}
{"task_id": "HumanEval/10", "prompt": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u304c\u30d1\u30ea\u30f3\u30c9\u30ed\u30fc\u30e0\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u306e\u30c6\u30b9\u30c8\"\"\n\u623b\u308a\u5024string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n\"\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u3067\u59cb\u307e\u308b\u6700\u3082\u77ed\u3044\u56de\u6587\u3092\u898b\u3064\u3051\u308b\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u30a2\u30a4\u30c7\u30a2\u306f\u7c21\u5358\u3067\u3059\n-\u56de\u6587\u3067\u3042\u308b\u3001\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u6700\u9577\u306e\u5f8c\u7f6e\u3092\u6c42\u3081\u308b\u3002\n-\u56de\u6587\u63a5\u5c3e\u8f9e\u306e\u524d\u306b\u6765\u308b\u6587\u5b57\u5217\u63a5\u982d\u8f9e\u306e\u6587\u5b57\u5217\u306e\u9006\u3092\u6587\u5b57\u5217\u306e\u6700\u5f8c\u306b\u8ffd\u52a0\u3059\u308b\u3002\n>>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n", "entry_point": "make_palindrome", "canonical_solution": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('x') == 'x'\n    assert candidate('xyz') == 'xyzyx'\n    assert candidate('xyx') == 'xyx'\n    assert candidate('jerry') == 'jerryrrej'\n"}
{"task_id": "HumanEval/11", "prompt": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\u5165\u529b\u306f1\u30680\u306e\u307f\u304b\u3089\u306a\u308b2\u3064\u306e\u6587\u5b57\u5217a\u3068b\u3067\u3059\u3002\n\u3053\u308c\u3089\u306e\u5165\u529b\u306b\u5bfe\u3057\u3066\u30d0\u30a4\u30ca\u30eaxor\u3092\u5b9f\u884c\u3057\u3001\u7d50\u679c\u3082\u6587\u5b57\u5217\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n>>> string_xor('010', '110')\n    '100'\n    \"\"\"\n", "entry_point": "string_xor", "canonical_solution": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('111000', '101010') == '010010'\n    assert candidate('1', '1') == '0'\n    assert candidate('0101', '0000') == '0101'\n"}
{"task_id": "HumanEval/12", "prompt": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u306e\u3046\u3061\u3001\u6700\u9577\u306e\u3082\u306e\u3092\u8fd4\u3059\u3002\u8907\u6570\u306e\u5834\u5408\u306f\u6700\u521d\u306e\u3082\u306e\u3092\u8fd4\u3059\n\u540c\u3058\u9577\u3055\u306e\u5f26\u3002\u5165\u529b\u30ea\u30b9\u30c8\u304c\u7a7a\u306e\u5834\u5408\u306fnone\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n", "entry_point": "longest", "canonical_solution": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n"}
{"task_id": "HumanEval/13", "prompt": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"2\u3064\u306e\u6574\u6570a, b\u306e\u6700\u5927\u516c\u7d04\u6570\u3092\u8fd4\u3059\n>>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n", "entry_point": "greatest_common_divisor", "canonical_solution": "    while b:\n        a, b = b, a % b\n    return a\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3, 7) == 1\n    assert candidate(10, 15) == 5\n    assert candidate(49, 14) == 7\n    assert candidate(144, 60) == 12\n"}
{"task_id": "HumanEval/14", "prompt": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\u623b\u308a\u5024\u5165\u529b\u6587\u5b57\u5217\u306e\u4e2d\u3067\u6700\u3082\u77ed\u3044\u3082\u306e\u304b\u3089\u6700\u9577\u306e\u3082\u306e\u307e\u3067\u306e\u3059\u3079\u3066\u306e\u63a5\u982d\u8f9e\u306e\u30ea\u30b9\u30c8\n>>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "entry_point": "all_prefixes", "canonical_solution": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n"}
{"task_id": "HumanEval/15", "prompt": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\"\u623b\u308a\u50240\u304b\u3089n\u307e\u3067\u306e\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305f\u6570\u5024\u3092\u542b\u3080\u6587\u5b57\u5217\u3002\n>>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n", "entry_point": "string_sequence", "canonical_solution": "    return ' '.join([str(x) for x in range(n + 1)])\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(0) == '0'\n    assert candidate(3) == '0 1 2 3'\n    assert candidate(10) == '0 1 2 3 4 5 6 7 8 9 10'\n"}
{"task_id": "HumanEval/16", "prompt": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\"\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u305d\u308c\u304c(\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u554f\u308f\u305a)\u3044\u304f\u3064\u306e\u7570\u306a\u308b\u6587\u5b57\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u307e\u3059\n>>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n", "entry_point": "count_distinct_characters", "canonical_solution": "    return len(set(string.lower()))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde') == 5\n    assert candidate('abcde' + 'cade' + 'CADE') == 5\n    assert candidate('aaaaAAAAaaaa') == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n"}
{"task_id": "HumanEval/17", "prompt": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\u3053\u306e\u95a2\u6570\u3078\u306e\u5165\u529b\u306f\u3001\u97f3\u7b26\u3092\u7279\u6b8a\u306aascii\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u8868\u3059\u6587\u5b57\u5217\u3067\u3059\u3002\n\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u3053\u306e\u6587\u5b57\u5217\u3092\u89e3\u6790\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u62cd\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3053\u3068\u3067\u3059\n\u7d9a\u304b\u306a\u3044\n\n\u3042\u308b\u4f1d\u8aac\u304c\u3042\u308a\u307e\u3059\n\u300co\u300d-\u5168\u97f3\u7b26\u30014\u62cd\u7d9a\u304f\n\u300co |\u300d-\u4e8c\u5206\u304a\u3093\u30772\u62cd\u306e\u7d9a\u304f\u306f\u300c\n\u3002|\u300c\u304a\u524d\u306equater\u6ce8\u3092\u8aa4\u89e3\u7d9a\u304f\u3066\u306f\u9ad8\u9cf4\u308a\n\n>>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n", "entry_point": "parse_music", "canonical_solution": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('o o o o') == [4, 4, 4, 4]\n    assert candidate('.| .| .| .|') == [1, 1, 1, 1]\n    assert candidate('o| o| .| .| o o o o') == [2, 2, 1, 1, 4, 4, 4, 4]\n    assert candidate('o| .| o| .| o o| o o|') == [2, 1, 2, 1, 4, 2, 4, 2]\n"}
{"task_id": "HumanEval/18", "prompt": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u90e8\u5206\u6587\u5b57\u5217\u304c\u5143\u306e\u6587\u5b57\u5217\u306e\u4e2d\u306b\u4f55\u56de\u898b\u3064\u304b\u308b\u304b\u3092\u63a2\u3057\u307e\u3059\u3002overlaping\u4ef6\u6570\u3048\u308d\n>>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n", "entry_point": "how_many_times", "canonical_solution": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx', 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john doe', 'john') == 1\n"}
{"task_id": "HumanEval/19", "prompt": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\u5165\u529b\u306f\u3001\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f0\u304b\u30899\u307e\u3067\u306e\u6570\u5b57\u306e\u6587\u5b57\u5217\u3067\u3059\u3002\n\u6709\u52b9\u306a\u9078\u629e\u80a2\u306f\u300c0\u300d\u3001\u300c1\u300d\u3001\u300c2\u300d\u3001\u300c3\u300d\u3001\u300c4\u300d\u3001\u300c5\u300d\u3001\u300c6\u300d\u3001\u300c7\u300d\u3001\u300c8\u300d\u3001\u300c9\u300d\u3067\u3042\u308b\u3002\n\u6700\u5c0f\u304b\u3089\u6700\u5927\u307e\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u6570\u5024\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\n>>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n", "entry_point": "sort_numbers", "canonical_solution": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('three') == 'three'\n    assert candidate('three five nine') == 'three five nine'\n    assert candidate('five zero four seven nine eight') == 'zero four five seven eight nine'\n    assert candidate('six five four three two one zero') == 'zero one two three four five six'\n"}
{"task_id": "HumanEval/20", "prompt": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f(\u9577\u3055\u304c2\u4ee5\u4e0a\u306e)\u6570\u5024\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u305d\u308c\u305e\u308c\u306b\u6700\u3082\u8fd1\u30442\u3064\u3092\u9078\u629e\u3057\u3066\u8fd4\u3057\u307e\u3059\n\u305d\u306e\u4ed6\u306e\u3082\u306e\u306f\u9806\u756a\u306b\u8fd4\u3057\u307e\u3059(\u5c0f\u3055\u3044\u6570\u5b57\u3001\u5927\u304d\u3044\u6570\u5b57)\u3002\n>>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n", "entry_point": "find_closest_elements", "canonical_solution": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\n"}
{"task_id": "HumanEval/21", "prompt": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"(\u5c11\u306a\u304f\u3068\u30822\u3064\u306e\u8981\u7d20\u304b\u3089\u306a\u308b)\u6570\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u305d\u306e\u30ea\u30b9\u30c8\u306b\u7dda\u5f62\u5909\u63db\u3092\u9069\u7528\u3059\u308b\u3002\n\u6700\u5c0f\u306e\u6570\u304c0\u306b\u306a\u308a\u3001\u6700\u5927\u306e\u6570\u304c1\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\n>>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n", "entry_point": "rescale_to_unit", "canonical_solution": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([2.0, 49.9]) == [0.0, 1.0]\n    assert candidate([100.0, 49.9]) == [1.0, 0.0]\n    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0]\n    assert candidate([2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n    assert candidate([12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75]\n"}
{"task_id": "HumanEval/22", "prompt": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305fpython\u5024\u306e\u30ea\u30b9\u30c8\u3092\u6574\u6570\u306b\u5bfe\u3057\u3066\u306e\u307f\u30d5\u30a3\u30eb\u30bf\u3059\u308b\n>>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n", "entry_point": "filter_integers", "canonical_solution": "    return [x for x in values if isinstance(x, int)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([4, {}, [], 23.2, 9, 'adasd']) == [4, 9]\n    assert candidate([3, 'c', 3, 3, 'a', 'b']) == [3, 3, 3]\n"}
{"task_id": "HumanEval/23", "prompt": "\n\ndef strlen(string: str) -> int:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u9577\u3055\u3092\u8fd4\u3057\u307e\u3059\n>>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "entry_point": "strlen", "canonical_solution": "    return len(string)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == 0\n    assert candidate('x') == 1\n    assert candidate('asdasnakj') == 9\n"}
{"task_id": "HumanEval/24", "prompt": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6570n\u306b\u5bfe\u3057\u3066\u3001n\u3092\u7b49\u5206\u3059\u308bn\u3088\u308a\u5c0f\u3055\u3044\u6700\u5927\u306e\u6570\u3092\u6c42\u3081\u308b\n>>> largest_divisor(15)\n    5\n    \"\"\"\n", "entry_point": "largest_divisor", "canonical_solution": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(3) == 1\n    assert candidate(7) == 1\n    assert candidate(10) == 5\n    assert candidate(100) == 50\n    assert candidate(49) == 7\n"}
{"task_id": "HumanEval/25", "prompt": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\u623b\u308a\u5024\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u7d20\u56e0\u6570\u306e\u30ea\u30b9\u30c8\u3002\n\u5404\u56e0\u5b50\u306f\u3001\u56e0\u6570\u5206\u89e3\u3067\u51fa\u73fe\u3057\u305f\u56de\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u56de\u6570\u3092\u8a18\u8f09\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5165\u529b\u6570\u306f\u3001\u3059\u3079\u3066\u306e\u8981\u56e0\u306e\u7a4d\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n>>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n", "entry_point": "factorize", "canonical_solution": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4) == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(3 * 19) == [3, 19]\n    assert candidate(3 * 19 * 3 * 19) == [3, 3, 19, 19]\n    assert candidate(3 * 19 * 3 * 19 * 3 * 19) == [3, 3, 3, 19, 19, 19]\n    assert candidate(3 * 19 * 19 * 19) == [3, 19, 19, 19]\n    assert candidate(3 * 2 * 3) == [2, 3, 3]\n"}
{"task_id": "HumanEval/26", "prompt": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\u6574\u6570\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u8907\u6570\u56de\u767a\u751f\u3059\u308b\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\u8981\u7d20\u306e\u9806\u756a\u306f\u5165\u529b\u3068\u540c\u3058\u306b\u3057\u307e\u3059\u3002\n>>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n", "entry_point": "remove_duplicates", "canonical_solution": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5]\n"}
{"task_id": "HumanEval/27", "prompt": "\n\ndef flip_case(string: str) -> str:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u3001\u5c0f\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u3001\u5927\u6587\u5b57\u3092\u5c0f\u6587\u5b57\u306b\u53cd\u8ee2\u3057\u307e\u3059\u3002\n>>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n", "entry_point": "flip_case", "canonical_solution": "    return string.swapcase()\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate('Hello!') == 'hELLO!'\n    assert candidate('These violent delights have violent ends') == 'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n"}
{"task_id": "HumanEval/28", "prompt": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\"\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u30921\u3064\u306e\u6587\u5b57\u5217\u306b\u9023\u7d50\u3057\u307e\u3059\n>>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n", "entry_point": "concatenate", "canonical_solution": "    return ''.join(strings)\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == ''\n    assert candidate(['x', 'y', 'z']) == 'xyz'\n    assert candidate(['x', 'y', 'z', 'w', 'k']) == 'xyzwk'\n"}
{"task_id": "HumanEval/29", "prompt": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u63a5\u982d\u8f9e\u3067\u59cb\u307e\u308b\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066\u306e\u307f\u3001\u5165\u529b\u30ea\u30b9\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u3002\n>>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n", "entry_point": "filter_by_prefix", "canonical_solution": "    return [x for x in strings if x.startswith(prefix)]\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n"}
{"task_id": "HumanEval/30", "prompt": "\n\ndef get_positive(l: list):\n    \"\"\"\u30ea\u30b9\u30c8\u5185\u306e\u6b63\u306e\u6570\u306e\u307f\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n", "entry_point": "get_positive", "canonical_solution": "    return [e for e in l if e > 0]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([-1, -2, 4, 5, 6]) == [4, 5, 6]\n    assert candidate([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10]) == [5, 3, 2, 3, 3, 9, 123, 1]\n    assert candidate([-1, -2]) == []\n    assert candidate([]) == []\n\n"}
{"task_id": "HumanEval/31", "prompt": "\n\ndef is_prime(n):\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6570\u304c\u7d20\u6570\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n", "entry_point": "is_prime", "canonical_solution": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n    assert candidate(5 * 17) == False\n    assert candidate(11 * 7) == False\n    assert candidate(13441 * 19) == False\n\n"}
{"task_id": "HumanEval/32", "prompt": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n\u70b9x\u306b\u304a\u3051\u308b\u4fc2\u6570xs\u3092\u6301\u3064\u591a\u9805\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u3002\n\u623b\u308a\u5024xs[0] + xs[1] * x + xs[1] * x^2 +\u2026[n] k * x ^\u30b8\u30a7\u30b9\u30fb\u30b7\u30e3\u30c8\u30ad\u30f3\u30cb\u30e5\u30fc\u30e8\u30fc\u30afn\n\u300e\u9f3b\u884c\u985e\n\u623b\u308a\u5024sum([coeff * math\u3002pow(x, i) for i, coeff in enumerate(xs)]\n\n\n\u3088\u3053\u305bfind_zero(\u30b8\u30a7\u30b9\u30fb\u30b7\u30e3\u30c8\u30ad\u30f3\u30cb\u30e5\u30fc\u30e8\u30fc\u30af:\u30ea\u30b9\u30c8)\n\"\"\" xs\u306f\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u3067\u3042\u308b\u3002\nfind_zero poly(x) = 0\u3068\u306a\u308bx\u3092\u6c42\u3081\u308b\u3002\nfind_zero\u306f\u3001\u6570\u304c\u591a\u304f\u3066\u30820\u70b9\u306e\u307f\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001find_zero\u306f\u3001\u5076\u6570\u500b\u306e\u4fc2\u6570\u3092\u6709\u3059\u308b\u30ea\u30b9\u30c8xs\u306e\u307f\u3092\u53d6\u308b\n\u305d\u308c\u304c\u4fdd\u8a3c\u3059\u308b\u6700\u5927\u306e\u975e\u30bc\u30ed\u4fc2\u6570\u3067\u3059\n\u89e3\u6c7a\u6cd5\u3067\u3042\u308b\u300d\n>>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n", "entry_point": "find_zero", "canonical_solution": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import math\n    import random\n    rng = random.Random(42)\n    import copy\n    for _ in range(100):\n        ncoeff = 2 * rng.randint(1, 4)\n        coeffs = []\n        for _ in range(ncoeff):\n            coeff = rng.randint(-10, 10)\n            if coeff == 0:\n                coeff = 1\n            coeffs.append(coeff)\n        solution = candidate(copy.deepcopy(coeffs))\n        assert math.fabs(poly(coeffs, solution)) < 1e-4\n\n"}
{"task_id": "HumanEval/33", "prompt": "\n\ndef sort_third(l: list):\n    \"\"\"\u3053\u306e\u95a2\u6570\u306f\u30ea\u30b9\u30c8l\u3092\u53d6\u308a\u3001\u305d\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8l'\u3092\u8fd4\u3057\u307e\u3059\nl'\u306f3\u3067\u5272\u308a\u5207\u308c\u306a\u3044\u6307\u6a19\u306b\u304a\u3051\u308bl'\u3068\u540c\u3058\u3067\u3042\u308b\u304c\u30013\u3067\u5272\u308a\u5207\u308c\u306a\u3044\u6307\u6a19\u306b\u304a\u3051\u308bl'\u306e\u5024\u306f\u7b49\u3057\u3044\nl\u306e\u5bfe\u5fdc\u3059\u308b\u6307\u6a19\u306e\u5024\u306b\u3001\u3057\u304b\u3057\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n>>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n", "entry_point": "sort_third", "canonical_solution": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple(sort_third([1, 2, 3]))\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple(sort_third([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple(sort_third([5, 8, -12, 4, 23, 2, 3, 11, 12, -10]))\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2])) == tuple([2, 6, 3, 4, 8, 9, 5])\n    assert tuple(candidate([5, 8, 3, 4, 6, 9, 2])) == tuple([2, 8, 3, 4, 6, 9, 5])\n    assert tuple(candidate([5, 6, 9, 4, 8, 3, 2])) == tuple([2, 6, 9, 4, 8, 3, 5])\n    assert tuple(candidate([5, 6, 3, 4, 8, 9, 2, 1])) == tuple([2, 6, 3, 4, 8, 9, 5, 1])\n\n"}
{"task_id": "HumanEval/34", "prompt": "\n\ndef unique(l: list):\n    \"\"\"\u623b\u308a\u5024\u30ea\u30b9\u30c8\u5185\u306e\u4e00\u610f\u306a\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3057\u307e\u3059\n>>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n", "entry_point": "unique", "canonical_solution": "    return sorted(list(set(l)))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\n"}
{"task_id": "HumanEval/35", "prompt": "\n\ndef max_element(l: list):\n    \"\"\"\u30ea\u30b9\u30c8\u5185\u306e\u6700\u5927\u8981\u7d20\u3092\u8fd4\u3059\u3002\n>>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n", "entry_point": "max_element", "canonical_solution": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3]) == 3\n    assert candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) == 124\n"}
{"task_id": "HumanEval/36", "prompt": "\n\ndef fizz_buzz(n: int):\n    \"\"\"return n\u672a\u6e80\u306e\u6574\u6570\u306711\u307e\u305f\u306f13\u3067\u5272\u308a\u5207\u308c\u308b\u6570\u5b577\u306e\u51fa\u73fe\u56de\u6570\u3002\n>>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n", "entry_point": "fizz_buzz", "canonical_solution": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(50) == 0\n    assert candidate(78) == 2\n    assert candidate(79) == 3\n    assert candidate(100) == 3\n    assert candidate(200) == 6\n    assert candidate(4000) == 192\n    assert candidate(10000) == 639\n    assert candidate(100000) == 8026\n\n"}
{"task_id": "HumanEval/37", "prompt": "\n\ndef sort_even(l: list):\n    \"\"\"\u3053\u306e\u95a2\u6570\u306f\u30ea\u30b9\u30c8l\u3092\u53d6\u308a\u3001\u305d\u306e\u3088\u3046\u306a\u30ea\u30b9\u30c8l'\u3092\u8fd4\u3057\u307e\u3059\nl'\u306f\u5947\u6570\u306e\u6307\u6a19\u3067\u306fl\u3068\u540c\u4e00\u3067\u3042\u308b\u304c\u3001\u5076\u6570\u306e\u6307\u6a19\u3067\u306fl'\u306e\u5024\u306f\u7b49\u3057\u3044\nl\u306e\u5076\u6570\u306e\u6307\u6a19\u306e\u5024\u306b\u306f\u3001\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n>>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n", "entry_point": "sort_even", "canonical_solution": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert tuple(candidate([1, 2, 3])) == tuple([1, 2, 3])\n    assert tuple(candidate([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) == tuple([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123])\n    assert tuple(candidate([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) == tuple([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10])\n\n"}
{"task_id": "HumanEval/38", "prompt": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n3\u6587\u5b57\u306e\u30b0\u30eb\u30fc\u30d7\u3092\u5faa\u74b0\u3055\u305b\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u300e\u9f3b\u884c\u985e\n#\u6587\u5b57\u5217\u3092\u30b0\u30eb\u30fc\u30d7\u306b\u5206\u5272\u3059\u308b\u3002\u9577\u3055\u306f\u305d\u308c\u305e\u308c3\u3002\n\u56e3\u4f53=[\u79d2[(3 * i): min((3\u00d7i + 3)\u30ec\u30f3(s)] i\u7bc4\u56f2\u5185\u3067((\u30ec\u30f3(s) + 2) / / 3)]\n#\u5404\u30b0\u30eb\u30fc\u30d7\u306e\u30b5\u30a4\u30af\u30eb\u8981\u7d20\u3002\u305f\u3060\u3057\u3001\u7fa4\u306e\u5143\u6570\u304c3\u3088\u308a\u5c11\u306a\u3044\u5834\u5408\u306f\u9664\u304d\u307e\u3059\u3002\ngroup = [(group[1:] + group[0]) if len(group) == 3 else group for group in group]\n\u5fa9\u5e30\u300d\u300c.join(\u56e3\u4f53)\n\n\n\u3088\u3053\u305bdecode_cyclic (s: str)\n\u300e\u9f3b\u884c\u985e\nencode_cyclic\u95a2\u6570\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u307e\u3059\u3002\u5fa9\u53f7\u5f26\u623b\u308b\u3002\n\"\"\"\n", "entry_point": "decode_cyclic", "canonical_solution": "    return encode_cyclic(encode_cyclic(s))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_cyclic(str)\n        assert candidate(encoded_str) == str\n\n"}
{"task_id": "HumanEval/39", "prompt": "\n\ndef prime_fib(n: int):\n    \"\"\"\nprime_fib\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306en\u756a\u76ee\u306e\u7d20\u6570\u3092\u8fd4\u3059\u3002\n>>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n", "entry_point": "prime_fib", "canonical_solution": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 2\n    assert candidate(2) == 3\n    assert candidate(3) == 5\n    assert candidate(4) == 13\n    assert candidate(5) == 89\n    assert candidate(6) == 233\n    assert candidate(7) == 1597\n    assert candidate(8) == 28657\n    assert candidate(9) == 514229\n    assert candidate(10) == 433494437\n\n"}
{"task_id": "HumanEval/40", "prompt": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\ntripless _sum_to_zero\u306f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u5185\u306b3\u3064\u306e\u7570\u306a\u308b\u8981\u7d20\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\n\u548c\u306f0\u306b\u306a\u308a\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306ffalse\u306b\u306a\u308a\u307e\u3059\u3002\n\n>>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n", "entry_point": "triples_sum_to_zero", "canonical_solution": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, 5, -1]) == False\n    assert candidate([1, 3, -2, 1]) == True\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([1, 2, 5, 7]) == False\n    assert candidate([2, 4, -5, 3, 9, 7]) == True\n    assert candidate([1]) == False\n    assert candidate([1, 3, 5, -100]) == False\n    assert candidate([100, 3, 5, -100]) == False\n\n"}
{"task_id": "HumanEval/41", "prompt": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n\u60f3\u50cf\u9053\u305d\u3046\u3044\u3064\u307e\u3067\u3082\u771f\u3063\u3059\u3050\u306a\u5b8c\u74a7\u306a\u7121\u9650\u7dda\u3002\nn\u53f0\u306e\u8eca\u304c\u5de6\u304b\u3089\u53f3\u306b\u8d70\u3063\u3066\u3044\u307e\u3059\u540c\u6642\u306b\u3001n\u8eca\u306e\u7570\u306a\u308b\u30bb\u30c3\u30c8\n\u53f3\u304b\u3089\u5de6\u306b\u8d70\u3063\u3066\u3044\u307e\u30592\u53f0\u306e\u8eca\u306f\u975e\u5e38\u306b\u9060\u304f\u304b\u3089\u51fa\u767a\u3057\u307e\u3059\n\u5408\u3063\u3066\u3044\u308b\u3002\u3059\u3079\u3066\u306e\u8eca\u306f\u540c\u3058\u901f\u5ea6\u3067\u79fb\u52d5\u3057\u307e\u3059\u30022\u53f0\u306e\u8eca\u304c\u885d\u7a81\u3057\u305f\u3068\u3044\u3046\n\u8eca\u306e\u611f\u52d5\u7684\u306a\u5de6\u304b\u3089\u53f3\u304c\u53f3\u5b89\u6253\u3067\u8eca\u304c\u52d5\u3044\u3066\u5de6\u306b\u5411\u304b\u3063\u3066\u3044\u307e\u3059\n\u3057\u304b\u3057\u3001\u8eca\u306f\u7121\u9650\u306b\u9811\u4e08\u3067\u5f37\u3044\u3067\u3059;\u305d\u306e\u5f8c\u3082\u6d3b\u52d5\u3092\u7d9a\u3051\u3066\u3044\u308b\n\u885d\u7a81\u3057\u306a\u304b\u3063\u305f\u304b\u306e\u3088\u3046\u306b\u52d5\u3044\u3066\u3044\u307e\u3059\n\n\u3053\u306e\u6a5f\u80fd\u306f\u3001\u3053\u306e\u3088\u3046\u306a\u885d\u7a81\u306e\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\"\"\"\n", "entry_point": "car_race_collision", "canonical_solution": "    return n**2\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 4\n    assert candidate(3) == 9\n    assert candidate(4) == 16\n    assert candidate(8) == 64\n    assert candidate(10) == 100\n\n"}
{"task_id": "HumanEval/42", "prompt": "\n\ndef incr_list(l: list):\n    \"\"\"\u623b\u308a\u8981\u7d20\u30921\u305a\u3064\u5897\u3084\u3057\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n>>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n", "entry_point": "incr_list", "canonical_solution": "    return [(e + 1) for e in l]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([3, 2, 1]) == [4, 3, 2]\n    assert candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n\n"}
{"task_id": "HumanEval/43", "prompt": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\npairs_sum_to_zero\u306f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u5185\u306b2\u3064\u306e\u7570\u306a\u308b\u8981\u7d20\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\n\u548c\u306f0\u306b\u306a\u308a\u3001\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306ffalse\u306b\u306a\u308a\u307e\u3059\u3002\n>>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n", "entry_point": "pairs_sum_to_zero", "canonical_solution": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 3, 5, 0]) == False\n    assert candidate([1, 3, -2, 1]) == False\n    assert candidate([1, 2, 3, 7]) == False\n    assert candidate([2, 4, -5, 3, 5, 7]) == True\n    assert candidate([1]) == False\n\n    assert candidate([-3, 9, -1, 3, 2, 30]) == True\n    assert candidate([-3, 9, -1, 3, 2, 31]) == True\n    assert candidate([-3, 9, -1, 4, 2, 30]) == False\n    assert candidate([-3, 9, -1, 4, 2, 31]) == False\n\n"}
{"task_id": "HumanEval/44", "prompt": "\n\ndef change_base(x: int, base: int):\n    \"\"\"\u5165\u529b\u6570x\u306e\u57fa\u6570\u3092\u57fa\u6570\u306b\u5909\u66f4\u3002\n\u5909\u63db\u5f8c\u306e\u6587\u5b57\u5217\u8868\u73fe\u3092\u8fd4\u3059\u3002\n\u57fa\u672c\u6570\u306f10\u672a\u6e80\u3067\u3059\u3002\n>>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n", "entry_point": "change_base", "canonical_solution": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(8, 3) == \"22\"\n    assert candidate(9, 3) == \"100\"\n    assert candidate(234, 2) == \"11101010\"\n    assert candidate(16, 2) == \"10000\"\n    assert candidate(8, 2) == \"1000\"\n    assert candidate(7, 2) == \"111\"\n    for x in range(2, 8):\n        assert candidate(x, x + 1) == str(x)\n\n"}
{"task_id": "HumanEval/45", "prompt": "\n\ndef triangle_area(a, h):\n    \"\"\"\u4e09\u89d2\u5f62\u306e\u8fba\u3068\u9ad8\u30ea\u30bf\u30fc\u30f3\u9818\u57df\u306e\u9577\u3055\u3092\u4e0e\u3048\u3089\u308c\u307e\u3057\u305f\u3002\n>>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n", "entry_point": "triangle_area", "canonical_solution": "    return a * h / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5, 3) == 7.5\n    assert candidate(2, 2) == 2.0\n    assert candidate(10, 8) == 40.0\n\n"}
{"task_id": "HumanEval/46", "prompt": "\n\ndef fib4(n: int):\n    \"\"\"fib4\u6570\u5217\u306f\u3001fibbonacci sequnece\u306b\u4f3c\u305f\u6570\u5217\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nfib4(0)\u21920\nfib4 (1) - > 0\nfib4(2)\u21922\nfib4\u3086\u304f(3)- > 0\nfib4 (n)\u2192fib4 (n-1\u3050\u3089\u3093\u3077\u308a)+ fib4 (n-2) + fib4 (n-3) + fib4 (n-4)\u3002\nfib4\u6570\u5217\u306en\u756a\u76ee\u306e\u8981\u7d20\u3092\u52b9\u7387\u3088\u304f\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\u518d\u5e30\u3092\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n>>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n", "entry_point": "fib4", "canonical_solution": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(5) == 4\n    assert candidate(8) == 28\n    assert candidate(10) == 104\n    assert candidate(12) == 386\n\n"}
{"task_id": "HumanEval/47", "prompt": "\n\ndef median(l: list):\n    \"\"\"\u30ea\u30b9\u30c8\u4e2d\u306e\u8981\u7d20\u306e\u4e2d\u592e\u5024\u3092\u8fd4\u3059l\u3002\n>>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n", "entry_point": "median", "canonical_solution": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == 3\n    assert candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n    assert candidate([5]) == 5\n    assert candidate([6, 5]) == 5.5\n    assert candidate([8, 1, 3, 9, 9, 2, 7]) == 7 \n\n"}
{"task_id": "HumanEval/48", "prompt": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u304c\u56de\u6587\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\n>>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n", "entry_point": "is_palindrome", "canonical_solution": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx') == False\n\n"}
{"task_id": "HumanEval/49", "prompt": "\n\ndef modp(n: int, p: int):\n    \"\"\"return 2^n modulo p(\u6570\u5024\u306b\u6ce8\u610f)\u3002\n>>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n", "entry_point": "modp", "canonical_solution": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n"}
{"task_id": "HumanEval/50", "prompt": "\n\ndef encode_shift(s: str):\n    \"\"\"\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u5185\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u30925\u3067\u30b7\u30d5\u30c8\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u300e\u9f3b\u884c\u985e\n\u5fa9\u5e30\u300d\u300c.join _([\u4eba\u6a29((\u6570\u30ad\u30ed(ch) + 5 -\u6570\u30ad\u30ed(\u300ca\u300d)% 26)+\u6570\u30ad\u30ed(\u300ca\u300d))s\u306ech))\n\n\n\u3088\u3053\u305bdecode_shift (s: str)\n\u300e\u9f3b\u884c\u985e\nencode_shift\u95a2\u6570\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3057\u3066\u53d6\u308a\u307e\u3059\u3002\u5fa9\u53f7\u5f26\u623b\u308b\u3002\n\"\"\"\n", "entry_point": "decode_shift", "canonical_solution": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    from random import randint, choice\n    import copy\n    import string\n\n    letters = string.ascii_lowercase\n    for _ in range(100):\n        str = ''.join(choice(letters) for i in range(randint(10, 20)))\n        encoded_str = encode_shift(str)\n        assert candidate(copy.deepcopy(encoded_str)) == str\n\n"}
{"task_id": "HumanEval/51", "prompt": "\n\ndef remove_vowels(text):\n    \"\"\"\nremove_vowels\u306f\u6587\u5b57\u5217\u3092\u53d6\u308a\u3001\u6bcd\u97f3\u306e\u306a\u3044\u6587\u5b57\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3067\u3059\u3002\n>>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n", "entry_point": "remove_vowels", "canonical_solution": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('') == ''\n    assert candidate(\"abcdef\\nghijklm\") == 'bcdf\\nghjklm'\n    assert candidate('fedcba') == 'fdcb'\n    assert candidate('eeeee') == ''\n    assert candidate('acBAA') == 'cB'\n    assert candidate('EcBOO') == 'cB'\n    assert candidate('ybcd') == 'ybcd'\n\n"}
{"task_id": "HumanEval/52", "prompt": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"\u30ea\u30b9\u30c8l\u306e\u3059\u3079\u3066\u306e\u6570\u5024\u304c\u3057\u304d\u3044\u5024t\u3088\u308a\u5c0f\u3055\u3044\u5834\u5408\u306btrue\u3092\u8fd4\u3059\u3002\n>>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n", "entry_point": "below_threshold", "canonical_solution": "    for e in l:\n        if e >= t:\n            return False\n    return True\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10], 100)\n    assert not candidate([1, 20, 4, 10], 5)\n    assert candidate([1, 20, 4, 10], 21)\n    assert candidate([1, 20, 4, 10], 22)\n    assert candidate([1, 8, 4, 10], 11)\n    assert not candidate([1, 8, 4, 10], 10)\n\n"}
{"task_id": "HumanEval/53", "prompt": "\n\ndef add(x: int, y: int):\n    \"\"\"2\u3064\u306e\u6570\u5b57x\u3068y\u3092\u52a0\u3048\u307e\u3059\n>>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n", "entry_point": "add", "canonical_solution": "    return x + y\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    import random\n\n    assert candidate(0, 1) == 1\n    assert candidate(1, 0) == 1\n    assert candidate(2, 3) == 5\n    assert candidate(5, 7) == 12\n    assert candidate(7, 5) == 12\n\n    for i in range(100):\n        x, y = random.randint(0, 1000), random.randint(0, 1000)\n        assert candidate(x, y) == x + y\n\n"}
{"task_id": "HumanEval/54", "prompt": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n2\u3064\u306e\u5358\u8a9e\u304c\u540c\u3058\u6587\u5b57\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n>>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n", "entry_point": "same_chars", "canonical_solution": "    return set(s0) == set(s1)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc') == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc', 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc') == False\n    assert candidate('aabb', 'aaccc') == False\n\n"}
{"task_id": "HumanEval/55", "prompt": "\n\ndef fib(n: int):\n    \"\"\"n\u756a\u76ee\u306e\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u3092\u8fd4\u3059\u3002\n>>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n", "entry_point": "fib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(10) == 55\n    assert candidate(1) == 1\n    assert candidate(8) == 21\n    assert candidate(11) == 89\n    assert candidate(12) == 144\n\n"}
{"task_id": "HumanEval/56", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"\u62ec\u5f27\u306f\"<\"\u3068\">\"\u306e\u6587\u5b57\u5217\u3067\u3059\u3002\n\u3059\u3079\u3066\u306e\u958b\u59cb\u62ec\u5f27\u304c\u5bfe\u5fdc\u3059\u308b\u7d42\u4e86\u62ec\u5f27\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n>>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"<>\")\n    assert candidate(\"<<><>>\")\n    assert candidate(\"<><><<><>><>\")\n    assert candidate(\"<><><<<><><>><>><<><><<>>>\")\n    assert not candidate(\"<<<><>>>>\")\n    assert not candidate(\"><<>\")\n    assert not candidate(\"<\")\n    assert not candidate(\"<<<<\")\n    assert not candidate(\">\")\n    assert not candidate(\"<<>\")\n    assert not candidate(\"<><><<><>><>><<>\")\n    assert not candidate(\"<><><<><>><>>><>\")\n\n"}
{"task_id": "HumanEval/57", "prompt": "\n\ndef monotonic(l: list):\n    \"\"\"\u623b\u308a\u5024\u30ea\u30b9\u30c8\u8981\u7d20\u304c\u5358\u8abf\u306b\u5897\u52a0\u307e\u305f\u306f\u6e1b\u5c11\u3057\u3066\u3044\u308b\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\u3002\n>>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n", "entry_point": "monotonic", "canonical_solution": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\n"}
{"task_id": "HumanEval/58", "prompt": "\n\ndef common(l1: list, l2: list):\n    \"\"\"\u623b\u308a\u50242\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5171\u901a\u306e\u8981\u7d20\u3092\u4e26\u3079\u66ff\u3048\u307e\u3059\u3002\n>>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n", "entry_point": "common", "canonical_solution": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\n"}
{"task_id": "HumanEval/59", "prompt": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"n\u306e\u6700\u5927\u306e\u7d20\u6570\u3092\u8fd4\u3059\u3002n > 1\u3067\u3042\u308a\u3001\u7d20\u6570\u3067\u306a\u3044\u3068\u4eee\u5b9a\u3059\u308b\u3002\n>>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n", "entry_point": "largest_prime_factor", "canonical_solution": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(15) == 5\n    assert candidate(27) == 3\n    assert candidate(63) == 7\n    assert candidate(330) == 11\n    assert candidate(13195) == 29\n\n"}
{"task_id": "HumanEval/60", "prompt": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n\u306f\u30011\u304b\u3089n\u307e\u3067\u306e\u6570\u3092\u5408\u8a08\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n>>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n", "entry_point": "sum_to_n", "canonical_solution": "    return sum(range(n + 1))\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(1) == 1\n    assert candidate(6) == 21\n    assert candidate(11) == 66\n    assert candidate(30) == 465\n    assert candidate(100) == 5050\n\n"}
{"task_id": "HumanEval/61", "prompt": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\"\u30ab\u30c3\u30b3\u306f\"(\"\u3068\")\"\u306e\u6587\u5b57\u5217\u3067\u3059\u3002\n\u3059\u3079\u3066\u306e\u958b\u59cb\u62ec\u5f27\u304c\u5bfe\u5fdc\u3059\u308b\u7d42\u4e86\u62ec\u5f27\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n>>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n", "entry_point": "correct_bracketing", "canonical_solution": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(\"()\")\n    assert candidate(\"(()())\")\n    assert candidate(\"()()(()())()\")\n    assert candidate(\"()()((()()())())(()()(()))\")\n    assert not candidate(\"((()())))\")\n    assert not candidate(\")(()\")\n    assert not candidate(\"(\")\n    assert not candidate(\"((((\")\n    assert not candidate(\")\")\n    assert not candidate(\"(()\")\n    assert not candidate(\"()()(()())())(()\")\n    assert not candidate(\"()()(()())()))()\")\n\n"}
{"task_id": "HumanEval/62", "prompt": "\n\ndef derivative(xs: list):\n    \"\"\"x\u306f\u591a\u9805\u5f0f\u306e\u4fc2\u6570\u3092\u8868\u3059\u3002\nxs[0] + xs[1] * x + xs[2] * x^2 +\u2026\n\u3053\u306e\u591a\u9805\u5f0f\u306e\u5fae\u5206\u3092\u540c\u3058\u5f62\u5f0f\u3067\u8fd4\u3059\u3002\n>>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n", "entry_point": "derivative", "canonical_solution": "    return [(i * x) for i, x in enumerate(xs)][1:]\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n    assert candidate([1, 2, 3]) == [2, 6]\n    assert candidate([3, 2, 1]) == [2, 2]\n    assert candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n    assert candidate([1]) == []\n\n"}
{"task_id": "HumanEval/63", "prompt": "\n\ndef fibfib(n: int):\n    \"\"\"fibfib\u6570\u5217\u306ffibbonacci sequnece\u306b\u4f3c\u305f\u6570\u5217\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nfibfib (0) = = 0\nfibfib (1) = = 0\nfibfib(2\u3064)= = 1\nfibfib (n) = = fibfib (n-1\u3050\u3089\u3093\u3077\u308a)+ fibfib (n-2) + fibfib (n-3)\u3002\nfibfib\u6570\u5217\u306en\u756a\u76ee\u306e\u8981\u7d20\u3092\u52b9\u7387\u3088\u304f\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\u3002\n>>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n", "entry_point": "fibfib", "canonical_solution": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "test": "\n\nMETADATA = {}\n\n\ndef check(candidate):\n    assert candidate(2) == 1\n    assert candidate(1) == 0\n    assert candidate(5) == 4\n    assert candidate(8) == 24\n    assert candidate(10) == 81\n    assert candidate(12) == 274\n    assert candidate(14) == 927\n\n"}
{"task_id": "HumanEval/64", "prompt": "\nFIX = \"\"\"\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u300e\u9f3b\u884c\u985e\n\n\u3088\u3053\u305bvowels_count (s):\n\"\"\u306f\u8868\u3059\u6587\u5b57\u5217\u3092\u53d6\u308b\u95a2\u6570vowels_count\u3092\u8a18\u8ff0\u3059\u308b\n\u5358\u8a9e\u3092\u5165\u529b\u3068\u3057\u3066\u3001\u6587\u5b57\u5217\u5185\u306e\u6bcd\u97f3\u306e\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6bcd\u97f3\u306f\u300ca\u300d\u3001\u300ce\u300d\u3001\u300ci\u300d\u3001\u300co\u300d\u3001\u300cu\u300d\u3067\u3042\u308b\u3002\u3053\u3053\u3067\u3001'y'\u3082\u307e\u305fa\u3067\u3042\u308b\n\u6bcd\u97f3\u306f\u3001\u305d\u308c\u304c\u4e0e\u3048\u3089\u308c\u305f\u5358\u8a9e\u306e\u6700\u5f8c\u306b\u3042\u308b\u3068\u304d\u306b\u306e\u307f\u3002\n\nExample:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n", "entry_point": "vowels_count", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"abcde\") == 2, \"Test 1\"\n    assert candidate(\"Alone\") == 3, \"Test 2\"\n    assert candidate(\"key\") == 2, \"Test 3\"\n    assert candidate(\"bye\") == 1, \"Test 4\"\n    assert candidate(\"keY\") == 2, \"Test 5\"\n    assert candidate(\"bYe\") == 1, \"Test 6\"\n    assert candidate(\"ACEDY\") == 3, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/65", "prompt": "\ndef circular_shift(x, shift):\n    \"\"\"circular shift\u6574\u6570x\u306e\u6841\u3092shift\u3067\u53f3\u306b\u30b7\u30d5\u30c8\u3057\u307e\u3059\n\u7d50\u679c\u3092\u6587\u5b57\u5217\u3067\u8fd4\u3057\u307e\u3059\u3002\nshift > number of digits\u306e\u5834\u5408\u306f\u3001\u6570\u5b57\u3092\u9006\u306b\u8fd4\u3057\u307e\u3059\u3002\n>>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n", "entry_point": "circular_shift", "canonical_solution": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(100, 2) == \"001\"\n    assert candidate(12, 2) == \"12\"\n    assert candidate(97, 8) == \"79\"\n    assert candidate(12, 1) == \"21\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(11, 101) == \"11\", \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/66", "prompt": "\ndef digitSum(s):\n    \"\"\"\u4efb\u52d9\n\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3057\u3001\u4e0a\u4f4d\u306e\u6587\u5b57\u306e\u5408\u8a08\u3060\u3051\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3002'\nASCII\u3002\n\nExamples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n", "entry_point": "digitSum", "canonical_solution": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"\") == 0, \"Error\"\n    assert candidate(\"abAB\") == 131, \"Error\"\n    assert candidate(\"abcCd\") == 67, \"Error\"\n    assert candidate(\"helloE\") == 69, \"Error\"\n    assert candidate(\"woArBld\") == 131, \"Error\"\n    assert candidate(\"aAaaaXa\") == 153, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\" How are yOu?\") == 151, \"Error\"\n    assert candidate(\"You arE Very Smart\") == 327, \"Error\"\n\n"}
{"task_id": "HumanEval/67", "prompt": "\ndef fruit_distribution(s,n):\n    \"\"\"\n\u3053\u306e\u30bf\u30b9\u30af\u3067\u306f\u3001\u3044\u304f\u3064\u304b\u306e\u30ea\u30f3\u30b4\u3068\u30aa\u30ec\u30f3\u30b8\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\n\u3053\u306e\u30ab\u30b4\u306b\u5165\u3063\u3066\u3044\u308b\u679c\u7269\u306e\u30ab\u30b4\u306b\u5165\u3063\u3066\u3044\u307e\u3059\n\u30ea\u30f3\u30b4\u3001\u30aa\u30ec\u30f3\u30b8\u3001\u30de\u30f3\u30b4\u30fc\u306a\u3069\u3002\u5408\u8a08\u6570\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\n\u30aa\u30ec\u30f3\u30b8\u3068\u30ea\u30f3\u30b4\u3068\u679c\u7269\u306e\u7dcf\u6570\u3092\u8868\u3059\u6574\u6570\n\u30d0\u30b9\u30b1\u30c3\u30c8\u3067\u306f\u3001\u30d0\u30b9\u30b1\u30c3\u30c8\u5185\u306e\u30de\u30f3\u30b4\u30fc\u306e\u679c\u7269\u306e\u756a\u53f7\u3092\u8fd4\u3057\u307e\u3059\u3002\nexamble:\n^\u300e\u5b98\u5831\u300f\u7b2c5\u53f7\u300c\u53d9\u4efb\u53ca\u7b2c\u300d\u300c\u53d9\u4efb\u53ca\u7b2c\u300d\u300c\u53d9\u4efb\u53ca\u7b2c\u300d\u300c\u53d9\u4efb\u53ca\u7b2c\u300d\u300c\u53d9\u4efb\u53ca\u7b2c\u300d\u300c\u53d9\u4efb\u53ca\u7b2c\u300d\u300c\u53d9\u4efb\u53ca\u7b2c\u300d19\u9801\n^ a b c d e f g h i\u300c1\u500b\u306e\u30ea\u30f3\u30b4\u30682\u500b\u306e\u30ea\u30f3\u30b4\u300d\nfruit_distribution(2\u30ea\u30f3\u30b43\u300d\u3001100)\u2192100\u30e1\u30fc\u30c8\u30eb2 ~ 3 = 95\n^ a b c d e f g h i\u300c100\u500b\u306e\u30ea\u30f3\u30b4\u30681\u500b\u306e\u30aa\u30ec\u30f3\u30b8\u300d(120)\u2192120 - 100 - 1 = 19\n\"\"\"\n", "entry_point": "fruit_distribution", "canonical_solution": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"5 apples and 6 oranges\",19) == 8\n    assert candidate(\"5 apples and 6 oranges\",21) == 10\n    assert candidate(\"0 apples and 1 oranges\",3) == 2\n    assert candidate(\"1 apples and 0 oranges\",3) == 2\n    assert candidate(\"2 apples and 3 oranges\",100) == 95\n    assert candidate(\"2 apples and 3 oranges\",5) == 0\n    assert candidate(\"1 apples and 100 oranges\",120) == 19\n"}
{"task_id": "HumanEval/68", "prompt": "\ndef pluck(arr):\n    \"\"\"\n\u300c\u975e\u8ca0\u306e\u6574\u6570\u30ce\u30fc\u30c9\u3092\u6301\u3064\u6728\u306e\u679d\u3092\u8868\u3059\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\n\u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u3001\u30ce\u30fc\u30c9\u306e1\u3064\u3092\u53d6\u308a\u51fa\u3057\u3066\u305d\u308c\u3092\u8fd4\u3059\u3053\u3068\u3067\u3059\u3002\n\u9078\u629e\u3055\u308c\u305f\u30ce\u30fc\u30c9\u306f\u3001\u6700\u5c0f\u306e\u5076\u6570\u5024\u3092\u6301\u3064\u30ce\u30fc\u30c9\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u540c\u3058\u5076\u6570\u306e\u5024\u3092\u6301\u3064\u8907\u6570\u306e\u30ce\u30fc\u30c9\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6700\u3082\u5c0f\u3055\u3044\u30ce\u30fc\u30c9\u3092\u8fd4\u3059\u3002\n\n\u62bd\u51fa\u3055\u308c\u305f\u30ce\u30fc\u30c9\u306f\u3001[smalest_value,\u305d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9]\u306e\u30ea\u30b9\u30c8\u3067\u8fd4\u3055\u308c\u307e\u3059\u3002\n\u5024\u304c\u5076\u6570\u3067\u306a\u3044\u304b\u3001\u6307\u5b9a\u3057\u305f\u914d\u5217\u304c\u7a7a\u306e\u5834\u5408\u306f[]\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExample 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n", "entry_point": "pluck", "canonical_solution": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([4,2,3]) == [2, 1], \"Error\"\n    assert candidate([1,2,3]) == [2, 1], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5, 0, 3, 0, 4, 2]) == [0, 1], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3], \"Error\"\n    assert candidate([5, 4, 8, 4 ,8]) == [4, 1], \"Error\"\n    assert candidate([7, 6, 7, 1]) == [6, 1], \"Error\"\n    assert candidate([7, 9, 7, 1]) == [], \"Error\"\n\n"}
{"task_id": "HumanEval/69", "prompt": "\ndef search(lst):\n    '''\n\u6b63\u306e\u6574\u6570\u306e\u7a7a\u3067\u306a\u3044\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u623b\u308a\u5024\u306e\u6700\u5927\u5024\n\u30bc\u30ed\u3067\u3042\u308a\u3001\u6574\u6570\u81ea\u4f53\u306e\u5024\u4ee5\u4e0a\u306e\u5468\u6ce2\u6570\u3092\u6301\u3061\u307e\u3059\u3002\n\u6574\u6570\u306e\u983b\u5ea6\u306f\u3001\u30ea\u30b9\u30c8\u306b\u8868\u793a\u3055\u308c\u308b\u56de\u6570\u3067\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u5024\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f-1\u3092\u8fd4\u3057\u307e\u3059\u3002\nExamples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n", "entry_point": "search", "canonical_solution": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "test": "def check(candidate):\n\n    # manually generated tests\n    assert candidate([5, 5, 5, 5, 1]) == 1\n    assert candidate([4, 1, 4, 1, 4, 4]) == 4\n    assert candidate([3, 3]) == -1\n    assert candidate([8, 8, 8, 8, 8, 8, 8, 8]) == 8\n    assert candidate([2, 3, 3, 2, 2]) == 2\n\n    # automatically generated tests\n    assert candidate([2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1]) == 1\n    assert candidate([3, 2, 8, 2]) == 2\n    assert candidate([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) == 1\n    assert candidate([8, 8, 3, 6, 5, 6, 4]) == -1\n    assert candidate([6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9]) == 1\n    assert candidate([1, 9, 10, 1, 3]) == 1\n    assert candidate([6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10]) == 5\n    assert candidate([1]) == 1\n    assert candidate([8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5]) == 4\n    assert candidate([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) == 2\n    assert candidate([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) == 1\n    assert candidate([9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4]) == 4\n    assert candidate([2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7]) == 4\n    assert candidate([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) == 2\n    assert candidate([5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8]) == -1\n    assert candidate([10]) == -1\n    assert candidate([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) == 2\n    assert candidate([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) == 1\n    assert candidate([7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6]) == 1\n    assert candidate([3, 10, 10, 9, 2]) == -1\n\n"}
{"task_id": "HumanEval/70", "prompt": "\ndef strange_sort_list(lst):\n    '''\n\u6574\u6570\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u30ea\u30b9\u30c8\u3092\u5947\u5999\u306a\u9806\u5e8f\u3067\u8fd4\u3057\u307e\u3059\u3002\n\u5947\u5999\u306a\u4e26\u3079\u66ff\u3048\u3068\u306f\u6700\u5c0f\u5024\u304b\u3089\u59cb\u3081\u3066\n\u305d\u306e\u5f8c\u3001\u6b8b\u308a\u306e\u6574\u6570\u306e\u6700\u5927\u5024\u3001\u305d\u3057\u3066\u6700\u5c0f\u5024\u3068\u7d9a\u304d\u307e\u3059\u3002\n\nExamples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n", "entry_point": "strange_sort_list", "canonical_solution": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert candidate([]) == []\n    assert candidate([1,2,3,4,5,6,7,8]) == [1, 8, 2, 7, 3, 6, 4, 5]\n    assert candidate([0,2,2,2,5,5,-5,-5]) == [-5, 5, -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/71", "prompt": "\ndef triangle_area(a, b, c):\n    '''\n\u4e09\u89d2\u5f62\u306e3\u8fba\u306e\u9577\u3055\u3092\u8003\u3048\u308b\u3068\u5143\u306e\u9762\u7a4d\u3092\n\u4e09\u89d2\u5f62\u306f\u30013\u3064\u306e\u8fba\u304c\u6709\u52b9\u306a\u4e09\u89d2\u5f62\u3092\u5f62\u6210\u3059\u308b\u5834\u5408\u30012\u3064\u306e\u5c0f\u6570\u306b\u4e38\u3081\u3089\u308c\u307e\u3059\u3002\n\u3055\u3082\u306a\u3051\u308c\u30701\u623b\u308b\n3\u3064\u306e\u8fba\u306e\u548c\u304c\u5927\u304d\u3044\u3068\u304d\u306f\u30013\u3064\u306e\u8fba\u304c\u6709\u52b9\u306a\u4e09\u89d2\u5f62\u306b\u306a\u308b\n3\u3064\u76ee\u306e\u5074\u9762\u3088\u308a\u3082\u5927\u304d\u3044\u306e\u3067\u3059\nExample:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n", "entry_point": "triangle_area", "canonical_solution": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == 6.00, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2, 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7) == 16.25\n    assert candidate(2, 6, 3) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == 0.43, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == -1\n\n"}
{"task_id": "HumanEval/72", "prompt": "\ndef will_it_fly(q,w):\n    '''\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8q\u304c\u98db\u3076\u306a\u3089true\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\n\u5bfe\u8c61q\u304c\u5e73\u8861\u72b6\u614b\u306b\u3042\u308a(\u56de\u6587\u7684\u306a\u30ea\u30b9\u30c8\u3067\u3042\u308b)\u3001\u304b\u3064\u305d\u306e\u8981\u7d20\u306e\u7dcf\u548c\u304c\u53ef\u80fd\u306a\u6700\u5927\u91cd\u307fw\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u98db\u3076\u3002\n\nExample:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n", "entry_point": "will_it_fly", "canonical_solution": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 2, 3], 9) is True\n    assert candidate([1, 2], 5) is False\n    assert candidate([3], 5) is True\n    assert candidate([3, 2, 3], 1) is False\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3], 6) is False\n    assert candidate([5], 5) is True\n\n"}
{"task_id": "HumanEval/73", "prompt": "\ndef smallest_change(arr):\n    \"\"\"\n\u6574\u6570\u306e\u914d\u5217arr\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u305d\u306e\u8981\u7d20\u306e\u6700\u5c0f\u6570\u3092\u6c42\u3081\u308b\n\u914d\u5217\u3092\u30d1\u30ea\u30f3\u30c9\u30ed\u30df\u30c3\u30af\u306b\u3059\u308b\u305f\u3081\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30d1\u30ea\u30f3\u30c9\u30ed\u30df\u30c3\u30af\u914d\u5217\u306f\u305d\u306e\u914d\u5217\u3067\u3059\n\u524d\u5f8c\u306b\u540c\u3058\u3088\u3046\u306b\u8aad\u307e\u308c\u307e\u30591\u56de\u306e\u5909\u66f4\u3067\u30011\u3064\u306e\u8981\u7d20\u3092\u4ed6\u306e\u8981\u7d20\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nFor example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n", "entry_point": "smallest_change", "canonical_solution": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,5,4,7,9,6]) == 4\n    assert candidate([1, 2, 3, 4, 3, 2, 2]) == 1\n    assert candidate([1, 4, 2]) == 1\n    assert candidate([1, 4, 4, 2]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, 2, 1]) == 0\n    assert candidate([3, 1, 1, 3]) == 0\n    assert candidate([1]) == 0\n    assert candidate([0, 1]) == 1\n\n"}
{"task_id": "HumanEval/74", "prompt": "\ndef total_match(lst1, lst2):\n    '''\n2\u3064\u306e\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001\u6301\u3063\u3066\u3044\u308b\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\n\u30ea\u30b9\u30c8\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u5217\u306b\u542b\u307e\u308c\u308b\u6587\u5b57\u5217\u306e\u5408\u8a08\u6570\u304c\u3001\u4ed6\u306e\u30ea\u30b9\u30c8\u3088\u308a\u3082\u5c0f\u3055\u3044\u3002\n\n2\u3064\u306e\u30ea\u30b9\u30c8\u306e\u6587\u5b57\u6570\u304c\u540c\u3058\u5834\u5408\u306f\u3001\u6700\u521d\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExamples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n", "entry_point": "total_match", "canonical_solution": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([], []) == []\n    assert candidate(['hi', 'admin'], ['hi', 'hi']) == ['hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) == ['hi', 'admin']\n    assert candidate(['4'], ['1', '2', '3', '4', '5']) == ['4']\n    assert candidate(['hi', 'admin'], ['hI', 'Hi']) == ['hI', 'Hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hi']) == ['hI', 'hi', 'hi']\n    assert candidate(['hi', 'admin'], ['hI', 'hi', 'hii']) == ['hi', 'admin']\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([], ['this']) == []\n    assert candidate(['this'], []) == []\n\n"}
{"task_id": "HumanEval/75", "prompt": "\ndef is_multiply_prime(a):\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6570\u304c3\u3064\u306e\u7d20\u6570\u306e\u639b\u3051\u7b97\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\n\u3068\u507d\u306a\u3044\u3057\u306a\u3002\n(a)\u304c100\u3088\u308a\u5c0f\u3055\u3044\u3053\u3068\u3092\u77e5\u308b\u3002\nExample:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n", "entry_point": "is_multiply_prime", "canonical_solution": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "test": "def check(candidate):\n\n    assert candidate(5) == False\n    assert candidate(30) == True\n    assert candidate(8) == True\n    assert candidate(10) == False\n    assert candidate(125) == True\n    assert candidate(3 * 5 * 7) == True\n    assert candidate(3 * 6 * 7) == False\n    assert candidate(9 * 9 * 9) == False\n    assert candidate(11 * 9 * 9) == False\n    assert candidate(11 * 13 * 7) == True\n\n"}
{"task_id": "HumanEval/76", "prompt": "\ndef is_simple_power(x, n):\n    \"\"\"\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u6570x\u304c\u5358\u7d14\u306a\u5834\u5408\u306btrue\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u3067\u3059\n\u4ed6\u306e\u5834\u5408\u306b\u306fn\u306e\u51aa\u3068\u507d\u3002\nx\u306fn**int=x\u306e\u3068\u304dn\u306e\u5358\u7d14\u3079\u304d\u4e57\u3067\u3042\u308b\nFor example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n", "entry_point": "is_simple_power", "canonical_solution": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(16, 2)== True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(143214, 16)== False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(4, 2)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(9, 3)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(16, 4)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(24, 2)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(128, 4)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(12, 6)==False, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(1, 12)==True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/77", "prompt": "\ndef iscube(a):\n    '''\n\u6574\u6570a\u3092\u53d6\u308a\u3001true\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\n\u3053\u306eingeger\u304c\u3042\u308b\u6574\u6570\u306e\u7acb\u65b9\u4f53\u306a\u3089\u3070\u3002\n\u6ce8\u610f:\u5165\u529b\u306f\u5e38\u306b\u6709\u52b9\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nExamples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n", "entry_point": "iscube", "canonical_solution": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1) == True, \"First test error: \" + str(candidate(1))\n    assert candidate(2) == False, \"Second test error: \" + str(candidate(2))\n    assert candidate(-1) == True, \"Third test error: \" + str(candidate(-1))\n    assert candidate(64) == True, \"Fourth test error: \" + str(candidate(64))\n    assert candidate(180) == False, \"Fifth test error: \" + str(candidate(180))\n    assert candidate(1000) == True, \"Sixth test error: \" + str(candidate(1000))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == True, \"1st edge test error: \" + str(candidate(0))\n    assert candidate(1729) == False, \"2nd edge test error: \" + str(candidate(1728))\n\n"}
{"task_id": "HumanEval/78", "prompt": "\ndef hex_key(num):\n    \"\"\"\u3042\u306a\u305f\u306f\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u3092\u4efb\u3055\u308c\u3066\u3044\u307e\u3059\n\u6587\u5b57\u5217\u3068\u3057\u3066\u306e16\u9032\u6570\u3067\u300116\u9032\u6570\u306e\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\n\u7d20\u6570(\u3059\u3046\u3052\u3093\u3001\u82f1:prime number)\u3068\u306f\u3001\u81ea\u7136\u6570\u306e\u3053\u3068\u3067\u3042\u308b\n2\u3064\u306e\u3088\u308a\u5c0f\u3055\u3044\u81ea\u7136\u6570\u306e\u7a4d\u3067\u306f\u306a\u30441\u3088\u308a\u5927\u304d\u3044)\u3002\n16\u9032\u6570\u306f0,1,2,3,4,5,6,7,8,9,a, b, c, d, e, f\u3067\u3042\u308b\u3002\n\u7d20\u6570\u306f2,3,5,7,11,13,17,\u2026\n2\u30013\u30015\u30017\u3001\n^ a b c de f g h i(\u7b2c13\u8a71)\u3002\n\u6ce8\u610f:\u5165\u529b\u304c\u5e38\u306b\u6b63\u3057\u3044\u304b\u7a7a\u6587\u5b57\u5217\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u8a18\u53f7a, b, c, d, e, f\u306f\u5e38\u306b\u5927\u6587\u5b57\u3067\u3059\u3002\nExamples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n", "entry_point": "hex_key", "canonical_solution": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AB\") == 1, \"First test error: \" + str(candidate(\"AB\"))      \n    assert candidate(\"1077E\") == 2, \"Second test error: \" + str(candidate(\"1077E\"))  \n    assert candidate(\"ABED1A33\") == 4, \"Third test error: \" + str(candidate(\"ABED1A33\"))      \n    assert candidate(\"2020\") == 2, \"Fourth test error: \" + str(candidate(\"2020\"))  \n    assert candidate(\"123456789ABCDEF0\") == 6, \"Fifth test error: \" + str(candidate(\"123456789ABCDEF0\"))      \n    assert candidate(\"112233445566778899AABBCCDDEEFF00\") == 12, \"Sixth test error: \" + str(candidate(\"112233445566778899AABBCCDDEEFF00\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([]) == 0\n\n"}
{"task_id": "HumanEval/79", "prompt": "\ndef decimal_to_binary(decimal):\n    \"\"\"\u3042\u306a\u305f\u306f10\u9032\u6570\u3067\u6570\u5b57\u3092\u4e0e\u3048\u3089\u308c\u3001\u3042\u306a\u305f\u306e\u30bf\u30b9\u30af\u306f\u305d\u308c\u3092\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u3059\n\u30d0\u30a4\u30ca\u30ea\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u793a\u3059\u56f3\u3067\u3042\u308b\u3002\u95a2\u6570\u306f\u6587\u5b57\u5217\u3092\u8fd4\u3057\u3001\u5404\u6587\u5b57\u306f\u30d0\u30a4\u30ca\u30ea\u3092\u8868\u3057\u307e\u3059\n\u756a\u53f7\u3060\u6587\u5b57\u5217\u306e\u5404\u6587\u5b57\u306f'0'\u307e\u305f\u306f'1'\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6587\u5b57\u5217\u306e\u5148\u982d\u3068\u672b\u5c3e\u306b\u300cdb\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n\u8ffd\u52a0\u306e\u6587\u5b57\u306f\u3001\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u52a9\u3051\u308b\u305f\u3081\u306b\u3042\u308a\u307e\u3059\u3002\n\nExamples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n", "entry_point": "decimal_to_binary", "canonical_solution": "    return \"db\" + bin(decimal)[2:] + \"db\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(0) == \"db0db\"\n    assert candidate(32) == \"db100000db\"\n    assert candidate(103) == \"db1100111db\"\n    assert candidate(15) == \"db1111db\", \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/80", "prompt": "\ndef is_happy(s):\n    \"\"\"\u6587\u5b57\u5217s\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u6587\u5b57\u5217\u304c\u6e80\u8db3\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u6587\u5b57\u5217\u306e\u9577\u3055\u304c3\u4ee5\u4e0a\u3067\u3001\u9023\u7d9a\u3059\u308b3\u6587\u5b57\u3054\u3068\u306b\u7570\u306a\u308b\u5834\u5408\u306f\u3001\u6587\u5b57\u5217\u306f\u5e78\u305b\u3067\u3059\nFor example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n", "entry_point": "is_happy", "canonical_solution": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"a\") == False , \"a\"\n    assert candidate(\"aa\") == False , \"aa\"\n    assert candidate(\"abcd\") == True , \"abcd\"\n    assert candidate(\"aabb\") == False , \"aabb\"\n    assert candidate(\"adb\") == True , \"adb\"\n    assert candidate(\"xyy\") == False , \"xyy\"\n    assert candidate(\"iopaxpoi\") == True , \"iopaxpoi\"\n    assert candidate(\"iopaxioi\") == False , \"iopaxioi\"\n"}
{"task_id": "HumanEval/81", "prompt": "\ndef numerical_letter_grade(grades):\n    \"\"\"\u5b66\u671f\u306e\u6700\u5f8c\u306e\u9031\u3067\u3001\u5148\u751f\u306f\u6210\u7e3e\u3092\u51fa\u3055\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\n\u3068\u3044\u3046\u3053\u3068\u3002\u5148\u751f\u306f\u63a1\u70b9\u306e\u305f\u3081\u306e\u72ec\u81ea\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f5c\u3063\u3066\u3044\u307e\u3059\u3002\n\u552f\u4e00\u306e\u554f\u984c\u306f\u3001\u5f7c\u5973\u304c\u63a1\u70b9\u306b\u4f7f\u7528\u3057\u305f\u30b3\u30fc\u30c9\u3092\u5931\u3063\u3066\u3044\u308b\u3053\u3068\u3067\u3059\u3002\n\u5f7c\u5973\u306f\u3042\u306a\u305f\u306b\u4f55\u4eba\u304b\u306e\u5b66\u751f\u306e\u305f\u3081\u306egps\u306e\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u307e\u3057\u305f\u3001\u305d\u3057\u3066\u3042\u306a\u305f\u306f\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\n\u6b21\u306e\u8868\u3092\u4f7f\u7528\u3057\u3066\u3001\u6587\u5b57\u306e\u6210\u7e3e\u306e\u30ea\u30b9\u30c8\u3092\u51fa\u529b\u3067\u304d\u308b\u95a2\u6570:\nGPA        |    \u624b\u7d19\u5e74\u751f\n4.0                 A +\n> 3.7                 \u306e\n- > 3.3                 \u6b21\u306e\u8f38\u9001\u30c1\u30fc\u30e0\u304c\u5230\u7740\u3057\u307e\u3059\n> 3.0                 B +\n> 2.7                 B\n> 2.3                 B\u2212\n> 2.0                 C +\n> 1.7                 C\n> 1.3                 (\u7f8e\u54b2)\u306d\u3063\n> 1.0                 D +\n> 0.7                 D\n> 0.0                 D -\n0.0                 E\n\n\nExample:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n", "entry_point": "numerical_letter_grade", "canonical_solution": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4.0, 3, 1.7, 2, 3.5]) == ['A+', 'B', 'C-', 'C', 'A-']\n    assert candidate([1.2]) == ['D+']\n    assert candidate([0.5]) == ['D-']\n    assert candidate([0.0]) == ['E']\n    assert candidate([1, 0.3, 1.5, 2.8, 3.3]) == ['D', 'D-', 'C-', 'B', 'B+']\n    assert candidate([0, 0.7]) == ['E', 'D-']\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/82", "prompt": "\ndef prime_length(string):\n    \"\"\"\u6587\u5b57\u5217\u3092\u53d6\u308a\u3001\u6587\u5b57\u5217\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\nlength\u306f\u7d20\u6570\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3067\u3059\nExamples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n", "entry_point": "prime_length", "canonical_solution": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello') == True\n    assert candidate('abcdcba') == True\n    assert candidate('kittens') == True\n    assert candidate('orange') == False\n    assert candidate('wow') == True\n    assert candidate('world') == True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n    assert candidate('') == False\n    assert candidate('HI') == True\n    assert candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa') == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('Madam') == True\n    assert candidate('M') == False\n    assert candidate('0') == False\n\n"}
{"task_id": "HumanEval/83", "prompt": "\ndef starts_one_ends(n):\n    \"\"\"\n\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d,n\u6841\u306e\u6570\u306e\u500b\u6570\u3092\u8fd4\u3059\n1\u3067\u958b\u59cb\u307e\u305f\u306f\u7d42\u4e86\u3059\u308b\u6b63\u306e\u6574\u6570\u3002\n\"\"\"\n", "entry_point": "starts_one_ends", "canonical_solution": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1) == 1\n    assert candidate(2) == 18\n    assert candidate(3) == 180\n    assert candidate(4) == 1800\n    assert candidate(5) == 18000\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/84", "prompt": "\ndef solve(N):\n    \"\"\"\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u305d\u306e\u6841\u6570\u306e\u5408\u8a08\u3092\u4e8c\u9032\u6cd5\u3067\u8fd4\u3059\u3002\n\nExample\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n", "entry_point": "solve", "canonical_solution": "    return bin(sum(int(i) for i in str(N)))[2:]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1000) == \"1\", \"Error\"\n    assert candidate(150) == \"110\", \"Error\"\n    assert candidate(147) == \"1100\", \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(333) == \"1001\", \"Error\"\n    assert candidate(963) == \"10010\", \"Error\"\n\n"}
{"task_id": "HumanEval/85", "prompt": "\ndef add(lst):\n    \"\"\"\u7a7a\u3067\u306a\u3044\u6574\u6570\u306e\u30ea\u30b9\u30c8lst\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3002\u5947\u6570\u306e\u6dfb\u5b57\u3092\u6301\u3064\u5076\u6570\u306e\u8981\u7d20\u3092\u52a0\u3048\u308b\u3002\n\n\nExamples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n", "entry_point": "add", "canonical_solution": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([4, 88]) == 88\n    assert candidate([4, 5, 6, 7, 2, 122]) == 122\n    assert candidate([4, 0, 6, 7]) == 0\n    assert candidate([4, 4, 6, 8]) == 12\n\n    # Check some edge cases that are easy to work out by hand.\n    \n"}
{"task_id": "HumanEval/86", "prompt": "\ndef anti_shuffle(s):\n    \"\"\"\n\u6587\u5b57\u5217\u3092\u53d6\u308a\u3001\u305d\u306e\u9806\u5e8f\u4ed8\u304d\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\n\u6587\u5b57\u5217\u306e\u9806\u5e8f\u4ed8\u304d\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3001\u3059\u3079\u3066\u306e\u5358\u8a9e\u304c(\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f)\u6587\u5b57\u5217\u3067\u3059\u3002\n\u65b0\u3057\u3044\u5358\u8a9e\u306b\u7f6e\u304d\u63db\u3048\u3089\u308c\u308b\u306e\u3067\u3057\u3087\u3046\u304b\nascii\u5024\u306b\u57fa\u3065\u304f\u6607\u9806\u3002\n\u6ce8\u610f:\u6587\u7ae0\u4e2d\u306e\u5358\u8a9e\u3068\u7a7a\u767d\u306e\u9806\u5e8f\u306f\u5b88\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\nFor example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n", "entry_point": "anti_shuffle", "canonical_solution": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hi') == 'Hi'\n    assert candidate('hello') == 'ehllo'\n    assert candidate('number') == 'bemnru'\n    assert candidate('abcd') == 'abcd'\n    assert candidate('Hello World!!!') == 'Hello !!!Wdlor'\n    assert candidate('') == ''\n    assert candidate('Hi. My name is Mister Robot. How are you?') == '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/87", "prompt": "\ndef get_row(lst, x):\n    \"\"\"\n\u5165\u308c\u5b50\u306b\u306a\u3063\u305f2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\n\u3053\u308c\u306f\u884c\u5217\u306b\u4f3c\u3066\u3044\u307e\u3059\u304c\u884c\u5217\u3068\u306f\u7570\u306a\u308a\n\u5404\u884c\u306b\u306f\u3001\u7570\u306a\u308b\u6570\u306e\u5217\u3092\u542b\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nlst\u3068\u6574\u6570x\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u30ea\u30b9\u30c8\u304b\u3089\u6574\u6570x\u3092\u6c42\u3081\u308b\u3002\n\u305d\u3057\u3066\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8[(x1, y1), (x2, y2)\u2026\u3092\u8fd4\u3059\u3002]\u306a\u3069\n\u5404\u30bf\u30d7\u30eb\u306f0\u3067\u59cb\u307e\u308b\u5ea7\u6a19-(\u884c,\u5217)\u3067\u3059\u3002\n\u5ea7\u6a19\u3092\u6700\u521d\u306e\u884c\u3067\u6607\u9806\u306b\u4e26\u3079\u66ff\u3048\u307e\u3059\u3002\n\u307e\u305f\u3001\u884c\u306e\u5ea7\u6a19\u3092\u5217\u3067\u964d\u9806\u306b\u4e26\u3079\u66ff\u3048\u307e\u3059\u3002\n\nExamples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n", "entry_point": "get_row", "canonical_solution": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6]\n    ], 2) == [(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]\n    assert candidate([\n        [1,2,3,4,5,6],\n        [1,2,3,4,5,6],\n        [1,1,3,4,5,6],\n        [1,2,1,4,5,6],\n        [1,2,3,1,5,6],\n        [1,2,3,4,1,6],\n        [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 0), (2, 1), (2, 0), (3, 2), (3, 0), (4, 3), (4, 0), (5, 4), (5, 0), (6, 5), (6, 0)]\n    assert candidate([], 1) == []\n    assert candidate([[1]], 2) == []\n    assert candidate([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/88", "prompt": "\ndef sort_array(array):\n    \"\"\"\n\u975e\u8ca0\u306e\u6574\u6570\u306e\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u30bd\u30fc\u30c8\u5f8c\u306b\u305d\u306e\u914d\u5217\u306e\u30b3\u30d4\u30fc\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5408\u8a08(\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u3001\u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024)\u304c\u5947\u6570\u306e\u5834\u5408\u3001\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u3092\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u307e\u305f\u306f\u3001\u5408\u8a08(\u6700\u521d\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024\u3001\u6700\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5024)\u304c\u5076\u6570\u306e\u5834\u5408\u306f\u3001\u964d\u9806\u306b\u4e26\u3079\u66ff\u3048\u307e\u3059\u3002\n\n\u6ce8:\n*\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u3092\u5909\u66f4\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\u3002\n\nExamples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n", "entry_point": "sort_array", "canonical_solution": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([5]) == [5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5], \"Error\"\n    assert candidate([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([2, 1]) == [1, 2], \"Error\"\n    assert candidate([15, 42, 87, 32 ,11, 0]) == [0, 11, 15, 32, 42, 87], \"Error\"\n    assert candidate([21, 14, 23, 11]) == [23, 21, 14, 11], \"Error\"\n\n"}
{"task_id": "HumanEval/89", "prompt": "\ndef encrypt(s):\n    \"\"\"\u6587\u5b57\u5217\u3092\u5f15\u6570\u3068\u3059\u308b\u95a2\u6570encrypt\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u623b\u308a\u5024\u56de\u8ee2\u3055\u308c\u3066\u3044\u308b\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u3067\u6697\u53f7\u5316\u3055\u308c\u305f\u6587\u5b57\u5217\u3002\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306f\u3001\u6587\u5b57\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3067\u56de\u8ee2\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n2\u500d\u306b\u30b7\u30d5\u30c8\u30c0\u30a6\u30f3\u3057\u30662\u7b87\u6240\u306b\u3057\u307e\u3059\u3002\nFor example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n", "entry_point": "encrypt", "canonical_solution": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('hi') == 'lm', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('asdfghjkl') == 'ewhjklnop', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('gf') == 'kj', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('et') == 'ix', \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate('faewfawefaewg')=='jeiajeaijeiak', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('hellomyfriend')=='lippsqcjvmirh', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh')=='hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl', \"This prints if this assert fails 3 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('a')=='e', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/90", "prompt": "\ndef next_smallest(lst):\n    \"\"\"\n\u6574\u6570\u306e\u30ea\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u306e2\u756a\u76ee\u306b\u5c0f\u3055\u3044\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570next_smallest()\u3092\u66f8\u304f\u3002\n\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u306a\u3044\u5834\u5408\u306fnone\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nnext_smallest([1, 2, 3, 4, 5]) == 2\nnext_smallest([5, 1, 4, 3, 2]) == 2\n() next_smallest = =\u3082\nnext_smallest([1, 1]) == none\n\"\"\"\n", "entry_point": "next_smallest", "canonical_solution": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4, 5]) == 2\n    assert candidate([5, 1, 4, 3, 2]) == 2\n    assert candidate([]) == None\n    assert candidate([1, 1]) == None\n    assert candidate([1,1,1,1,0]) == 1\n    assert candidate([1, 0**0]) == None\n    assert candidate([-35, 34, 12, -45]) == -35\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/91", "prompt": "\ndef is_bored(S):\n    \"\"\"\n\u5358\u8a9e\u306e\u5217\u304c\u4e0e\u3048\u3089\u308c\u3001\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u305d\u306e\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u3067\u3059\nboredoms\u3002\u300c\u9000\u5c48\u300d\u306f\u300c\u79c1\u300d\u3067\u59cb\u307e\u308b\u6587\u3067\u3059\u3002\n\u6587\u306f\u300c\u3067\u533a\u5207\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u300c\u3001\u300d?\u300d\u3084\u300c!\u300d\u3002\n\nFor example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n", "entry_point": "is_bored", "canonical_solution": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Hello world\") == 0, \"Test 1\"\n    assert candidate(\"Is the sky blue?\") == 0, \"Test 2\"\n    assert candidate(\"I love It !\") == 1, \"Test 3\"\n    assert candidate(\"bIt\") == 0, \"Test 4\"\n    assert candidate(\"I feel good today. I will be productive. will kill It\") == 2, \"Test 5\"\n    assert candidate(\"You and I are going for a walk\") == 0, \"Test 6\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/92", "prompt": "\ndef any_int(x, y, z):\n    '''\n3\u3064\u306e\u6570\u5b57\u3092\u53d6\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u623b\u308a\u5024\u306e1\u3064\u304c\u4ed6\u306e2\u3064\u306e\u548c\u3068\u7b49\u3057\u304f\u3001\u3059\u3079\u3066\u306e\u6570\u304c\u6574\u6570\u306e\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306ffalse\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExamples\n    any_int(5, 2, 7) \u279e True\n    \n    any_int(3, 2, 2) \u279e False\n\n    any_int(3, -2, 1) \u279e True\n    \n    any_int(3.6, -2.2, 2) \u279e False\n  \n\n    \n    '''\n", "entry_point": "any_int", "canonical_solution": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 3, 1)==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(2.5, 2, 3)==False, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(1.5, 5, 3.5)==False, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate(2, 6, 2)==False, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(4, 2, 2)==True, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate(2.2, 2.2, 2.2)==False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate(-4, 6, 2)==True, \"This prints if this assert fails 7 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2,1,1)==True, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate(3,4,7)==True, \"This prints if this assert fails 9 (also good for debugging!)\"\n    assert candidate(3.0,4,7)==False, \"This prints if this assert fails 10 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/93", "prompt": "\ndef encode(message):\n    \"\"\"\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304d\u3001\u305d\u306e\u4e2d\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u307e\u3059\n\u3059\u3079\u3066\u306e\u6587\u5b57\u306e\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u308b\u65b9\u6cd5\u3067\u3001\u3059\u3079\u3066\u306e\u6bcd\u97f3\u3092\u7f6e\u304d\u63db\u3048\u307e\u3059\n\u305d\u306e2\u3064\u5148\u306b\u51fa\u3066\u304f\u308b\u6587\u5b57\u306e\u5165\u3063\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\n\u82f1\u8a9e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306e\u6bcd\u97f3\u3002\n\u30a4\u30cb\u30b7\u30e3\u30eb\u3060\u3051\u3002\n\nExamples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n", "entry_point": "encode", "canonical_solution": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('TEST') == 'tgst', \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('Mudasir') == 'mWDCSKR', \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('YES') == 'ygs', \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('This is a message') == 'tHKS KS C MGSSCGG', \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"I DoNt KnOw WhAt tO WrItE\") == 'k dQnT kNqW wHcT Tq wRkTg', \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/94", "prompt": "\n\ndef skjkasdkd(lst):\n    \"\"\"\u6574\u6570\u306e\u30ea\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u6700\u5927\u306e\u7d20\u6570\u3092\u898b\u3064\u3051\u3066\u3001\u305d\u306e\u6570\u5b57\u306e\u5408\u8a08\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nExamples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n", "entry_point": "skjkasdkd", "canonical_solution": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]) == 10, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]) == 25, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]) == 13, \"This prints if this assert fails 3 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,724,32,71,99,32,6,0,5,91,83,0,5,6]) == 11, \"This prints if this assert fails 4 (also good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,81,12,3,1,21]) == 3, \"This prints if this assert fails 5 (also good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0,8,1,2,1,7]) == 7, \"This prints if this assert fails 6 (also good for debugging!)\"\n\n    assert candidate([8191]) == 19, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate([8191, 123456, 127, 7]) == 19, \"This prints if this assert fails 8 (also good for debugging!)\"\n    assert candidate([127, 97, 8192]) == 10, \"This prints if this assert fails 9 (also good for debugging!)\"\n"}
{"task_id": "HumanEval/95", "prompt": "\ndef check_dict_case(dict):\n    \"\"\"\n\u8f9e\u66f8\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u3059\u3079\u3066\u306e\u30ad\u30fc\u304c\u4e0b\u4f4d\u306e\u6587\u5b57\u5217\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3057\u307e\u3059\ncase\u307e\u305f\u306f\u3059\u3079\u3066\u306e\u30ad\u30fc\u306f\u5927\u6587\u5b57\u306e\u6587\u5b57\u5217\u3067\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u95a2\u6570\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u8f9e\u66f8\u304c\u7a7a\u3067\u3042\u308c\u3070false\u3092\u8fd4\u3057\u307e\u3059\u3002\nExamples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n", "entry_point": "check_dict_case", "canonical_solution": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate({\"p\":\"pineapple\", \"b\":\"banana\"}) == True, \"First test error: \" + str(candidate({\"p\":\"pineapple\", \"b\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}) == False, \"Second test error: \" + str(candidate({\"p\":\"pineapple\", \"A\":\"banana\", \"B\":\"banana\"}))\n    assert candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}) == False, \"Third test error: \" + str(candidate({\"p\":\"pineapple\", 5:\"banana\", \"a\":\"apple\"}))\n    assert candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) == False, \"Fourth test error: \" + str(candidate({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))\n    assert candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) == True, \"Fifth test error: \" + str(candidate({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))      \n    assert candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }) == True, \"Fourth test error: \" + str(candidate({\"fruit\":\"Orange\", \"taste\":\"Sweet\" }))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate({}) == False, \"1st edge test error: \" + str(candidate({}))\n\n"}
{"task_id": "HumanEval/96", "prompt": "\ndef count_up_to(n):\n    \"\"\"\u975e\u8ca0\u306e\u6574\u6570\u3092\u53d6\u308a\u3001\u6700\u521d\u306en\u306e\u914d\u5217\u3092\u8fd4\u3059\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\nn\u672a\u6e80\u306e\u7d20\u6570\u3067\u3042\u308b\u6574\u6570\u3002\nfor example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n", "entry_point": "count_up_to", "canonical_solution": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "test": "def check(candidate):\n\n    assert candidate(5) == [2,3]\n    assert candidate(6) == [2,3,5]\n    assert candidate(7) == [2,3,5]\n    assert candidate(10) == [2,3,5,7]\n    assert candidate(0) == []\n    assert candidate(22) == [2,3,5,7,11,13,17,19]\n    assert candidate(1) == []\n    assert candidate(18) == [2,3,5,7,11,13,17]\n    assert candidate(47) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43]\n    assert candidate(101) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n"}
{"task_id": "HumanEval/97", "prompt": "\ndef multiply(a, b):\n    \"\"\"2\u3064\u306e\u6574\u6570\u3092\u53d6\u3063\u3066\u8fd4\u3059\u95a2\u6570\u3092\u5b8c\u6210\u3055\u305b\u308b\n\u5f7c\u3089\u306e\u5358\u4f4d\u306e\u6570\u5b57\u306e\u7a4d\u3002\n\u5165\u529b\u304c\u5e38\u306b\u6709\u52b9\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3002\nExamples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n", "entry_point": "multiply", "canonical_solution": "    return abs(a % 10) * abs(b % 10)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(148, 412) == 16, \"First test error: \" + str(candidate(148, 412))                    \n    assert candidate(19, 28) == 72, \"Second test error: \" + str(candidate(19, 28))           \n    assert candidate(2020, 1851) == 0, \"Third test error: \" + str(candidate(2020, 1851))\n    assert candidate(14,-15) == 20, \"Fourth test error: \" + str(candidate(14,-15))      \n    assert candidate(76, 67) == 42, \"Fifth test error: \" + str(candidate(76, 67))      \n    assert candidate(17, 27) == 49, \"Sixth test error: \" + str(candidate(17, 27))      \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0, 1) == 0, \"1st edge test error: \" + str(candidate(0, 1))\n    assert candidate(0, 0) == 0, \"2nd edge test error: \" + str(candidate(0, 0))\n\n"}
{"task_id": "HumanEval/98", "prompt": "\ndef count_upper(s):\n    \"\"\"\n\u6587\u5b57\u5217s\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u306e\u6dfb\u5b57\u306b\u304a\u3051\u308b\u5927\u6587\u5b57\u306e\u6bcd\u97f3\u306e\u6570\u3092\u6570\u3048\u308b\u3002\n\nFor example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n", "entry_point": "count_upper", "canonical_solution": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('aBCdEf')  == 1\n    assert candidate('abcdefg') == 0\n    assert candidate('dBBE') == 0\n    assert candidate('B')  == 0\n    assert candidate('U')  == 1\n    assert candidate('') == 0\n    assert candidate('EEEE') == 2\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/99", "prompt": "\ndef closest_integer(value):\n    '''\n\u6570\u5024\u3092\u8868\u3059\u5024(\u6587\u5b57\u5217)\u3092\u53d6\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u305d\u3057\u3066\u3001\u6700\u3082\u8fd1\u3044\u6574\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\u6570\u304c\u7b49\u8ddd\u96e2\u3067\u3042\u308c\u3070\n2\u3064\u306e\u6574\u6570\u304b\u3089\u3001\u30bc\u30ed\u304b\u3089\u4e38\u3081\u307e\u3059\u3002\n\nExamples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n", "entry_point": "closest_integer", "canonical_solution": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"10\") == 10, \"Test 1\"\n    assert candidate(\"14.5\") == 15, \"Test 2\"\n    assert candidate(\"-15.5\") == -16, \"Test 3\"\n    assert candidate(\"15.3\") == 15, \"Test 3\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"0\") == 0, \"Test 0\"\n\n"}
{"task_id": "HumanEval/100", "prompt": "\ndef make_a_pile(n):\n    \"\"\"\n\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001n\u30ec\u30d9\u30eb\u306e\u77f3\u306e\u5c71\u3092\u4f5c\u3089\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u6700\u521d\u306e\u30ec\u30d9\u30eb\u306b\u306fn\u500b\u306e\u77f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u6b21\u306e\u30ec\u30d9\u30eb\u306e\u77f3\u306e\u6570\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n- n\u304c\u5947\u6570\u306e\u3068\u304d\u306e\u6b21\u306e\u5947\u6570\u3002\n- n\u304c\u5076\u6570\u306e\u5834\u5408\u3001\u6b21\u306e\u5076\u6570\u3002\n\u30ea\u30b9\u30c8\u5185\u306e\u5404\u30ec\u30d9\u30eb\u306e\u77f3\u306e\u6570\u3092\u8fd4\u3057\u307e\u3059\ni\u306f\u30ec\u30d9\u30eb(i+1)\u5185\u306e\u77f3\u306e\u6570\u3092\u8868\u3057\u307e\u3059\u3002\n\nExamples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n", "entry_point": "make_a_pile", "canonical_solution": "    return [n + 2*i for i in range(n)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3) == [3, 5, 7], \"Test 3\"\n    assert candidate(4) == [4,6,8,10], \"Test 4\"\n    assert candidate(5) == [5, 7, 9, 11, 13]\n    assert candidate(6) == [6, 8, 10, 12, 14, 16]\n    assert candidate(8) == [8, 10, 12, 14, 16, 18, 20, 22]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/101", "prompt": "\ndef words_string(s):\n    \"\"\"\n\u30b3\u30f3\u30de\u307e\u305f\u306f\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u6587\u5b57\u5217\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u8ab2\u984c\u306f\u68da\n\u6587\u5b57\u5217\u3092\u5358\u8a9e\u306b\u5206\u5272\u3057\u3001\u5358\u8a9e\u306e\u914d\u5217\u3092\u8fd4\u3059\u3002\n\nFor example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n", "entry_point": "words_string", "canonical_solution": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    assert candidate(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    assert candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n    assert candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(\"\") == []\n    assert candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n\n"}
{"task_id": "HumanEval/102", "prompt": "\ndef choose_num(x, y):\n    \"\"\"\u3053\u306e\u95a2\u6570\u306f\u30012\u3064\u306e\u6b63\u306e\u6570x\u3068y\u3092\u53d6\u308a\u3001\u623b\u308a\u5024\u3092\u8fd4\u3057\u307e\u3059\n[x, y]\u3092\u542b\u3080\u7bc4\u56f2\u306e\u6700\u5927\u306e\u5076\u6570\u6574\u6570\u3002\u306a\u3089\n\u3053\u306e\u3088\u3046\u306a\u6570\u5024\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u95a2\u6570\u306f-1\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nFor example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n", "entry_point": "choose_num", "canonical_solution": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(12, 15) == 14\n    assert candidate(13, 12) == -1\n    assert candidate(33, 12354) == 12354\n    assert candidate(5234, 5233) == -1\n    assert candidate(6, 29) == 28\n    assert candidate(27, 10) == -1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 7) == -1\n    assert candidate(546, 546) == 546\n\n"}
{"task_id": "HumanEval/103", "prompt": "\ndef rounded_avg(n, m):\n    \"\"\"2\u3064\u306e\u6b63\u306e\u6574\u6570n\u3068m\u304c\u4e0e\u3048\u3089\u308c\u3001\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\nn\u304b\u3089m\u307e\u3067\u306e\u6574\u6570\u306e\u5e73\u5747(n\u3068m\u3092\u542b\u3080)\u3002\n\u7b54\u3048\u3092\u6700\u3082\u8fd1\u3044\u6574\u6570\u306b\u4e38\u3081\u3001\u305d\u308c\u30922\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3002\nn\u304cm\u3088\u308a\u5927\u304d\u3044\u5834\u5408\u306f-1\u3092\u8fd4\u3057\u307e\u3059\u3002\nExample:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n", "entry_point": "rounded_avg", "canonical_solution": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 5) == \"0b11\"\n    assert candidate(7, 13) == \"0b1010\"\n    assert candidate(964,977) == \"0b1111001010\"\n    assert candidate(996,997) == \"0b1111100100\"\n    assert candidate(560,851) == \"0b1011000010\"\n    assert candidate(185,546) == \"0b101101110\"\n    assert candidate(362,496) == \"0b110101101\"\n    assert candidate(350,902) == \"0b1001110010\"\n    assert candidate(197,233) == \"0b11010111\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == \"0b101\"\n\n"}
{"task_id": "HumanEval/104", "prompt": "\ndef unique_digits(x):\n    \"\"\"\u6b63\u306e\u6574\u6570x\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\u30bd\u30fc\u30c8\u3055\u308c\u305f\u3059\u3079\u3066\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\n\u5076\u6570\u6841\u3092\u6301\u305f\u306a\u3044\u8981\u7d20\u3002\n\n\u6ce8\u610f:\u8fd4\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306f\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nFor example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n", "entry_point": "unique_digits", "canonical_solution": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([15, 33, 1422, 1]) == [1, 15, 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345, 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/105", "prompt": "\ndef by_length(arr):\n    \"\"\"\n\u6574\u6570\u306e\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u30011\u304b\u30899\u307e\u3067\u306e\u6574\u6570\u3092\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\u7d50\u679c\u306e\u914d\u5217\u3092\u9006\u306b\u3057\u3066\u3001\u5404\u6570\u5b57\u3092\u5bfe\u5fdc\u3059\u308b\u540d\u524d\u306e\u5143\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\n\u300c\u4e00\u4e8c\u300d\u300c\u300f\u300e\u4e09\u300d\u3001\u300c4\u300d\u300c5\u300d\u3001\u300c6\u300d\u300c7\u300d\u300c\u516b\u300d\u3001\u300c\u4e5d\u300d\u3002\n\nFor example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n", "entry_point": "by_length", "canonical_solution": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"], \"Error\"\n    assert candidate([]) == [], \"Error\"\n    assert candidate([1, -1 , 55]) == ['One'], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([1, -1, 3, 2]) == [\"Three\", \"Two\", \"One\"]\n    assert candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"]\n\n"}
{"task_id": "HumanEval/106", "prompt": "\ndef f(n):\n    \"\"\"n\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3059\u308b\u95a2\u6570f\u3092\u5b9f\u88c5\u3059\u308b\n\u307e\u305f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i\u306e\u8981\u7d20\u306e\u5024\u304c\u5076\u6570\u306e\u5834\u5408\u306b\u306fi\u306e\u968e\u4e57\u3068\u306a\u308b\u3088\u3046\u306a\u30b5\u30a4\u30ban\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\n\u305d\u3046\u3067\u306a\u3051\u308c\u30701\u304b\u3089i\u307e\u3067\u306e\u6570\u306e\u548c\u3067\u3059\n\u79c1\u306f1\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\ni\u306e\u968e\u4e57\u306f\u30011\u304b\u3089i(1 * 2 *\u2026)\u3078\u306e\u6570\u306e\u4e57\u7b97\u3067\u3042\u308b\u3002* i)\u3002\nExample:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n", "entry_point": "f", "canonical_solution": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "test": "def check(candidate):\n\n    assert candidate(5) == [1, 2, 6, 24, 15]\n    assert candidate(7) == [1, 2, 6, 24, 15, 720, 28]\n    assert candidate(1) == [1]\n    assert candidate(3) == [1, 2, 6]\n"}
{"task_id": "HumanEval/107", "prompt": "\ndef even_odd_palindrome(n):\n    \"\"\"\n\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u3068\u5947\u6570\u306e\u6570\u3092\u6301\u3064\u30bf\u30d7\u30eb\u3092\u8fd4\u3059\n\u7bc4\u56f2\u5185\u306b\u53ce\u307e\u308b\u6574\u6570\u56de\u6587(1,n),\u5305\u542b\u3002\n\nExample 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n", "entry_point": "even_odd_palindrome", "canonical_solution": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(123) == (8, 13)\n    assert candidate(12) == (4, 6)\n    assert candidate(3) == (1, 2)\n    assert candidate(63) == (6, 8)\n    assert candidate(25) == (5, 6)\n    assert candidate(19) == (4, 6)\n    assert candidate(9) == (4, 5), \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == (0, 1), \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/108", "prompt": "\ndef count_nums(arr):\n    \"\"\"\n\u95a2\u6570count_nums\u3092\u66f8\u304f\u3002\u3053\u308c\u306f\u6574\u6570\u306e\u914d\u5217\u3092\u53d6\u3063\u3066\u8fd4\u3059\n\u7d04\u6570\u306e\u548c\u306f0\u3067\u3042\u308b\u3002\n\u6570\u304c\u8ca0\u306e\u5834\u5408\u3001\u305d\u306e\u6700\u521d\u306e\u7b26\u53f7\u4ed8\u304d\u30c7\u30a3\u30b8\u30c3\u30c8\u306f\u8ca0\u306b\u306a\u308a\u307e\u3059:\n\u4f8b:-123\u306f\u7b26\u53f7\u4ed8\u304d\u6570\u5b57-1,2,3\u3092\u6301\u3064\u3002\n>>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n", "entry_point": "count_nums", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0\n    assert candidate([-1, -2, 0]) == 0\n    assert candidate([1, 1, 2, -2, 3, 4, 5]) == 6\n    assert candidate([1, 6, 9, -6, 0, 1, 5]) == 5\n    assert candidate([1, 100, 98, -7, 1, -1]) == 4\n    assert candidate([12, 23, 34, -45, -56, 0]) == 5\n    assert candidate([-0, 1**0]) == 1\n    assert candidate([1]) == 1\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/109", "prompt": "\ndef move_one_ball(arr):\n    \"\"\"n\u500b\u306e\u6574\u6570\u304b\u3089\u306a\u308b'arr'\u914d\u5217arr[1], arr[2],\u2026\u300c\u30a6\u30a9\u30fc\u30c3\u6050\u3044\u305e\u30fc[N]\u3002\u306e\n\u914d\u5217\u5185\u306e\u6570\u5b57\u306f\u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3079\u3089\u308c\u307e\u3059\u3002\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u3053\u3068\u3067\u3059\n\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u975e\u964d\u9806\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u914d\u5217\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u306b\u5bfe\u3059\u308b\u6b21\u306e\u64cd\u4f5c:\n\u53f3\u30b7\u30d5\u30c8\u64cd\u4f5c\u306f\u4f55\u56de\u3067\u3082\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u53f3\u30b7\u30d5\u30c8\u64cd\u4f5c\u306f\u3001\u914d\u5217\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u30921\u3064\u305a\u3064\u30b7\u30d5\u30c8\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\n\u6b63\u3057\u3044\u65b9\u5411\u306b\u914d\u7f6e\u3059\u308b\u3002\u914d\u5217\u306e\u6700\u5f8c\u306e\u8981\u7d20\u304c\u79fb\u52d5\u3055\u308c\u307e\u3059\n\u914d\u5217\u306e\u958b\u59cb\u4f4d\u7f6e\u3001\u3059\u306a\u308f\u30610\u756a\u76ee\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3002\n\n\u4e0a\u8a18\u306e\u64cd\u4f5c\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u914d\u5217\u304c\u5f97\u3089\u308c\u308b\u5834\u5408\n\u305d\u306e\u5f8ctrue\u3092\u8fd4\u3057\u307e\u3059\u3002else\u306ffalse\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u304c\u7a7a\u306e\u5834\u5408\u3001true\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u6ce8\u610f:\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u306f\u4e00\u610f\u306e\u8981\u7d20\u3092\u6301\u3064\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nFor Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n", "entry_point": "move_one_ball", "canonical_solution": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([3, 4, 5, 1, 2])==True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([3, 5, 10, 1, 2])==True\n    assert candidate([4, 3, 1, 2])==False\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([3, 5, 4, 1, 2])==False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([])==True\n"}
{"task_id": "HumanEval/110", "prompt": "\ndef exchange(lst1, lst2):\n    \"\"\"\u3053\u306e\u554f\u984c\u3067\u306f2\u3064\u306e\u6570\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3059\n\u305d\u3057\u3066\u3001\u8981\u7d20\u306e\u4ea4\u63db\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3057\u307e\u3059\n\u3053\u308c\u3089\u306e\u9593\u3067lst1\u3092\u5076\u6570\u3060\u3051\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\u3002\nlst1\u3068lst2\u3068\u306e\u9593\u3067\u4ea4\u63db\u3055\u308c\u308b\u8981\u7d20\u306e\u6570\u306b\u306f\u5236\u9650\u306f\u306a\u3044\u3002\nlst1\u3068lst2\u306e\u9593\u3067\u8981\u7d20\u3092\u4ea4\u63db\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308c\u3070\u4f5c\u308b\nlst1\u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u5076\u6570\u306b\u306a\u308b\u3068\" yes \"\u3092\u8fd4\u3059\u3002\nNO\u30bd\u30ec\u30c7\u30cf\u3001\u5fa9\u5e30\u300d\u3067\u3042\u308b\u3002\nFor example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n", "entry_point": "exchange", "canonical_solution": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 2, 3, 4], [1, 2, 3, 4]) == \"YES\"\n    assert candidate([1, 2, 3, 4], [1, 5, 3, 4]) == \"NO\"\n    assert candidate([1, 2, 3, 4], [2, 1, 4, 3]) == \"YES\" \n    assert candidate([5, 7, 3], [2, 6, 4]) == \"YES\"\n    assert candidate([5, 7, 3], [2, 6, 3]) == \"NO\" \n    assert candidate([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) == \"NO\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([100, 200], [200, 200]) == \"YES\"\n\n"}
{"task_id": "HumanEval/111", "prompt": "\ndef histogram(test):\n    \"\"\"\u5c0f\u6587\u5b57\u3067\u533a\u5207\u3089\u308c\u305f\u30b9\u30da\u30fc\u30b9\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u8f9e\u66f8\u3092\u8fd4\u3057\u307e\u3059\n\u6700\u3082\u591a\u304f\u306e\u7e70\u308a\u8fd4\u3057\u3092\u6301\u3064\u6587\u5b57\u306e\u5bfe\u5fdc\u3059\u308b\u30ab\u30a6\u30f3\u30c8\u3092\u542b\u3080\u3002\n\u540c\u3058\u6587\u5b57\u304c\u8907\u6570\u3042\u308b\u5834\u5408\u306f\u3001\u3059\u3079\u3066\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExample:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n", "entry_point": "histogram", "canonical_solution": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('a b b a') == {'a':2,'b': 2}, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('a b c a b') == {'a': 2, 'b': 2}, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate('a b c d g') == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1}, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate('b b b b a') == {'b': 4}, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate('r t g') == {'r': 1,'t': 1,'g': 1}, \"This prints if this assert fails 6 (good for debugging!)\"\n    \n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == {}, \"This prints if this assert fails 7 (also good for debugging!)\"\n    assert candidate('a') == {'a': 1}, \"This prints if this assert fails 8 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/112", "prompt": "\ndef reverse_delete(s,c):\n    \"\"\"\u4efb\u52d9\n2\u3064\u306e\u6587\u5b57\u5217s\u3068c\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001s\u5185\u306e\u3059\u3079\u3066\u306e\u6587\u5b57\u304cc\u5185\u306e\u3044\u305a\u308c\u304b\u306e\u6587\u5b57\u306b\u7b49\u3057\u3044\u3082\u306e\u3092\u524a\u9664\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\n\u6b21\u306b\u3001\u7d50\u679c\u306e\u6587\u5b57\u5217\u304c\u30d1\u30ea\u30f3\u30c9\u30ed\u30fc\u30e0\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u6587\u5b57\u5217\u304c\u524d\u65b9\u3068\u5f8c\u65b9\u3067\u540c\u3058\u3088\u3046\u306b\u8aad\u307f\u53d6\u3089\u308c\u308b\u5834\u5408\u3001\u6587\u5b57\u5217\u306f\u30d1\u30ea\u30f3\u30c9\u30ed\u30fc\u30e0\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\u30c1\u30a7\u30c3\u30af\u306e\u305f\u3081\u306b\u3001\u7d50\u679c\u6587\u5b57\u5217\u3068true / false\u3092\u542b\u3080\u30bf\u30d7\u30eb\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nExample\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n", "entry_point": "reverse_delete", "canonical_solution": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n", "test": "def check(candidate):\n\n    assert candidate(\"abcde\",\"ae\") == ('bcd',False)\n    assert candidate(\"abcdef\", \"b\") == ('acdef',False)\n    assert candidate(\"abcdedcba\",\"ab\") == ('cdedc',True)\n    assert candidate(\"dwik\",\"w\") == ('dik',False)\n    assert candidate(\"a\",\"a\") == ('',True)\n    assert candidate(\"abcdedcba\",\"\") == ('abcdedcba',True)\n    assert candidate(\"abcdedcba\",\"v\") == ('abcdedcba',True)\n    assert candidate(\"vabba\",\"v\") == ('abba',True)\n    assert candidate(\"mamma\", \"mia\") == (\"\", True)\n"}
{"task_id": "HumanEval/113", "prompt": "\ndef odd_count(lst):\n    \"\"\"\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u3001\u5404\u6587\u5b57\u5217\u304c\u6570\u5b57\u306e\u307f\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n\u51fa\u529b\u306e\u5404\u8981\u7d20i\u306f\u300c\u5185\u306e\u5947\u6570\u8981\u7d20\u306e\u6570\u300d\u3067\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\u5165\u529b\u306e\u6587\u5b57\u5217i .\"\u3053\u3053\u3067\u3001\u3059\u3079\u3066\u306ei\u3092\u6570\u5024\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\n\u5165\u529b\u306ei\u756a\u76ee\u306e\u6587\u5b57\u5217\u306e\u5947\u6570\u6841\u3067\u3059\n\n>>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n", "entry_point": "odd_count", "canonical_solution": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['1234567']) == [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"], \"Test 1\"\n    assert candidate(['3',\"11111111\"]) == [\"the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the 8nput.\"], \"Test 2\"\n    assert candidate(['271', '137', '314']) == [\n        'the number of odd elements 2n the str2ng 2 of the 2nput.',\n        'the number of odd elements 3n the str3ng 3 of the 3nput.',\n        'the number of odd elements 2n the str2ng 2 of the 2nput.'\n    ]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/114", "prompt": "\ndef minSubArraySum(nums):\n    \"\"\"\n\u6574\u6570nums\u306e\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u7a7a\u3067\u306a\u3044\u90e8\u5206\u914d\u5217\u306e\u6700\u5c0f\u5408\u8a08\u3092\u6c42\u3081\u308b\nnums\u3002\nExample\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n", "entry_point": "minSubArraySum", "canonical_solution": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 3, 4, 1, 2, 4]) == 1, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1, -2, -3]) == -6\n    assert candidate([-1, -2, -3, 2, -10]) == -14\n    assert candidate([-9999999999999999]) == -9999999999999999\n    assert candidate([0, 10, 20, 1000000]) == 0\n    assert candidate([-1, -2, -3, 10, -5]) == -6\n    assert candidate([100, -1, -2, -3, 10, -5]) == -6\n    assert candidate([10, 11, 13, 8, 3, 4]) == 3\n    assert candidate([100, -33, 32, -1, 0, -2]) == -33\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-10]) == -10, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([7]) == 7\n    assert candidate([1, -1]) == -1\n"}
{"task_id": "HumanEval/115", "prompt": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n\u9577\u65b9\u5f62\u306e\u683c\u5b50\u72b6\u306e\u4e95\u6238\u304c\u3042\u308a\u307e\u3059\u305d\u308c\u305e\u308c\u306e\u5217\u304c1\u3064\u306e\u4e95\u6238\u3092\u8868\u3057\u3066\u3044\u307e\u3059\n\u305d\u3057\u3066\u3001\u884c\u306e\u54041\u306f\u3001\u6c34\u306e\u5358\u4e00\u306e\u5358\u4f4d\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\n\u4e95\u6238\u306b\u306f\u30d0\u30b1\u30c4\u304c\u3042\u308a\u305d\u3053\u304b\u3089\u6c34\u3092\u62bd\u51fa\u3057\u307e\u3059\n\u305d\u3057\u3066\u3001\u3059\u3079\u3066\u306e\u30d0\u30b1\u30c3\u30c8\u306f\u540c\u3058\u5bb9\u91cf\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u30d0\u30b1\u30c4\u3092\u4f7f\u3063\u3066\u4e95\u6238\u3092\u7a7a\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\nbucket\u3092\u524a\u9664\u3059\u308b\u56de\u6570\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\n\nExample 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n", "entry_point": "max_fill", "canonical_solution": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "test": "def check(candidate):\n\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1) == 6, \"Error\"\n    assert candidate([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2) == 5, \"Error\"\n    assert candidate([[0,0,0], [0,0,0]], 5) == 0, \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 2) == 4, \"Error\"\n    assert candidate([[1,1,1,1], [1,1,1,1]], 9) == 2, \"Error\"\n\n"}
{"task_id": "HumanEval/116", "prompt": "\ndef sort_array(arr):\n    \"\"\"\n\u3053\u306e\u578b\u3067\u306f\u3001\u975e\u8ca0\u306e\u6574\u6570\u306e\u914d\u5217\u3092\u306b\u5f93\u3063\u3066\u30bd\u30fc\u30c8\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u30d0\u30a4\u30ca\u30ea\u8868\u73fe\u306e1\u306e\u6570(\u6607\u9806)\u3002\n\u540c\u6570\u306e\u5834\u5408\u306f\u3001\u5c0f\u6570\u3067\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n>>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n", "entry_point": "sort_array", "canonical_solution": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,5,2,3,4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,-3,-4,-5,-6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1,0,2,3,4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,5,77,4,5,3,5,7,2,3,4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,6,44,12,32,5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n    assert candidate([2,4,8,16,32]) == [2, 4, 8, 16, 32]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/117", "prompt": "\ndef select_words(s, n):\n    \"\"\"\u6587\u5b57\u5217s\u3068\u81ea\u7136\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u3042\u306a\u305f\u306f\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3092\u4efb\u3055\u308c\u3066\u3044\u307e\u3059\n\u6587\u5b57\u5217s\u304b\u3089\u6b63\u78ba\u306b\u542b\u307e\u308c\u308b\u3059\u3079\u3066\u306e\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u95a2\u6570\n\u3053\u308c\u3089\u306e\u5358\u8a9e\u304c\u6587\u5b57\u5217s\u306b\u73fe\u308c\u308b\u9806\u756a\u306bn\u500b\u306e\u5b50\u97f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u6587\u5b57\u5217s\u304c\u7a7a\u306e\u5834\u5408\u3001\u95a2\u6570\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6ce8\u610f:\u5165\u529b\u6587\u5b57\u5217\u306b\u306f\u6587\u5b57\u3068\u30b9\u30da\u30fc\u30b9\u306e\u307f\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nExamples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n", "entry_point": "select_words", "canonical_solution": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Mary had a little lamb\", 4) == [\"little\"], \"First test error: \" + str(candidate(\"Mary had a little lamb\", 4))      \n    assert candidate(\"Mary had a little lamb\", 3) == [\"Mary\", \"lamb\"], \"Second test error: \" + str(candidate(\"Mary had a little lamb\", 3))  \n    assert candidate(\"simple white space\", 2) == [], \"Third test error: \" + str(candidate(\"simple white space\", 2))      \n    assert candidate(\"Hello world\", 4) == [\"world\"], \"Fourth test error: \" + str(candidate(\"Hello world\", 4))  \n    assert candidate(\"Uncle sam\", 3) == [\"Uncle\"], \"Fifth test error: \" + str(candidate(\"Uncle sam\", 3))\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"\", 4) == [], \"1st edge test error: \" + str(candidate(\"\", 4))\n    assert candidate(\"a b c d e f\", 1) == [\"b\", \"c\", \"d\", \"f\"], \"2nd edge test error: \" + str(candidate(\"a b c d e f\", 1))\n\n"}
{"task_id": "HumanEval/118", "prompt": "\ndef get_closest_vowel(word):\n    \"\"\"\u8a00\u8449\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u9593\u306b\u7acb\u3064\u6700\u3082\u8fd1\u3044\u6bcd\u97f3\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u3067\u3042\u308b\n2\u3064\u306e\u5b50\u97f3\u306f\u5358\u8a9e\u306e\u53f3\u5074\u306b\u3042\u308b(\u5927\u6587\u5b57\u3068\u5c0f\u6587\u5b57\u306f\u533a\u5225\u3055\u308c\u308b)\u3002\n\n\u6700\u521d\u3068\u6700\u5f8c\u306e\u6bcd\u97f3\u306f\u30ab\u30a6\u30f3\u30c8\u3055\u308c\u307e\u305b\u3093\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u7a7a\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\n\u4e0a\u8a18\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u6bcd\u97f3\u3092\u898b\u3064\u3051\u308b\u3002\n\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306f\u82f1\u5b57\u306e\u307f\u3092\u542b\u3093\u3067\u3044\u308b\u3068\u4eee\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nExample:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n", "entry_point": "get_closest_vowel", "canonical_solution": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"yogurt\") == \"u\"\n    assert candidate(\"full\") == \"u\"\n    assert candidate(\"easy\") == \"\"\n    assert candidate(\"eAsy\") == \"\"\n    assert candidate(\"ali\") == \"\"\n    assert candidate(\"bad\") == \"a\"\n    assert candidate(\"most\") == \"o\"\n    assert candidate(\"ab\") == \"\"\n    assert candidate(\"ba\") == \"\"\n    assert candidate(\"quick\") == \"\"\n    assert candidate(\"anime\") == \"i\"\n    assert candidate(\"Asia\") == \"\"\n    assert candidate(\"Above\") == \"o\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/119", "prompt": "\ndef match_parens(lst):\n    '''\n2\u3064\u306e\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u3001\u3069\u3061\u3089\u306e\u6587\u5b57\u5217\u3082open\u3067\u69cb\u6210\u3055\u308c\u307e\u3059\n\u62ec\u5f27'('\u307e\u305f\u306f\u9589\u3058\u308b\u62ec\u5f27')'\u306e\u307f\u3002\n2\u3064\u306e\u6587\u5b57\u5217\u3092\u9023\u7d50\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3057\u307e\u3059\n\u3044\u304f\u3064\u304b\u306e\u9806\u5e8f\u306f\u3001\u7d50\u679c\u306e\u6587\u5b57\u5217\u304c\u826f\u3044\u3060\u308d\u3046\u3002\n\u6587\u5b57\u5217s\u304c\u826f\u3044\u3068\u898b\u306a\u3055\u308c\u308b\u306e\u306f\u3001s\u5185\u306e\u5168\u3066\u306e\u62ec\u5f27\u304c\u826f\u3044\u3068\u3055\u308c\u308b\u5834\u5408\u3068\u305d\u306e\u5834\u5408\u306e\u307f\u3067\u3042\u308b\n\u306f\u30d0\u30e9\u30f3\u30b9\u304c\u53d6\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u3002\u4f8b\u3048\u3070:\u6587\u5b57\u5217'(())()'\u306f\u826f\u3044\u3067\u3059\u304c\u3001\u6587\u5b57\u5217\n\u300c())\u300d\u3067\u306f\u306a\u3044\u3002\n\u826f\u3044\u6587\u5b57\u5217\u3092\u4f5c\u308b\u65b9\u6cd5\u304c\u3042\u308c\u3070' yes '\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070' no '\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExamples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n", "entry_point": "match_parens", "canonical_solution": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['()(', ')']) == 'Yes'\n    assert candidate([')', ')']) == 'No'\n    assert candidate(['(()(())', '())())']) == 'No'\n    assert candidate([')())', '(()()(']) == 'Yes'\n    assert candidate(['(())))', '(()())((']) == 'Yes'\n    assert candidate(['()', '())']) == 'No'\n    assert candidate(['(()(', '()))()']) == 'Yes'\n    assert candidate(['((((', '((())']) == 'No'\n    assert candidate([')(()', '(()(']) == 'No'\n    assert candidate([')(', ')(']) == 'No'\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(['(', ')']) == 'Yes'\n    assert candidate([')', '(']) == 'Yes' \n\n"}
{"task_id": "HumanEval/120", "prompt": "\ndef maximum(arr, k):\n    \"\"\"\n\u6574\u6570\u306e\u914d\u5217arr\u3068\u6b63\u306e\u6574\u6570k\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\narr\u5185\u306e\u6700\u5927k\u500b\u306e\u6570\u3092\u6301\u3064\u9577\u3055k\u3067\u3059\u3002\n\nExample 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n", "entry_point": "maximum", "canonical_solution": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0 , 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0 , 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\n"}
{"task_id": "HumanEval/121", "prompt": "\ndef solution(lst):\n    \"\"\"\u6574\u6570\u306e\u7a7a\u3067\u306a\u3044\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5076\u6570\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u3059\u3079\u3066\u306e\u5947\u6570\u306e\u8981\u7d20\u306e\u548c\u3092\u8fd4\u3059\u3002\n\n\nExamples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n", "entry_point": "solution", "canonical_solution": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, 8, 7, 1])    == 12\n    assert candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n    # Check some edge cases that are easy to work out by hand.\n\n"}
{"task_id": "HumanEval/122", "prompt": "\ndef add_elements(arr, k):\n    \"\"\"\n\u6574\u6570arr\u3068\u6574\u6570k\u306e\u7a7a\u3067\u306a\u3044\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001return\u3092\u8fd4\u3057\u307e\u3059\narr\u306e\u6700\u521d\u306ek\u500b\u306e\u8981\u7d20\u306e\u3046\u3061\u3001\u6700\u59272\u6841\u306e\u8981\u7d20\u306e\u548c\u3002\n\nExample:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n", "entry_point": "add_elements", "canonical_solution": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,-2,-3,41,57,76,87,88,99], 3) == -4\n    assert candidate([111,121,3,4000,5,6], 2) == 0\n    assert candidate([11,21,3,90,5,6,7,8,9], 4) == 125\n    assert candidate([111,21,3,4000,5,6,7,8,9], 4) == 24, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1], 1) == 1, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/123", "prompt": "\ndef get_odd_collatz(n):\n    \"\"\"\n\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001collatz\u5217\u306b\u5947\u6570\u3092\u542b\u3080\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002\n\n\u30b3\u30e9\u30c3\u30c4\u4e88\u60f3(collatz conjecture)\u306f\u3001\u5b9a\u7fa9\u3055\u308c\u305f\u5217\u306b\u95a2\u3059\u308b\u6570\u5b66\u306e\u4e88\u60f3\u3067\u3042\u308b\n\u6b21\u306e\u3088\u3046\u306b:\u4efb\u610f\u306e\u6b63\u306e\u6574\u6570n\u304b\u3089\u958b\u59cb\u3057\u3001\u5404\u9805\u304b\u3089\u5f97\u3089\u308c\u308b\n\u524d\u671f\u306f\u6b21\u306e\u901a\u308a:\u524d\u671f\u304c\u5076\u6570\u306e\u5834\u5408\u306f\u3001\u6b21\u306e\u534a\u5206\u3067\u3059\n\u5f93\u6765\u306e\u7528\u8a9e\u3002\u524d\u306e\u5b66\u671f\u304c\u5947\u6570\u306a\u3089\u3070\u3001\u6b21\u306e\u5b66\u671f\u306f\u524d\u306e\u5b66\u671f\u306e3\u500d\u306b\u306a\u308b\n1\u3002\u3053\u306e\u4e88\u60f3\u306f\u3001n\u306e\u5024\u304c\u4f55\u3067\u3042\u308c\u3001\u5217\u306f\u5e38\u306b1\u306b\u9054\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3042\u308b\u3002\n\n\u6ce8:\n1. Collatz\u2460[1]\u3002\n2. \u8fd4\u3055\u308c\u305f\u30ea\u30b9\u30c8\u306f\u6607\u9806\u306b\u30bd\u30fc\u30c8\u3055\u308c\u307e\u3059\u3002\n\nFor example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n", "entry_point": "get_odd_collatz", "canonical_solution": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(14) == [1, 5, 7, 11, 13, 17]\n    assert candidate(5) == [1, 5]\n    assert candidate(12) == [1, 3, 5], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == [1], \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/124", "prompt": "\ndef valid_date(date):\n    \"\"\"\u3042\u306a\u305f\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u65e5\u4ed8\u6587\u5b57\u5217\u3068\u3092\u691c\u8a3c\u3059\u308b\u95a2\u6570\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\n\u65e5\u4ed8\u304c\u6709\u52b9\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u65e5\u4ed8\u306f\u3001\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306e\u3059\u3079\u3066\u3092\u6e80\u305f\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u6709\u52b9\u3067\u3059\u3002\n1. \u65e5\u4ed8\u6587\u5b57\u5217\u306f\u7a7a\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n2. 1,3,5,7,8,10,12\u6708\u306e\u65e5\u6570\u306f1\u65e5\u4ee5\u4e0a31\u65e5\u4ee5\u4e0a\u3068\u3059\u308b\u3002\u307e\u305f\u30014,6,9,11\u6708\u306f1\u65e5\u4ee5\u4e0a30\u65e5\u4ee5\u4e0a\u306e\u65e5\u6570\u3068\u3059\u308b\u3002\u305d\u3057\u3066\u3001\u6708\u306e\u65e5\u6570\u306f1\u65e5\u4ee5\u4e0a29\u65e5\u4ee5\u4e0a2\u3002\n3. \u6708\u306f1\u3092\u4e0b\u56de\u3063\u305f\u308a12\u3092\u4e0a\u56de\u3063\u305f\u308a\u3057\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n4. \u65e5\u4ed8\u306fmm-dd-yyyy\u306e\u5f62\u5f0f\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\nfor example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n", "entry_point": "valid_date", "canonical_solution": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('03-11-2000') == True\n\n    assert candidate('15-01-2012') == False\n\n    assert candidate('04-0-2040') == False\n\n    assert candidate('06-04-2020') == True\n\n    assert candidate('01-01-2007') == True\n\n    assert candidate('03-32-2011') == False\n\n    assert candidate('') == False\n\n    assert candidate('04-31-3000') == False\n\n    assert candidate('06-06-2005') == True\n\n    assert candidate('21-31-2000') == False\n\n    assert candidate('04-12-2003') == True\n\n    assert candidate('04122003') == False\n\n    assert candidate('20030412') == False\n\n    assert candidate('2003-04') == False\n\n    assert candidate('2003-04-12') == False\n\n    assert candidate('04-2003') == False\n"}
{"task_id": "HumanEval/125", "prompt": "\ndef split_words(txt):\n    '''\n\u5358\u8a9e\u306e\u6587\u5b57\u5217\u304c\u6307\u5b9a\u3055\u308c\u305f\u5834\u5408\u3001\u30c6\u30ad\u30b9\u30c8\u4e2d\u306b\u7a7a\u767d\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u7a7a\u767d\u3067\u5206\u5272\u3055\u308c\u305f\u5358\u8a9e\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\n\u30ab\u30f3\u30de\u3067\u5206\u5272\u3059\u3079\u304d','\u30ab\u30f3\u30de\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u5947\u6570\u306e\u9806\u5e8f\u3067\u5c0f\u6587\u5b57\u306e\u6570\u3092\u8fd4\u3059\u3079\u304d\u3067\u3059\u304b\n\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8,ord('a') = 0, ord('b') = 1,\u2026\u6570\u30ad\u30ed(\u300cz\u300d)= 25\nExamples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n", "entry_point": "split_words", "canonical_solution": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n", "test": "def check(candidate):\n\n    assert candidate(\"Hello world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello,world!\") == [\"Hello\",\"world!\"]\n    assert candidate(\"Hello world,!\") == [\"Hello\",\"world,!\"]\n    assert candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\",\"!\"]\n    assert candidate(\"abcdef\") == 3\n    assert candidate(\"aaabb\") == 2\n    assert candidate(\"aaaBb\") == 1\n    assert candidate(\"\") == 0\n"}
{"task_id": "HumanEval/126", "prompt": "\ndef is_sorted(lst):\n    '''\n\u6570\u5024\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u30bd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u8fd4\u3057\u307e\u3059\n\u6607\u9806\u306b\u3002list\u306b\u540c\u3058\u3082\u306e\u304c1\u3064\u4ee5\u4e0a\u3042\u308b\u5834\u5408\n\u6570\u3059\u308b\u3068\u3001\u507d\u623b\u308b\u3002\u8ca0\u306e\u6570\u306f\u306a\u304f\u3001\u6574\u6570\u306e\u307f\u3092\u4eee\u5b9a\u3059\u308b\u3002\n\nExamples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n", "entry_point": "is_sorted", "canonical_solution": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5]) == True\n    assert candidate([1, 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6, 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([]) == True, \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([1]) == True, \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([3, 2, 1]) == False, \"This prints if this assert fails 4 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1, 2, 2, 2, 3, 4]) == False, \"This prints if this assert fails 5 (good for debugging!)\"\n    assert candidate([1, 2, 3, 3, 3, 4]) == False, \"This prints if this assert fails 6 (good for debugging!)\"\n    assert candidate([1, 2, 2, 3, 3, 4]) == True, \"This prints if this assert fails 7 (good for debugging!)\"\n    assert candidate([1, 2, 3, 4]) == True, \"This prints if this assert fails 8 (good for debugging!)\"\n\n"}
{"task_id": "HumanEval/127", "prompt": "\ndef intersection(interval1, interval2):\n    \"\"\"2\u3064\u306e\u97f3\u7a0b\u304c\u3042\u308a\u307e\u3059\n\u5404\u533a\u9593\u306f\u6574\u6570\u306e\u30da\u30a2\u3067\u3059\u3002For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n", "entry_point": "intersection", "canonical_solution": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate((1, 2), (2, 3)) == \"NO\"\n    assert candidate((-1, 1), (0, 4)) == \"NO\"\n    assert candidate((-3, -1), (-5, 5)) == \"YES\"\n    assert candidate((-2, 2), (-4, 0)) == \"YES\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate((-11, 2), (-1, -1)) == \"NO\"\n    assert candidate((1, 2), (3, 5)) == \"NO\"\n    assert candidate((1, 2), (1, 2)) == \"NO\"\n    assert candidate((-2, -2), (-3, -2)) == \"NO\"\n\n"}
{"task_id": "HumanEval/128", "prompt": "\ndef prod_signs(arr):\n    \"\"\"\n\u6574\u6570\u306earr\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u548c\u306e\u5927\u304d\u3055\u306e\u6574\u6570\u500d\u306e\u88fd\u54c1\u306e\u3059\u3079\u3066\u306e\u5146\u5019\n1\u3001-1\u3001\u307e\u305f\u306f0\u3067\u8868\u3055\u308c\u308b\u914d\u5217\u5185\u306e\u5404\u6570\u5024\u306e\u3002\n\u6ce8\u610f:\u7a7a\u306earr\u306b\u5bfe\u3057\u3066\u306fnone\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExample:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n", "entry_point": "prod_signs", "canonical_solution": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1, 2, 2, -4]) == -9\n    assert candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n    assert candidate([]) == None\n    assert candidate([2, 4,1, 2, -1, -1, 9]) == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1, 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/129", "prompt": "\ndef minPath(grid, k):\n    \"\"\"\nn\u884cn\u5217\u306e\u30e1\u30c3\u30b7\u30e5(n >= 2)\u304a\u3088\u3073\u6b63\u306e\u6574\u6570k\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001\n\u30b0\u30ea\u30c3\u30c9\u306e\u5404\u30bb\u30eb\u306b\u306f\u5024\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002[1, n * n]\u306e\u7bc4\u56f2\u306e\u3059\u3079\u3066\u306e\u6574\u6570\n\u30b0\u30ea\u30c3\u30c9\u306e\u30bb\u30eb\u306b1\u56de\u3060\u3051\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u683c\u5b50\u306e\u4e2d\u306b\u9577\u3055k\u306e\u6700\u5c0f\u7d4c\u8def\u3092\u898b\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u59cb\u3081\n\u305d\u308c\u305e\u308c\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u96a3\u306e\u3069\u306e\u7d30\u80de\u306b\u3082\u79fb\u52d5\u3067\u304d\u307e\u3059\n\u3064\u307e\u308a\u3001\u73fe\u5728\u306e\u30a8\u30c3\u30b8\u3092\u5171\u6709\u3059\u308b\u30bb\u30eb\u306b\u884c\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\n\u7d30\u80de\u3067\u3059\n\u9577\u3055k\u306e\u7d4c\u8def\u306f\u3001\u6b63\u78ba\u306bk\u500b\u306e\u30bb\u30eb\u3092\u8a2a\u554f\u3059\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059(\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u305b\u3093)\n\u5fc5\u305a\u3057\u3082\u306f\u3063\u304d\u308a)\u3002\n\u30b0\u30ea\u30c3\u30c9\u304b\u3089\u5916\u308c\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u3002\n(\u9577\u3055k\u306e)\u7d4c\u8defa\u306f\u3001(\u9577\u3055k\u306e)\u7d4c\u8defb\u3088\u308a\u3082\u5c0f\u3055\u3044\u3068\u8003\u3048\u3089\u308c\u308b\na\u3068b\u304c\u884c\u304f\u30bb\u30eb\u4e0a\u306e\u5024\u306e\u9806\u5e8f\u4ed8\u304d\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u305f\u5f8c\n(lst_ a\u3068lst_ b\u3068\u547c\u3076\u3053\u3068\u306b\u3057\u307e\u3057\u3087\u3046)\u306b\u3088\u3063\u3066\u3001lst_ a\u306f\u8f9e\u66f8\u7684\u306b\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\nlst_ b\u3088\u308a\u3082\u3001\u8a00\u3044\u63db\u3048\u308b\u3068\u3001\u6574\u6570\u30a4\u30f3\u30c7\u30c3\u30af\u30b9i (1 <= i <= k)\u304c\u5b58\u5728\u3059\u308b\u3002\nlst_ a [i] < lst_ b [i]\u304a\u3088\u3073\u4efb\u610f\u306ej (1 <= j < i)\u306b\u5bfe\u3057\u3066\u5f97\u3089\u308c\u308b\nlst_A [j] = lst_B [j]\u3002\n\u7b54\u3048\u304c\u4e00\u610f\u3067\u3042\u308b\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u6700\u5c0f\u30d1\u30b9\u304c\u901a\u308b\u30bb\u30eb\u306e\u5024\u306e\u9806\u5e8f\u4ed8\u304d\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExamples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n", "entry_point": "minPath", "canonical_solution": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    print\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 1]\n    assert candidate([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1) == [1]\n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 4) == [1, 2, 1, 2]\n    assert candidate([[6, 4, 13, 10], [5, 7, 12, 1], [3, 16, 11, 15], [8, 14, 9, 2]], 7) == [1, 10, 1, 10, 1, 10, 1]\n    assert candidate([[8, 14, 9, 2], [6, 4, 13, 15], [5, 7, 1, 12], [3, 10, 11, 16]], 5) == [1, 7, 1, 7, 1]\n    assert candidate([[11, 8, 7, 2], [5, 16, 14, 4], [9, 3, 15, 6], [12, 13, 10, 1]], 9) == [1, 6, 1, 6, 1, 6, 1, 6, 1]\n    assert candidate([[12, 13, 10, 1], [9, 3, 15, 6], [5, 16, 14, 4], [11, 8, 7, 2]], 12) == [1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6]\n    assert candidate([[2, 7, 4], [3, 1, 5], [6, 8, 9]], 8) == [1, 3, 1, 3, 1, 3, 1, 3]\n    assert candidate([[6, 1, 5], [3, 8, 9], [2, 7, 4]], 8) == [1, 5, 1, 5, 1, 5, 1, 5]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([[1, 2], [3, 4]], 10) == [1, 2, 1, 2, 1, 2, 1, 2, 1, 2]\n    assert candidate([[1, 3], [3, 2]], 10) == [1, 3, 1, 3, 1, 3, 1, 3, 1, 3]\n\n"}
{"task_id": "HumanEval/130", "prompt": "\ndef tri(n):\n    \"\"\"\u8ab0\u3082\u304c\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u77e5\u3063\u3066\u3044\u308b\u3001\u305d\u308c\u306f\u6570\u5b66\u8005\u306b\u3088\u3063\u3066\u6df1\u304f\u7814\u7a76\u3055\u308c\u307e\u3057\u305f\n\u6570\u4e16\u7d00\u524d\u306e\u3053\u3068\u3067\u3059\u3057\u304b\u3057\u3001\u77e5\u3089\u308c\u3066\u3044\u306a\u3044\u306e\u306f\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3067\u3059\u3002\n\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306f\u6f38\u5316\u5f0f\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u3002\ntri (1) = 3\nn\u304c\u5076\u6570\u306e\u3068\u304dtri(n) = 1 + n / 2\u3067\u3042\u308b\u3002\ntri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1)\u3002\n\u4f8b\u3048\u3070:\n(2) = 1 +(2 / 2) = 2\u3067\u3042\u308b\ntri (4) = 3\ntri(3) = tri(2) + tri(1) + tri(4)\n2 + 3 + 3 = 8\u3067\u3042\u308b\n\u975e\u8ca0\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u3001\u30ea\u30b9\u30c8\u3092\u8fd4\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\u30c8\u30ea\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u306e\u6700\u521d\u306en + 1\u500b\u306e\u6570\u3002\nExamples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n", "entry_point": "tri", "canonical_solution": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0, 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n"}
{"task_id": "HumanEval/131", "prompt": "\ndef digits(n):\n    \"\"\"\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u5947\u6570\u6841\u306e\u7a4d\u3092\u8fd4\u3059\u3002\n\u3059\u3079\u3066\u306e\u6841\u304c\u5076\u6570\u306e\u5834\u5408\u306f0\u3092\u8fd4\u3059\u3002\nFor example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n", "entry_point": "digits", "canonical_solution": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(5) == 5\n    assert candidate(54) == 5\n    assert candidate(120) ==1\n    assert candidate(5014) == 5\n    assert candidate(98765) == 315\n    assert candidate(5576543) == 2625\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(2468) == 0\n\n"}
{"task_id": "HumanEval/132", "prompt": "\ndef is_nested(string):\n    '''\n\u89d2\u62ec\u5f27\u306e\u307f\u3092\u542b\u3080\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u59a5\u5f53\u306a\u304b\u3063\u3053\u306e\u30b5\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u3042\u308b\u5834\u5408\u306b\u306e\u307ftrue\u3092\u8fd4\u3057\u307e\u3059\n\u30b5\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u5185\u306e\u5c11\u306a\u304f\u3068\u30821\u3064\u306e\u30d6\u30e9\u30b1\u30c3\u30c8\u304c\u5165\u308c\u5b50\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nis_nested(\u300c[[\u30a4\u30f3\u30bf\u30fc\u30db\u30f3]]\u300c)\u279e\u672c\u5f53\nis_nested ('[]]]]]]][[[[[]') \u279e\u507d\nis_nested(\u300c[\u30a4\u30f3\u30bf\u30fc\u30db\u30f3][\u30a4\u30f3\u30bf\u30fc\u30db\u30f3]\u300d)\u279e\u507d\nis_nested(\u300c[\u30a4\u30f3\u30bf\u30fc\u30db\u30f3]\u300d)\u279e\u507d\nis_nested ('[[][]]') \u279e\u672c\u5f53\nis_nested ('[[]][[') \u279e\u672c\u5f53\n'''\n", "entry_point": "is_nested", "canonical_solution": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('[[]]') == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate('[]]]]]]][[[[[]') == False\n    assert candidate('[][]') == False\n    assert candidate(('[]')) == False\n    assert candidate('[[[[]]]]') == True\n    assert candidate('[]]]]]]]]]]') == False\n    assert candidate('[][][[]]') == True\n    assert candidate('[[]') == False\n    assert candidate('[]]') == False\n    assert candidate('[[]][[') == True\n    assert candidate('[[][]]') == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('') == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate('[[[[[[[[') == False\n    assert candidate(']]]]]]]]') == False\n\n"}
{"task_id": "HumanEval/133", "prompt": "\n\ndef sum_squares(lst):\n    \"\"\"\u6570\u5b57\u306e\u30ea\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u306e2\u4e57\u306e\u548c\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u30ea\u30b9\u30c8\u5185\u306e\u5404\u8981\u7d20\u3092\u6700\u521d\u306b\u4e0a\u306eint(ceiling)\u306b\u4e38\u3081\u308b\u3002\nExamples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n", "entry_point": "sum_squares", "canonical_solution": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.0,2,3])==14, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,3,5,7])==84, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1.4,4.2,0])==29, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-2.4,1,1])==6, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    assert candidate([100,1,15,2])==10230, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([10000,10000])==200000000, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,4.6,6.3])==75, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([-1.4,17.9,18.9,19.9])==1086, \"This prints if this assert fails 1 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([0])==0, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1])==1, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate([-1,1,0])==2, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/134", "prompt": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n\u6700\u5f8c\u306e\u6587\u5b57\u3067\u3042\u308c\u3070true\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u5b57\u5217\u306e\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u6587\u5b57\u3067\u3042\u308a\u3001\u305d\u3046\u3067\u306f\u3042\u308a\u307e\u305b\u3093\n\u5358\u8a9e\u306e\u4e00\u90e8\u3067\u3042\u308a\u3001\u305d\u308c\u4ee5\u5916\u306f\u507d\u3067\u3059\u3002\n\u6ce8\u610f:\u300c\u5358\u8a9e\u300d\u306f\u30b9\u30da\u30fc\u30b9\u3067\u533a\u5207\u3089\u308c\u305f\u6587\u5b57\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3059\u3002\n\nExamples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n", "entry_point": "check_if_last_char_is_a_letter", "canonical_solution": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"apple\") == False\n    assert candidate(\"apple pi e\") == True\n    assert candidate(\"eeeee\") == False\n    assert candidate(\"A\") == True\n    assert candidate(\"Pumpkin pie \") == False\n    assert candidate(\"Pumpkin pie 1\") == False\n    assert candidate(\"\") == False\n    assert candidate(\"eeeee e \") == False\n    assert candidate(\"apple pie\") == False\n    assert candidate(\"apple pi e \") == False\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/135", "prompt": "\ndef can_arrange(arr):\n    \"\"\"\u8981\u7d20\u306e\u6700\u5927\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u76f4\u524d\u306e\u8981\u7d20\u3088\u308a\u5927\u304d\u304f\u3082\u7b49\u3057\u304f\u3082\u3042\u308a\u307e\u305b\u3093\u306a\u3089\n\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f-1\u3092\u8fd4\u3059\u3002\u6307\u5b9a\u3055\u308c\u305f\u914d\u5217\u306f\u542b\u307e\u308c\u307e\u305b\u3093\n\u526f\u672c\u5024\u3002\n\nExamples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n", "entry_point": "can_arrange", "canonical_solution": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,4,3,5])==3\n    assert candidate([1,2,4,5])==-1\n    assert candidate([1,4,2,5,6,7,8,9,10])==2\n    assert candidate([4,8,5,7,3])==4\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([])==-1\n\n"}
{"task_id": "HumanEval/136", "prompt": "\ndef largest_smallest_integers(lst):\n    '''\n'a'\u304c\u3042\u308b\u30bf\u30d7\u30eb(a, b)\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u6700\u5927\u306e\u8ca0\u306e\u6574\u6570\u3067\u3042\u308a\u3001'b'\u304c\u6700\u5c0f\u3067\u3042\u308b\n\u6b63\u306e\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3067\u3059\n\u8ca0\u307e\u305f\u306f\u6b63\u306e\u6574\u6570\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u3001none\u3068\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\nExamples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n", "entry_point": "largest_smallest_integers", "canonical_solution": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([2, 4, 1, 3, 5, 7]) == (None, 1)\n    assert candidate([2, 4, 1, 3, 5, 7, 0]) == (None, 1)\n    assert candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1)\n    assert candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2)\n    assert candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n    assert candidate([]) == (None, None)\n    assert candidate([0]) == (None, None)\n    assert candidate([-1, -3, -5, -6]) == (-1, None)\n    assert candidate([-1, -3, -5, -6, 0]) == (-1, None)\n    assert candidate([-6, -4, -4, -3, 1]) == (-3, 1)\n    assert candidate([-6, -4, -4, -3, -100, 1]) == (-3, 1)\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n"}
{"task_id": "HumanEval/137", "prompt": "\ndef compare_one(a, b):\n    \"\"\"\n\u6574\u6570\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u3001\u307e\u305f\u306f\u6587\u5b57\u5217\u3092\u8868\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\n\u5b9f\u6570\u3067\u3042\u308a\u3001\u4e0e\u3048\u3089\u308c\u305f\u5909\u6570\u578b\u306e\u5927\u304d\u3044\u5909\u6570\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5024\u304c\u7b49\u3057\u3044\u5834\u5408\u306fnone\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u6ce8\u610f:\u5b9f\u6570\u304c\u6587\u5b57\u5217\u3068\u3057\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u6d6e\u52d5\u5c0f\u6570\u70b9\u306f\u6587\u5b57\u5217\u3067\u3042\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\u3042\u308b\u3044\u306f\u3001\n\ncompare_one(1\u30012.5)\u279e2.5\ncompare_one(1,\u300c2\u30013\u300d)\u279e\u300c2\u30013\u300d\ncompare_one(\u300c5 1\u300d\u3001\u300c6\u300d)\u279e\u300c6\u300d\ncompare_one(\u300c1\u300d,1)\u306f\u7121\u279e\n\"\"\"\n", "entry_point": "compare_one", "canonical_solution": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(1, 2) == 2\n    assert candidate(1, 2.5) == 2.5\n    assert candidate(2, 3) == 3\n    assert candidate(5, 6) == 6\n    assert candidate(1, \"2,3\") == \"2,3\"\n    assert candidate(\"5,1\", \"6\") == \"6\"\n    assert candidate(\"1\", \"2\") == \"2\"\n    assert candidate(\"1\", 1) == None\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/138", "prompt": "\ndef is_equal_to_sum_even(n):\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6570n\u304c\u3061\u3087\u3046\u30694\u3064\u306e\u6b63\u306e\u5076\u6570\u306e\u548c\u3068\u3057\u3066\u66f8\u3051\u308b\u304b\u3069\u3046\u304b\u3092\u8a55\u4fa1\u3059\u308b\nExample\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n", "entry_point": "is_equal_to_sum_even", "canonical_solution": "    return n%2 == 0 and n >= 8\n", "test": "def check(candidate):\n    assert candidate(4) == False\n    assert candidate(6) == False\n    assert candidate(8) == True\n    assert candidate(10) == True\n    assert candidate(11) == False\n    assert candidate(12) == True\n    assert candidate(13) == False\n    assert candidate(16) == True\n"}
{"task_id": "HumanEval/139", "prompt": "\ndef special_factorial(n):\n    \"\"\"\u30d6\u30e9\u30b8\u30eb\u306e\u968e\u4e57\u306f\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\nbrazilian_factorial (n) = n !\u203b(n-1\u3050\u3089\u3093\u3077\u308a)!\u203b(n-2) !\u203b\u2026\u00d71 !\n(n > 0)\n\nFor example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n", "entry_point": "special_factorial", "canonical_solution": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(4) == 288, \"Test 4\"\n    assert candidate(5) == 34560, \"Test 5\"\n    assert candidate(7) == 125411328000, \"Test 7\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1) == 1, \"Test 1\"\n\n"}
{"task_id": "HumanEval/140", "prompt": "\ndef fix_spaces(text):\n    \"\"\"\n\u6587\u5b57\u5217\u30c6\u30ad\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u305d\u306e\u4e2d\u306e\u3059\u3079\u3066\u306e\u30b9\u30da\u30fc\u30b9\u3092\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\u6587\u5b57\u5217\u306b\u9023\u7d9a\u3059\u308b\u7a7a\u767d\u304c2\u3064\u4ee5\u4e0a\u3042\u308c\u3070\n\u6b21\u306b\u3001\u9023\u7d9a\u3059\u308b\u3059\u3079\u3066\u306e\u30b9\u30da\u30fc\u30b9\u3092-\u306b\u7f6e\u304d\u63db\u3048\u307e\u3059\n\nfix_spaces (Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n", "entry_point": "fix_spaces", "canonical_solution": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Example\") == \"Example\", \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\", \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\", \"This prints if this assert fails 3 (good for debugging!)\"\n    \n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Exa   mple\") == \"Exa-mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n    assert candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\", \"This prints if this assert fails 4 (good for debugging!)\"\n\n"}
{"task_id": "HumanEval/141", "prompt": "\ndef file_name_check(file_name):\n    \"\"\"\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u8868\u3059\u6587\u5b57\u5217\u3092\u53d6\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u8fd4\u3057\u307e\u3059\n\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u6709\u52b9\u3067\u3042\u308c\u3070' yes '\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070' no '\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u3001\u4ee5\u4e0b\u306e\u3059\u3079\u3066\u306e\u6761\u4ef6\u306e\u5834\u5408\u306b\u306e\u307f\u6709\u52b9\u3068\u307f\u306a\u3055\u308c\u307e\u3059\n\u6e80\u305f\u3057\u3066\u3044\u308b:\n-\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u306f3\u6841('0'-'9')\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3002\n-\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u300c\u70b9\u300d\u304c1\u3064\u3057\u304b\u306a\u3044\u3002\n-\u30c9\u30c3\u30c8\u306e\u524d\u306e\u90e8\u5206\u6587\u5b57\u5217\u306f\u7a7a\u3067\u3042\u3063\u3066\u306f\u306a\u3089\u305a\u3001\u6587\u5b57\u304b\u3089\u59cb\u307e\u308b\n\u30e9\u30c6\u30f3\u8a9e\u306ealphapet(\u300ca\u300d-\u300cz\u300d\u3068\u300ca\u300d-\u300cz\u300d)\u3002\n\u2014\u30c9\u30c3\u30c8\u306e\u5f8c\u306e\u90e8\u5206\u6587\u5b57\u5217\u306f\u6b21\u306e\u3044\u305a\u308c\u304b\u306b\u3057\u3066\u304f\u3060\u3055\u3044:['txt', 'exe', 'dll']\nExamples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n", "entry_point": "file_name_check", "canonical_solution": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"example.txt\") == 'Yes'\n    assert candidate(\"1example.dll\") == 'No'\n    assert candidate('s1sdf3.asd') == 'No'\n    assert candidate('K.dll') == 'Yes'\n    assert candidate('MY16FILE3.exe') == 'Yes'\n    assert candidate('His12FILE94.exe') == 'No'\n    assert candidate('_Y.txt') == 'No'\n    assert candidate('?aREYA.exe') == 'No'\n    assert candidate('/this_is_valid.dll') == 'No'\n    assert candidate('this_is_valid.wow') == 'No'\n    assert candidate('this_is_valid.txt') == 'Yes'\n    assert candidate('this_is_valid.txtexe') == 'No'\n    assert candidate('#this2_i4s_5valid.ten') == 'No'\n    assert candidate('@this1_is6_valid.exe') == 'No'\n    assert candidate('this_is_12valid.6exe4.txt') == 'No'\n    assert candidate('all.exe.txt') == 'No'\n    assert candidate('I563_No.exe') == 'Yes'\n    assert candidate('Is3youfault.txt') == 'Yes'\n    assert candidate('no_one#knows.dll') == 'Yes'\n    assert candidate('1I563_Yes3.exe') == 'No'\n    assert candidate('I563_Yes3.txtt') == 'No'\n    assert candidate('final..txt') == 'No'\n    assert candidate('final132') == 'No'\n    assert candidate('_f4indsartal132.') == 'No'\n    \n        \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('.txt') == 'No'\n    assert candidate('s.') == 'No'\n\n"}
{"task_id": "HumanEval/142", "prompt": "\n\n\ndef sum_squares(lst):\n    \"\"\"\u300c\n\u3053\u306e\u95a2\u6570\u306f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308a\u307e\u3059\u3002\u30ea\u30b9\u30c8\u5185\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u3064\u3044\u3066\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304ca\u306e\u5834\u5408\u3001\u95a2\u6570\u306f\u6574\u6570\u30a8\u30f3\u30c8\u30ea\u30922\u4e57\u3057\u307e\u3059\n\u300cmultiple of 3 and\u300d\u306f\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c4\u306e\u500d\u6570\u30673\u306e\u500d\u6570\u3067\u306f\u306a\u3044\u5834\u5408\u3001\u6574\u6570\u30a8\u30f3\u30c8\u30ea\u3092\u7acb\u65b9\u4f53\u306b\u3057\u307e\u3059\u3002\u3053\u306e\u6a5f\u80fd\u306f\n\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c3\u307e\u305f\u306f4\u306e\u500d\u6570\u3067\u306a\u3044\u30a8\u30f3\u30c8\u30ea\u3092\u30ea\u30b9\u30c8\u5185\u3067\u5909\u66f4\u3059\u308b\u3002\u3053\u306e\u95a2\u6570\u306f\u3001\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306e\u5408\u8a08\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExamples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n", "entry_point": "sum_squares", "canonical_solution": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    \n    assert candidate([1,2,3]) == 6\n    assert candidate([1,4,9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1,1,1,1,1,1,1,1,1]) == 9\n    assert candidate([-1,-1,-1,-1,-1,-1,-1,-1,-1]) == -3\n    assert candidate([0]) == 0\n    assert candidate([-1,-5,2,-1,-5]) == -126\n    assert candidate([-56,-99,1,0,-2]) == 3030\n    assert candidate([-1,0,0,0,0,0,0,0,-1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) == -1448\n    \n    \n    # Don't remove this line:\n"}
{"task_id": "HumanEval/143", "prompt": "\ndef words_in_sentence(sentence):\n    \"\"\"\n\u6587\u3092\u8868\u3059\u6587\u5b57\u5217\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\n\u3053\u306e\u6587\u306b\u306f\u7a7a\u767d\u3067\u533a\u5207\u3089\u308c\u305f\u5358\u8a9e\u304c\u3044\u304f\u3064\u304b\u542b\u307e\u308c\u3066\u3044\u307e\u3059\n\u5143\u306e\u6587\u306e\u5358\u8a9e\u3092\u542b\u3080\u6587\u5b57\u5217\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u9577\u3055\u304c\u7d20\u6570\u3067\n\u65b0\u3057\u3044\u6587\u5b57\u5217\u306e\u5358\u8a9e\u306e\u9806\u5e8f\u306f\u3001\u5143\u306e\u6587\u5b57\u5217\u3068\u540c\u3058\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\nExample 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n", "entry_point": "words_in_sentence", "canonical_solution": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"This is a test\") == \"is\"\n    assert candidate(\"lets go for swimming\") == \"go for\"\n    assert candidate(\"there is no place available here\") == \"there is no place\"\n    assert candidate(\"Hi I am Hussein\") == \"Hi am Hussein\"\n    assert candidate(\"go for it\") == \"go for it\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"here\") == \"\"\n    assert candidate(\"here is\") == \"is\"\n\n"}
{"task_id": "HumanEval/144", "prompt": "\ndef simplify(x, n):\n    \"\"\"\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u5f0f\u3092\u5358\u7d14\u5316\u3059\u308b\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u3059\nx * n.\u3053\u306e\u95a2\u6570\u306f\u3001x * n\u304c\u6574\u6570\u3067false\u306e\u5834\u5408\u306btrue\u3092\u8fd4\u3057\u307e\u3059\n\u3002x\u3082n\u3082\u5206\u6570\u306e\u6587\u5b57\u5217\u8868\u73fe\u3067\u6b21\u306e\u3088\u3046\u306a\u5f62\u5f0f\u3067\u3059\n<\u5206\u5b50>/<\u5206\u6bcd>\u3053\u3053\u3067\u5206\u5b50\u3082\u5206\u6bcd\u3082\u6b63\u306e\u6574\u6570\u3067\u3042\u308b\u3002\n\nx\u3068n\u306f\u6709\u52b9\u306a\u5206\u6570\u3067\u3042\u308a\u3001\u5206\u6bcd\u3068\u3057\u3066\u30bc\u30ed\u3092\u6301\u305f\u306a\u3044\u3068\u4eee\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5358\u7d14\u5316(\"1/5\",\"5/1\")= true\n\u5358\u7d14\u5316(\"1/6\",\"2/1\")= false\n\u5358\u7d14\u5316(\"7/10\",\"10/2\")= false\n\"\"\"\n", "entry_point": "simplify", "canonical_solution": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"1/5\", \"5/1\") == True, 'test1'\n    assert candidate(\"1/6\", \"2/1\") == False, 'test2'\n    assert candidate(\"5/1\", \"3/1\") == True, 'test3'\n    assert candidate(\"7/10\", \"10/2\") == False, 'test4'\n    assert candidate(\"2/10\", \"50/10\") == True, 'test5'\n    assert candidate(\"7/2\", \"4/2\") == True, 'test6'\n    assert candidate(\"11/6\", \"6/1\") == True, 'test7'\n    assert candidate(\"2/3\", \"5/2\") == False, 'test8'\n    assert candidate(\"5/2\", \"3/5\") == False, 'test9'\n    assert candidate(\"2/4\", \"8/4\") == True, 'test10'\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"2/4\", \"4/2\") == True, 'test11'\n    assert candidate(\"1/5\", \"5/1\") == True, 'test12'\n    assert candidate(\"1/5\", \"1/5\") == False, 'test13'\n\n"}
{"task_id": "HumanEval/145", "prompt": "\ndef order_by_points(nums):\n    \"\"\"\n\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u30bd\u30fc\u30c8\u3059\u308b\u95a2\u6570\u3092\u66f8\u304f\n\u6570\u5b57\u306e\u5408\u8a08\u3067\u6607\u9806\u306b\u8868\u793a\u3055\u308c\u307e\u3059\n\u6ce8\u610f:\u540c\u3058\u6570\u5b57\u306e\u5408\u8a08\u304c\u8907\u6570\u3042\u308b\u5834\u5408\n\u5143\u306e\u30ea\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u57fa\u3065\u3044\u3066\u305d\u308c\u3089\u3092\u6ce8\u6587\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nFor example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n", "entry_point": "order_by_points", "canonical_solution": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,423,463,145,2,423,423,53,6,37,3457,3,56,0,46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,2,3,4,5,6,7,8,9,10,11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,6,6,-76,-21,23,4]) == [-76, -21, 0, 4, 23, 6, 6]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/146", "prompt": "\ndef specialFilter(nums):\n    \"\"\"\u6570\u5024\u306e\u914d\u5217\u3092\u5165\u529b\u3068\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\n\u914d\u5217\u5185\u306e10\u4ee5\u4e0a\u306e\u8981\u7d20\u3068\u305d\u306e\u4e21\u65b9\u306e\u6570\n\u6570\u5b57\u306e\u6700\u521d\u3068\u6700\u5f8c\u306e\u6841\u306f\u5947\u6570(1,3,5,7,9)\u3067\u3059\u3002\nFor example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n", "entry_point": "specialFilter", "canonical_solution": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([5, -2, 1, -5]) == 0  \n    assert candidate([15, -73, 14, -15]) == 1\n    assert candidate([33, -2, -3, 45, 21, 109]) == 2\n    assert candidate([43, -12, 93, 125, 121, 109]) == 4\n    assert candidate([71, -2, -33, 75, 21, 19]) == 3\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([1]) == 0              \n    assert candidate([]) == 0                   \n\n"}
{"task_id": "HumanEval/147", "prompt": "\ndef get_max_triples(n):\n    \"\"\"\n\u6b63\u306e\u6574\u6570n\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u9577\u3055n\u306e\u6574\u6570\u914d\u5217a\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u5404i(1\u2264i\u2264n)\u306b\u5bfe\u3057\u3066\u3001a[i] = i * i - i + 1\u306e\u5024\u3002\na\u306e\u4e09\u3064\u7d44(a[i], a[j], a[k])\u306e\u6570\u3092\u8fd4\u3059\u3002\na[i] + a[j] + a[k]\u306f3\u306e\u500d\u6570\u3067\u3042\u308b\u3002\n\nExample :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n", "entry_point": "get_max_triples", "canonical_solution": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "test": "def check(candidate):\n\n    assert candidate(5) == 1\n    assert candidate(6) == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n"}
{"task_id": "HumanEval/148", "prompt": "\ndef bf(planet1, planet2):\n    '''\n\u79c1\u305f\u3061\u306e\u592a\u967d\u7cfb\u306b\u306f8\u3064\u306e\u60d1\u661f\u304c\u3042\u308a\u307e\u3059\n\u6b21\u306f\u91d1\u661f\u305d\u3057\u3066\u5730\u7403\u706b\u661f\u6728\u661f\u571f\u661f\n\u5929\u738b\u661f\u304c\u3059\u308b\u3093\u3060\u308d\u3046?\n2\u3064\u306e\u60d1\u661f\u540d\u3092\u6587\u5b57\u5217planet1\u3068planet2\u3068\u3057\u3066\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u8ecc\u9053\u3092\u6301\u3064\u3059\u3079\u3066\u306e\u60d1\u661f\u3092\u542b\u3080\u30bf\u30d7\u30eb\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u60d1\u661f1\u306e\u8ecc\u9053\u3068\u60d1\u661f2\u306e\u8ecc\u9053\u306e\u9593\u306b\u4f4d\u7f6e\u3059\u308b\n\u592a\u967d\u306b\u8fd1\u3044\u3002\nplanet1\u307e\u305f\u306fplanet2\u306e\u5834\u5408\u3001\u95a2\u6570\u306f\u7a7a\u306e\u30bf\u30d7\u30eb\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u6b63\u3057\u3044\u60d1\u661f\u540d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\nExamples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n", "entry_point": "bf", "canonical_solution": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"Jupiter\", \"Neptune\") == (\"Saturn\", \"Uranus\"), \"First test error: \" + str(len(candidate(\"Jupiter\", \"Neptune\")))      \n    assert candidate(\"Earth\", \"Mercury\") == (\"Venus\",), \"Second test error: \" + str(candidate(\"Earth\", \"Mercury\"))  \n    assert candidate(\"Mercury\", \"Uranus\") == (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"), \"Third test error: \" + str(candidate(\"Mercury\", \"Uranus\"))      \n    assert candidate(\"Neptune\", \"Venus\") == (\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"), \"Fourth test error: \" + str(candidate(\"Neptune\", \"Venus\"))  \n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"Earth\", \"Earth\") == ()\n    assert candidate(\"Mars\", \"Earth\") == ()\n    assert candidate(\"Jupiter\", \"Makemake\") == ()\n\n"}
{"task_id": "HumanEval/149", "prompt": "\ndef sorted_list_sum(lst):\n    \"\"\"\u5f15\u6570\u3068\u3057\u3066\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304f\n\u9577\u3055\u304c\u5947\u6570\u306e\u6587\u5b57\u5217\u3092\u524a\u9664\u3057\n\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u307e\u3059\n\u30ea\u30b9\u30c8\u306f\u5e38\u306b\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3067\u3042\u308a\u3001\u6570\u5b57\u306e\u914d\u5217\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u307e\u305f\u3001\u91cd\u8907\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u306e\u9806\u5e8f\u306f\u3001\u5404\u5358\u8a9e\u306e\u9577\u3055\u3001\u304a\u3088\u3073\u3042\u306a\u305f\u306b\u3088\u3063\u3066\u6607\u9806\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u305d\u306e\u30eb\u30fc\u30eb\u3067\u30bd\u30fc\u30c8\u3055\u308c\u305f\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n2\u3064\u306e\u5358\u8a9e\u306e\u9577\u3055\u304c\u540c\u3058\u5834\u5408\u306f\u3001\u30ea\u30b9\u30c8\u3092\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u30bd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\u3053\u306e\u95a2\u6570\u306f\u3001\u30bd\u30fc\u30c8\u3055\u308c\u305f\u9806\u5e8f\u3067\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3059\u3079\u3066\u306e\u5358\u8a9e\u304c\u540c\u3058\u9577\u3055\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nFor example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n", "entry_point": "sorted_list_sum", "canonical_solution": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\n    assert candidate([\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"]\n    assert candidate([\"d\", \"b\", \"c\", \"a\"]) == []\n    assert candidate([\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"]\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"]\n    assert candidate([\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == []\n    assert candidate(['aaaa', 'bbbb', 'dd', 'cc']) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"]\n\n"}
{"task_id": "HumanEval/150", "prompt": "\ndef x_or_y(n, x, y):\n    \"\"\"n\u304c\u3042\u308c\u3070x\u306e\u5024\u3092\u8fd4\u3059\u5358\u7d14\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\n\u7d20\u6570\u3067\u3042\u308a\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070y\u306e\u5024\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nExamples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n", "entry_point": "x_or_y", "canonical_solution": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7, 34, 12) == 34\n    assert candidate(15, 8, 5) == 5\n    assert candidate(3, 33, 5212) == 33\n    assert candidate(1259, 3, 52) == 3\n    assert candidate(7919, -1, 12) == -1\n    assert candidate(3609, 1245, 583) == 583\n    assert candidate(91, 56, 129) == 129\n    assert candidate(6, 34, 1234) == 1234\n    \n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 2, 0) == 0\n    assert candidate(2, 2, 0) == 2\n\n"}
{"task_id": "HumanEval/151", "prompt": "\ndef double_the_difference(lst):\n    '''\n\u6570\u5b57\u306e\u30ea\u30b9\u30c8\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u305d\u306e\u6570\u5b57\u306e\u5e73\u65b9\u548c\u3092\u8fd4\u3057\u307e\u3059\n\u5947\u5999\u306a\u30ea\u30b9\u30c8\u306e\u4e2d\u3067\u3002\u8ca0\u307e\u305f\u306f\u6574\u6570\u3067\u306a\u3044\u6570\u306f\u7121\u8996\u3057\u307e\u3059\u3002\n\ndouble_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\ndouble_the_difference([-1, -2, 0]) == 0\ndouble_the_difference([9, -2]) == 81\ndouble_the_difference ([0]) = = 0\n\n\u5165\u529b\u30ea\u30b9\u30c8\u304c\u7a7a\u306e\u5834\u5408\u306f0\u3092\u8fd4\u3059\u3002\n'''\n", "entry_point": "double_the_difference", "canonical_solution": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([]) == 0 , \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([5, 4]) == 25 , \"This prints if this assert fails 2 (good for debugging!)\"\n    assert candidate([0.1, 0.2, 0.3]) == 0 , \"This prints if this assert fails 3 (good for debugging!)\"\n    assert candidate([-10, -20, -30]) == 0 , \"This prints if this assert fails 4 (good for debugging!)\"\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate([-1, -2, 8]) == 0, \"This prints if this assert fails 5 (also good for debugging!)\"\n    assert candidate([0.2, 3, 5]) == 34, \"This prints if this assert fails 6 (also good for debugging!)\"\n    lst = list(range(-99, 100, 2))\n    odd_sum = sum([i**2 for i in lst if i%2!=0 and i > 0])\n    assert candidate(lst) == odd_sum , \"This prints if this assert fails 7 (good for debugging!)\"\n\n"}
{"task_id": "HumanEval/152", "prompt": "\ndef compare(game,guess):\n    \"\"\"\u79c1\u305f\u3061\u306e\u3059\u3079\u3066\u306e\u611f\u60c5\u3092\u899a\u3048\u3066\u3044\u308b\u3068\u601d\u3046\u3068\u304d\u306b\u3044\u304f\u3064\u304b\u306e\u5f85\u671b\u306e\u7d50\u679c\n\u6700\u7d42\u8a71\u3067\u5224\u660e\u3057\u305f\u3002\u3042\u306a\u305f\u304c\u305d\u306e\u77ac\u9593\u306b\u6301\u3063\u3066\u3044\u308b\u611f\u60c5\u3084\u8003\u3048\u306f\u305d\u3046\u3067\u3059\n\u9593\u9055\u3044\u306a\u304f\u30c0\u30a6\u30f3\u6ce8\u76ee\u3057\u3001\u6bd4\u8f03\u3059\u308b\u4fa1\u5024\u304c\u3042\u308a\u307e\u3059\u3002\n\u3042\u306a\u305f\u306e\u4ed5\u4e8b\u306f\u3001\u4eba\u304c\u4e00\u81f4\u306e\u6570\u306e\u7d50\u679c\u3092\u6b63\u3057\u304f\u63a8\u6e2c\u3057\u305f\u304b\u3069\u3046\u304b\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u540c\u3058\u9577\u3055\u306e\u30b9\u30b3\u30a2\u3068\u63a8\u6e2c\u306e2\u3064\u306e\u914d\u5217\u304c\u4e0e\u3048\u3089\u308c\u3001\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306f\u4e00\u81f4\u3092\u793a\u3057\u307e\u3059\u3002\n\u540c\u3058\u9577\u3055\u306e\u914d\u5217\u3092\u8fd4\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u63a8\u6e2c\u304c\u3069\u308c\u3060\u3051\u96e2\u308c\u3066\u3044\u308b\u304b\u3092\u793a\u3057\u307e\u3059\u3002\u5f7c\u3089\u306e\u63a8\u6e2c\u304c\u6b63\u3057\u3051\u308c\u3070\n\u5024\u306f0\u3067\u3042\u308a\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u3001\u5024\u306f\u63a8\u6e2c\u3068\u30b9\u30b3\u30a2\u306e\u7d76\u5bfe\u5dee\u3067\u3059\u3002\n\n\nexample:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n", "entry_point": "compare", "canonical_solution": "    return [abs(x-y) for x,y in zip(game,guess)]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate([1,2,3,4,5,1],[1,2,3,4,2,-2])==[0,0,0,0,3,3], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([0,0,0,0,0,0],[0,0,0,0,0,0])==[0,0,0,0,0,0], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3],[-1,-2,-3])==[2,4,6], \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate([1,2,3,5],[-1,2,3,4])==[2,0,0,1], \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/153", "prompt": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\u30af\u30e9\u30b9\u540d(\u6587\u5b57\u5217)\u3068\u62e1\u5f35\u5b50\u306e\u30ea\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\u62e1\u5f35\u306f\u3001\u305d\u306e\u30af\u30e9\u30b9\u306b\u8ffd\u52a0\u306e\u30af\u30e9\u30b9\u3092\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u306e\n\u62e1\u5f35\u306e\u5f37\u3055\u306f\u6b21\u306e\u3068\u304a\u308a\u3067\u3059\u3002cap\u306f\u5927\u6587\u5b57\u306e\u6570\u3068\u3057\u307e\u3059\n\u62e1\u5f35\u5b50\u306e\u540d\u524d\u306b\u6587\u5b57\u3092\u5165\u308c\u3001sm\u3092\u5c0f\u6587\u5b57\u306e\u6570\u3068\u3057\u307e\u3059\n\u62e1\u5f35\u306e\u540d\u524d\u3067\u306f\u3001\u5f37\u3055\u306f\u5206\u6570\u30ad\u30e3\u30c3\u30d7- sm\u306b\u3088\u3063\u3066\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\u6700\u3082\u5f37\u529b\u306a\u62e1\u5f35\u5b50\u3092\u898b\u3064\u3051\u3066\u6587\u5b57\u5217\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u30d5\u30a9\u30fc\u30de\u30c3\u30c8:ClassName.StrongestExtensionName\u3002\n\u540c\u3058\u5f37\u5ea6\u3092\u6301\u30642\u3064\u4ee5\u4e0a\u306e\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\u304c\u3042\u308b\u5834\u5408\u306f\u3001\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\n\u30ea\u30b9\u30c8\u306e\u6700\u521d\u306b\u3042\u308b\u3082\u306e\u3092\u9078\u3073\u306a\u3055\u3044\u3002\nFor example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n", "entry_point": "Strongest_Extension", "canonical_solution": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t', 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp', ['671235', 'Bb']) == 'Sp.671235'\n    \n"}
{"task_id": "HumanEval/154", "prompt": "\ndef cycpattern_check(a , b):\n    \"\"\"\u3042\u306a\u305f\u306f2\u3064\u306e\u5358\u8a9e\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u30022\u756a\u76ee\u306e\u5358\u8a9e\u307e\u305f\u306f\u305d\u306e\u56de\u8ee2\u304c\u6700\u521d\u306e\u5358\u8a9e\u306e\u90e8\u5206\u6587\u5b57\u5217\u3067\u3042\u308b\u5834\u5408\u306f\u3001true\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\ncycpattern_check(\u300cabbc =\u300d\u3001\u300cabd\u300d)\u2192\u507d\ncycpattern_check(\u300c\u3053\u3093\u306b\u3061\u306f\u300d\u3001\u300c\u30c8\u30f3\u300d)\u2192\u672c\u5f53\ncycpattern_check(\u300c\u7528\u306f\u300d\u3001\u300cpsus\u300d)\u2192\u507d\ncycpattern_check(\u300cabab\u300d\u3001\u300c\u4e80\u300d)\u2192\u672c\u5f53\ncycpattern_check(\u300cefef\u300d\u3001\u300ceeff\u300d)\u2192\u507d\ncycpattern_check(\u300chimenss\u300d\u3001\u300csimen\u300d)\u2192\u672c\u5f53\n\n\"\"\"\n", "entry_point": "cycpattern_check", "canonical_solution": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    #assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    #assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert  candidate(\"xyzw\",\"xyw\") == False , \"test #0\"\n    assert  candidate(\"yello\",\"ell\") == True , \"test #1\"\n    assert  candidate(\"whattup\",\"ptut\") == False , \"test #2\"\n    assert  candidate(\"efef\",\"fee\") == True , \"test #3\"\n    assert  candidate(\"abab\",\"aabb\") == False , \"test #4\"\n    assert  candidate(\"winemtt\",\"tinem\") == True , \"test #5\"\n\n"}
{"task_id": "HumanEval/155", "prompt": "\ndef even_odd_count(num):\n    \"\"\"\u6574\u6570\u4e0e\u3048\u3089\u308c\u305f\u3002\u5076\u6570\u6841\u3068\u5947\u6570\u6841\u306e\u6570\u3092\u6301\u3064\u30bf\u30d7\u30eb\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nExample:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n", "entry_point": "even_odd_count", "canonical_solution": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(7) == (0, 1)\n    assert candidate(-78) == (1, 1)\n    assert candidate(3452) == (2, 2)\n    assert candidate(346211) == (3, 3)\n    assert candidate(-345821) == (3, 3)\n    assert candidate(-2) == (1, 0)\n    assert candidate(-45347) == (2, 3)\n    assert candidate(0) == (1, 0)\n\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/156", "prompt": "\ndef int_to_mini_roman(number):\n    \"\"\"\n\u6b63\u306e\u6574\u6570\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001\u6587\u5b57\u5217\u3068\u3057\u3066\u30ed\u30fc\u30de\u6570\u5b57\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3092\u5f97\u308b\u3002\n\u5c0f\u6587\u5b57\u3067\u8fd4\u3057\u307e\u3059\n\u5236\u9650:1 <= num <= 1000\n\nExamples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n", "entry_point": "int_to_mini_roman", "canonical_solution": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(19) == 'xix'\n    assert candidate(152) == 'clii'\n    assert candidate(251) == 'ccli'\n    assert candidate(426) == 'cdxxvi'\n    assert candidate(500) == 'd'\n    assert candidate(1) == 'i'\n    assert candidate(4) == 'iv'\n    assert candidate(43) == 'xliii'\n    assert candidate(90) == 'xc'\n    assert candidate(94) == 'xciv'\n    assert candidate(532) == 'dxxxii'\n    assert candidate(900) == 'cm'\n    assert candidate(994) == 'cmxciv'\n    assert candidate(1000) == 'm'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/157", "prompt": "\ndef right_angle_triangle(a, b, c):\n    '''\n\u4e09\u89d2\u5f62\u306e3\u8fba\u306e\u9577\u3055\u3092\u8003\u3048\u308b\u3068true\u3092\u8fd4\u3059\u5834\u5408\u306f\u30013\n\u8fba\u306f\u76f4\u89d2\u4e09\u89d2\u5f62\u3092\u5f62\u6210\u3057\u3001\u305d\u308c\u4ee5\u5916\u306f\u507d\u3068\u306a\u308b\u3002\n\u76f4\u89d2\u4e09\u89d2\u5f62\u306f\u30011\u3064\u306e\u89d2\u304c\u76f4\u89d2\u307e\u305f\u306f\u76f4\u89d2\u3067\u3042\u308b\u4e09\u89d2\u5f62\u3067\u3042\u308b\n90\u5ea6\u3002\nExample:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n", "entry_point": "right_angle_triangle", "canonical_solution": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(3, 4, 5) == True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(1, 2, 3) == False\n    assert candidate(10, 6, 8) == True\n    assert candidate(2, 2, 2) == False\n    assert candidate(7, 24, 25) == True\n    assert candidate(10, 5, 7) == False\n    assert candidate(5, 12, 13) == True\n    assert candidate(15, 8, 17) == True\n    assert candidate(48, 55, 73) == True\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(1, 1, 1) == False, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(2, 2, 10) == False\n\n"}
{"task_id": "HumanEval/158", "prompt": "\ndef find_max(words):\n    \"\"\"\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\u3092\u66f8\u304d\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u306b\u306f\u7570\u306a\u308b\u5358\u8a9e\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u6700\u5927\u6570\u306e\u5358\u8a9e\u3092\u8fd4\u3059\n\u5b57\u6570\u306f\u72ec\u7279\u5b57\u3067\u3042\u308b\u3002\u8907\u6570\u306e\u6587\u5b57\u5217\u304c\u6700\u5927\u306e\u4e00\u610f\u6570\u3092\u6301\u3064\u5834\u5408\ncharacters,\u8f9e\u66f8\u9806\u306b\u6700\u521d\u306b\u6765\u308b\u3082\u306e\u3092\u8fd4\u3059\u3002\n\nfind_max([\"name\", \"of\", \"string\"]) == \"string\"\nfind_max([\"name\", \"enam\", \"game\"]) == \"enam\"\nfind_max([\"aaaaaaa\", \"bb\",\"cc\"]) == \"\"aaaaaaa\"\n\"\"\"\n", "entry_point": "find_max", "canonical_solution": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert (candidate([\"name\", \"of\", \"string\"]) == \"string\"), \"t1\"\n    assert (candidate([\"name\", \"enam\", \"game\"]) == \"enam\"), 't2'\n    assert (candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"aaaaaaa\"), 't3'\n    assert (candidate([\"abc\", \"cba\"]) == \"abc\"), 't4'\n    assert (candidate([\"play\", \"this\", \"game\", \"of\",\"footbott\"]) == \"footbott\"), 't5'\n    assert (candidate([\"we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\"), 't6'\n    assert (candidate([\"we\", \"are\", \"a\", \"mad\", \"nation\"]) == \"nation\"), 't7'\n    assert (candidate([\"this\", \"is\", \"a\", \"prrk\"]) == \"this\"), 't8'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert (candidate([\"b\"]) == \"b\"), 't9'\n    assert (candidate([\"play\", \"play\", \"play\"]) == \"play\"), 't10'\n\n"}
{"task_id": "HumanEval/159", "prompt": "\ndef eat(number, need, remaining):\n    \"\"\"\n\u304a\u8179\u3092\u7a7a\u304b\u305b\u305f\u30a6\u30b5\u30ae\u3067\u3042\u308b\u3042\u306a\u305f\u306f\u3059\u3067\u306b\u4e00\u5b9a\u91cf\u306e\u30cb\u30f3\u30b8\u30f3\u3092\u98df\u3079\u3066\u3044\u307e\u3059\n\u3057\u304b\u3057\u4eca\u3001\u3042\u306a\u305f\u306f\u305d\u306e\u65e5\u306e\u98df\u4e8b\u3092\u5b8c\u4e86\u3059\u308b\u305f\u3081\u306b\u3001\u3088\u308a\u591a\u304f\u306e\u30cb\u30f3\u30b8\u30f3\u3092\u98df\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u300c\u98df\u5f8c\u306b\u98df\u3079\u305f\u30cb\u30f3\u30b8\u30f3\u306e\u7dcf\u6570\u300d\u306e\u914d\u5217\u3092\u8fd4\u3057\u307e\u3059\n\u98df\u5f8c\u306e\u30cb\u30f3\u30b8\u30f3\u306e\u6b8b\u91cf>\n\u30cb\u30f3\u30b8\u30f3\u304c\u8db3\u308a\u306a\u3044\u5834\u5408\u306f\u3001\u6b8b\u308a\u306e\u30cb\u30f3\u30b8\u30f3\u3092\u5168\u90e8\u98df\u3079\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u305d\u308c\u3067\u3082\u304a\u8179\u304c\u7a7a\u3044\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\nExample:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n", "entry_point": "eat", "canonical_solution": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert True, \"This prints if this assert fails 1 (good for debugging!)\"\n    assert candidate(5, 6, 10) == [11, 4], \"Error\"\n    assert candidate(4, 8, 9) == [12, 1], \"Error\"\n    assert candidate(1, 10, 10) == [11, 0], \"Error\"\n    assert candidate(2, 11, 5) == [7, 0], \"Error\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n    assert candidate(4, 5, 7) == [9, 2], \"Error\"\n    assert candidate(4, 5, 1) == [5, 0], \"Error\"\n\n"}
{"task_id": "HumanEval/160", "prompt": "\ndef do_algebra(operator, operand):\n    \"\"\"\n2\u3064\u306e\u30ea\u30b9\u30c8operator\u3068operand\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\u6700\u521d\u306e\u30ea\u30b9\u30c8\u306f\u3001\u57fa\u672c\u7684\u306a\u4ee3\u6570\u6f14\u7b97\u3092\u6301\u3063\u3066\u3044\u307e\u3059\n2\u756a\u76ee\u306e\u30ea\u30b9\u30c8\u306f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002\u4e8c\u3064\u306e\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u3092\u4f7f\u3063\u3066\u4ee3\u6570\u3092\u69cb\u7bc9\u3059\u308b\n\u5f0f\u306f\u3001\u3053\u306e\u5f0f\u306e\u8a55\u4fa1\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u57fa\u672c\u7684\u306a\u4ee3\u6570\u6f14\u7b97\u3067\u3059\n\u52a0\u6cd5(+)\n\u5f15\u304d\u7b97(-)\n\u4e57\u7b97(*)\n\u968e\u5272\u308a(//)\n\u6307\u6570\u5316(**)\n\nExample:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n", "entry_point": "do_algebra", "canonical_solution": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(['**', '*', '+'], [2, 3, 4, 5]) == 37\n    assert candidate(['+', '*', '-'], [2, 3, 4, 5]) == 9\n    assert candidate(['//', '*'], [7, 3, 4]) == 8, \"This prints if this assert fails 1 (good for debugging!)\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
{"task_id": "HumanEval/161", "prompt": "\ndef solve(s):\n    \"\"\"\u6587\u5b57\u5217s\u304c\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\ns[i]\u304c\u6587\u5b57\u306e\u5834\u5408\u3001\u5c0f\u6587\u5b57\u3092\u4e0b\u304b\u3089\u4e0a\u306b\u3001\u307e\u305f\u306f\u30d0\u30a4\u30b9\u304b\u3089\u4e0a\u306b\u53cd\u8ee2\u3055\u305b\u307e\u3059\u3002\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\u6587\u5b57\u5217\u306b\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u3001\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3055\u305b\u307e\u3059\u3002\n\u95a2\u6570\u306f\u7d50\u679c\u306e\u6587\u5b57\u5217\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nExamples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n", "entry_point": "solve", "canonical_solution": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(\"AsDf\") == \"aSdF\"\n    assert candidate(\"1234\") == \"4321\"\n    assert candidate(\"ab\") == \"AB\"\n    assert candidate(\"#a@C\") == \"#A@c\"\n    assert candidate(\"#AsdfW^45\") == \"#aSDFw^45\"\n    assert candidate(\"#6@2\") == \"2@6#\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert candidate(\"#$a^D\") == \"#$A^d\"\n    assert candidate(\"#ccc\") == \"#CCC\"\n\n    # Don't remove this line:\n"}
{"task_id": "HumanEval/162", "prompt": "\ndef string_to_md5(text):\n    \"\"\"\n\u6587\u5b57\u5217'text'\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001md5\u30cf\u30c3\u30b7\u30e5\u306b\u76f8\u5f53\u3059\u308b\u6587\u5b57\u5217\u3092\u8fd4\u3057\u307e\u3059\u3002\n'text'\u304c\u7a7a\u6587\u5b57\u5217\u306e\u5834\u5408\u306fnone\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n>>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n", "entry_point": "string_to_md5", "canonical_solution": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    assert candidate('') == None\n    assert candidate('A B C') == '0ef78513b0cb8cef12743f5aeb35f888'\n    assert candidate('password') == '5f4dcc3b5aa765d61d8327deb882cf99'\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True\n\n"}
{"task_id": "HumanEval/163", "prompt": "\ndef generate_integers(a, b):\n    \"\"\"\n2\u3064\u306e\u6b63\u306e\u6574\u6570a\u3068b\u304c\u4e0e\u3048\u3089\u308c\u305f\u3068\u304d\u3001a\u306e\u9593\u306e\u5076\u6570\u6841\u3092\u8fd4\u3059\nb\u3092\u6607\u9806\u306b\u4e26\u3079\u307e\u3059\n\nFor example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n", "entry_point": "generate_integers", "canonical_solution": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "test": "def check(candidate):\n\n    # Check some simple cases\n    assert candidate(2, 10) == [2, 4, 6, 8], \"Test 1\"\n    assert candidate(10, 2) == [2, 4, 6, 8], \"Test 2\"\n    assert candidate(132, 2) == [2, 4, 6, 8], \"Test 3\"\n    assert candidate(17,89) == [], \"Test 4\"\n\n    # Check some edge cases that are easy to work out by hand.\n    assert True, \"This prints if this assert fails 2 (also good for debugging!)\"\n\n"}
