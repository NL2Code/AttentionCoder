{"task_id": "HumanEval/9", "prompt": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u306e\u9577\u3055\u307e\u3067\u6210\u9577\u3057\u305f\u6700\u5927\u306e\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u9806\u306b\u751f\u6210\u3057\u307e\u3059\u3002\n>>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n", "entry_point": "rolling_max", "canonical_solution": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "test": "\n\nMETADATA = {\n    'author': 'jt',\n    'dataset': 'test'\n}\n\n\ndef check(candidate):\n    assert candidate([]) == []\n    assert candidate([1, 2, 3, 4]) == [1, 2, 3, 4]\n    assert candidate([4, 3, 2, 1]) == [4, 4, 4, 4]\n    assert candidate([3, 2, 3, 100, 3]) == [3, 3, 3, 100, 100]\n"}
